/* The following code was generated by JFlex 1.6.1 */

package sistema.analisis;

/*impor java_cup.runtime.Symbol;*/
import sistema.bean.Token;
import main.Main;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int HSCRIPT = 4;
  public static final int CADENA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  5, 15, 74, 62,  0, 72,  0, 66, 67,  8, 63,  0, 64, 11,  7, 
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0, 65,  4, 14,  6, 16, 
     0, 27, 29, 17, 51, 31, 43, 47, 57, 25, 59, 75, 39, 21, 49, 19, 
    23, 55, 33, 41, 35, 37,  0,  0, 45,  0, 53, 70, 61, 71,  0, 13, 
     0, 28, 30, 18, 52, 32, 44, 48, 58, 26, 60, 76, 40, 22, 50, 20, 
    24, 56, 34, 42, 36, 38, 12, 12, 46, 12, 54, 68, 73, 69,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\13\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\7\1\23\1\24\1\25"+
    "\1\26\1\27\1\1\1\24\1\1\1\24\1\1\1\24"+
    "\1\1\1\24\1\1\1\24\1\1\1\24\1\1\1\24"+
    "\1\1\1\24\1\1\1\24\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\1\1\42"+
    "\1\43\2\0\1\44\6\0\1\45\17\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\3\2\0\1\55"+
    "\2\0\2\24\1\56\1\0\1\56\1\24\2\0\2\24"+
    "\1\0\2\24\1\0\2\24\1\0\1\24\2\57\1\60"+
    "\1\61\32\0\1\3\2\0\2\62\2\0\2\24\1\0"+
    "\1\24\2\0\2\24\1\0\2\24\1\0\2\24\1\0"+
    "\1\24\6\0\1\63\3\0\1\64\7\0\1\65\2\0"+
    "\1\66\6\0\2\24\1\0\1\24\1\67\1\70\1\67"+
    "\1\70\1\0\1\24\1\65\5\0\6\24\5\0\5\24"+
    "\1\71\10\0\1\72\1\73\1\74\2\0\1\75\1\76"+
    "\1\77\1\100\1\101\4\0\2\24\1\0\1\24\1\0"+
    "\1\24\6\0\6\24\1\101\6\0\6\24\3\0\1\102"+
    "\1\0\1\103\3\0\1\104\1\105\1\106\7\0\5\24"+
    "\1\0\1\24\1\0\1\24\7\0\7\24\7\0\7\24"+
    "\1\107\2\0\1\110\2\0\1\111\1\112\7\0\6\24"+
    "\1\0\1\24\2\113\1\0\1\114\1\0\1\115\3\0"+
    "\1\24\1\114\1\24\1\115\3\24\1\0\1\116\1\0"+
    "\1\117\3\0\1\24\1\116\1\24\1\117\3\24\1\120"+
    "\1\121\1\122\11\0\6\24\2\123\2\0\1\124\1\125"+
    "\1\126\2\24\1\124\1\125\1\126\2\0\1\127\1\130"+
    "\1\131\2\24\1\127\1\130\1\131\1\132\10\0\6\24"+
    "\2\0\2\24\2\0\2\24\1\133\3\0\1\134\1\135"+
    "\1\0\1\136\2\24\1\134\1\135\1\24\1\136\2\0"+
    "\2\24\2\0\2\24\1\137\1\0\1\140\1\141\1\142"+
    "\1\24\1\140\1\141\1\142\2\0\2\24\2\0\2\24"+
    "\2\143\1\144\1\0\1\144\1\24\1\145\1\0\1\145"+
    "\1\24\2\146\2\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u0134\0\u0134"+
    "\0\u01ce\0\u021b\0\u0134\0\u0134\0\u0268\0\u0134\0\u0134\0\u0134"+
    "\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483\0\u04d0"+
    "\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0134\0\u0651\0\u069e\0\u06eb"+
    "\0\u0738\0\u0785\0\u0134\0\u07d2\0\u081f\0\u0134\0\u086c\0\u08b9"+
    "\0\u0134\0\u0134\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87"+
    "\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef"+
    "\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0134\0\u0134\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0e70\0\u0ebd"+
    "\0\u0134\0\u0134\0\u0f0a\0\u021b\0\u0134\0\u0f57\0\u0fa4\0\u0ff1"+
    "\0\u103e\0\u108b\0\u10d8\0\u0134\0\u1125\0\u1172\0\u11bf\0\u120c"+
    "\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474"+
    "\0\u14c1\0\u150e\0\u155b\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u15a8\0\u15f5\0\u1642\0\u0134\0\u168f\0\u16dc"+
    "\0\u1729\0\u1776\0\u0134\0\u17c3\0\u086c\0\u1810\0\u185d\0\u18aa"+
    "\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12"+
    "\0\u1b5f\0\u1bac\0\u0134\0\u086c\0\u0134\0\u0134\0\u1bf9\0\u1c46"+
    "\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae"+
    "\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116"+
    "\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e"+
    "\0\u23cb\0\u2418\0\u2465\0\u0134\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801"+
    "\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u2a69"+
    "\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u0134\0\u2c37\0\u2c84"+
    "\0\u2cd1\0\u0134\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f"+
    "\0\u2eec\0\u0134\0\u2f39\0\u2f86\0\u0134\0\u2fd3\0\u3020\0\u306d"+
    "\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u3288\0\u0134"+
    "\0\u0134\0\u086c\0\u086c\0\u32d5\0\u3322\0\u086c\0\u336f\0\u33bc"+
    "\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624"+
    "\0\u3671\0\u36be\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c"+
    "\0\u38d9\0\u3926\0\u3973\0\u0134\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7"+
    "\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u0134\0\u0134\0\u0134\0\u3c28"+
    "\0\u3c75\0\u0134\0\u3cc2\0\u0134\0\u0134\0\u0134\0\u3d0f\0\u3d5c"+
    "\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4"+
    "\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df\0\u422c"+
    "\0\u4279\0\u42c6\0\u4313\0\u4360\0\u086c\0\u43ad\0\u43fa\0\u4447"+
    "\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af"+
    "\0\u46fc\0\u4749\0\u4796\0\u47e3\0\u0134\0\u4830\0\u0134\0\u487d"+
    "\0\u48ca\0\u4917\0\u0134\0\u0134\0\u0134\0\u4964\0\u49b1\0\u49fe"+
    "\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66"+
    "\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34\0\u4e81\0\u4ece"+
    "\0\u4f1b\0\u4f68\0\u4fb5\0\u5002\0\u504f\0\u509c\0\u50e9\0\u5136"+
    "\0\u5183\0\u51d0\0\u521d\0\u526a\0\u52b7\0\u5304\0\u5351\0\u539e"+
    "\0\u53eb\0\u5438\0\u5485\0\u54d2\0\u551f\0\u556c\0\u55b9\0\u5606"+
    "\0\u5653\0\u56a0\0\u56ed\0\u573a\0\u0134\0\u5787\0\u57d4\0\u0134"+
    "\0\u0134\0\u5821\0\u586e\0\u58bb\0\u5908\0\u5955\0\u59a2\0\u59ef"+
    "\0\u5a3c\0\u5a89\0\u5ad6\0\u5b23\0\u5b70\0\u5bbd\0\u5c0a\0\u5c57"+
    "\0\u0134\0\u086c\0\u5ca4\0\u0134\0\u5cf1\0\u0134\0\u5d3e\0\u5d8b"+
    "\0\u5dd8\0\u5e25\0\u086c\0\u5e72\0\u086c\0\u5ebf\0\u5f0c\0\u5f59"+
    "\0\u5fa6\0\u0134\0\u5ff3\0\u0134\0\u6040\0\u608d\0\u60da\0\u6127"+
    "\0\u086c\0\u6174\0\u086c\0\u61c1\0\u620e\0\u625b\0\u0134\0\u0134"+
    "\0\u0134\0\u62a8\0\u62f5\0\u6342\0\u638f\0\u63dc\0\u6429\0\u6476"+
    "\0\u64c3\0\u6510\0\u655d\0\u65aa\0\u65f7\0\u6644\0\u6691\0\u66de"+
    "\0\u0134\0\u086c\0\u672b\0\u6778\0\u0134\0\u0134\0\u0134\0\u67c5"+
    "\0\u6812\0\u086c\0\u086c\0\u086c\0\u685f\0\u68ac\0\u0134\0\u0134"+
    "\0\u0134\0\u68f9\0\u6946\0\u086c\0\u086c\0\u086c\0\u0134\0\u6993"+
    "\0\u69e0\0\u6a2d\0\u6a7a\0\u6ac7\0\u6b14\0\u6b61\0\u6bae\0\u6bfb"+
    "\0\u6c48\0\u6c95\0\u6ce2\0\u6d2f\0\u6d7c\0\u6dc9\0\u6e16\0\u6e63"+
    "\0\u6eb0\0\u6efd\0\u6f4a\0\u6f97\0\u6fe4\0\u0134\0\u7031\0\u707e"+
    "\0\u70cb\0\u0134\0\u0134\0\u7118\0\u0134\0\u7165\0\u71b2\0\u086c"+
    "\0\u086c\0\u71ff\0\u086c\0\u724c\0\u7299\0\u72e6\0\u7333\0\u7380"+
    "\0\u73cd\0\u741a\0\u7467\0\u0134\0\u74b4\0\u0134\0\u0134\0\u0134"+
    "\0\u7501\0\u086c\0\u086c\0\u086c\0\u754e\0\u759b\0\u75e8\0\u7635"+
    "\0\u7682\0\u76cf\0\u771c\0\u7769\0\u0134\0\u086c\0\u0134\0\u77b6"+
    "\0\u086c\0\u7803\0\u0134\0\u7850\0\u086c\0\u789d\0\u0134\0\u086c"+
    "\0\u0134\0\u086c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\5\1\14\1\15\3\5\1\16\1\17\1\20\2\21"+
    "\4\5\2\22\2\23\2\24\2\25\2\26\2\5\2\27"+
    "\4\5\2\30\2\31\6\5\2\32\6\5\2\33\20\5"+
    "\1\34\2\5\14\34\1\35\55\34\1\36\17\34\1\5"+
    "\1\6\1\7\1\10\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\5\1\50\1\51\1\52"+
    "\1\53\1\54\1\5\1\47\1\5\1\47\1\5\1\47"+
    "\1\55\1\56\1\5\1\47\1\5\1\47\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\5\1\47\1\5\1\47"+
    "\1\65\1\66\1\67\1\70\1\5\1\47\1\71\1\72"+
    "\1\5\1\47\1\5\1\47\1\5\1\47\1\5\1\47"+
    "\1\73\1\74\1\5\1\47\1\5\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\5\1\47\1\34\2\5\14\34\1\112"+
    "\55\34\1\36\17\34\117\0\1\7\117\0\1\113\107\0"+
    "\4\114\1\115\110\114\11\0\2\15\125\0\2\116\6\0"+
    "\2\117\2\0\2\120\4\0\2\121\101\0\2\122\105\0"+
    "\2\123\34\0\2\124\2\125\75\0\2\126\10\0\2\127"+
    "\55\0\2\130\141\0\2\131\73\0\2\132\2\133\2\0"+
    "\2\134\2\135\105\0\2\136\103\0\2\137\4\0\2\140"+
    "\2\141\117\0\2\142\121\0\2\143\46\0\1\34\2\0"+
    "\14\34\1\0\55\34\1\0\17\34\17\0\1\144\21\0"+
    "\2\145\2\146\14\0\2\147\50\0\1\150\114\0\1\151"+
    "\114\0\1\152\105\0\1\153\1\154\117\0\1\155\112\0"+
    "\2\45\1\155\112\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\16\0\1\156\137\0\2\157"+
    "\4\0\2\160\55\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\157\1\161"+
    "\1\0\1\47\1\0\1\47\1\160\1\162\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\53\0\2\163\4\0\2\164"+
    "\43\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\163\1\165"+
    "\1\0\1\47\1\0\1\47\1\164\1\166\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\21\0\2\167\24\0\2\170\55\0\2\47"+
    "\1\0\2\47\3\0\1\167\1\171\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\170\1\172\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\37\0\2\173\65\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\173\1\174\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\41\0\2\135\63\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\135\1\175\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\37\0\2\176\65\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\176\1\177\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\33\0\2\141\71\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\141\1\200\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\37\0\2\201\65\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\201\1\202\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\51\0\2\203\53\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\203\1\204\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\110\0\1\205\115\0\1\206\3\0\5\113\1\207"+
    "\107\113\25\0\2\210\20\0\2\211\101\0\2\212\137\0"+
    "\2\213\71\0\2\214\115\0\2\215\2\216\103\0\2\217"+
    "\147\0\2\220\55\0\2\221\10\0\2\222\71\0\2\223"+
    "\133\0\2\224\2\225\77\0\2\226\127\0\2\227\105\0"+
    "\2\230\133\0\2\231\103\0\2\232\115\0\2\233\125\0"+
    "\2\234\101\0\2\235\113\0\2\236\105\0\2\237\123\0"+
    "\2\240\42\0\1\153\1\241\1\10\112\153\10\242\1\243"+
    "\104\242\11\0\1\244\1\245\141\0\2\246\105\0\2\247"+
    "\73\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\246\1\250\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\247\1\251"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\51\0\2\252\53\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\252\1\253\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\71\0\2\254\73\0\2\255\53\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\254\1\256\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\255\1\257\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\27\0\2\260\75\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\260\1\261\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\232\1\262\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\43\0\2\263"+
    "\61\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\263\1\264"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\236\1\265\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\43\0\2\266\61\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\266\1\267\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\6\0\1\10\135\0\2\270\131\0\2\271\105\0\2\272"+
    "\117\0\2\273\111\0\2\274\113\0\2\275\143\0\2\276"+
    "\101\0\2\277\101\0\2\300\127\0\2\301\55\0\2\302"+
    "\161\0\2\303\105\0\2\304\53\0\2\305\123\0\2\306"+
    "\125\0\2\307\115\0\2\310\107\0\2\311\107\0\2\312"+
    "\117\0\2\313\133\0\2\314\63\0\2\315\131\0\2\316"+
    "\101\0\2\317\117\0\2\320\52\0\1\10\112\0\10\242"+
    "\1\321\104\242\7\0\1\10\1\243\115\0\2\245\135\0"+
    "\2\322\101\0\2\323\103\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\322\1\324\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\11\0\2\47\1\0"+
    "\2\47\3\0\1\323\1\325\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\37\0\2\326\65\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\326\1\327\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\23\0\2\330\127\0\2\331"+
    "\65\0\2\47\1\0\2\47\4\0\1\47\1\330\1\332"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\331\1\333\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\37\0\2\334\65\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\334\1\335\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\312\1\336\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\21\0\2\337\4\0\2\340\2\0\2\341"+
    "\2\342\4\0\2\343\61\0\2\47\1\0\2\47\3\0"+
    "\1\337\1\344\1\0\1\47\1\0\1\47\1\340\1\345"+
    "\1\0\1\47\1\341\1\346\1\342\1\347\1\0\1\47"+
    "\1\0\1\47\1\343\1\350\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\316\1\351\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\21\0\2\352\4\0\2\353\2\0\2\354\2\355\4\0"+
    "\2\356\61\0\2\47\1\0\2\47\3\0\1\352\1\357"+
    "\1\0\1\47\1\0\1\47\1\353\1\360\1\0\1\47"+
    "\1\354\1\361\1\355\1\362\1\0\1\47\1\0\1\47"+
    "\1\356\1\363\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\31\0\2\364\107\0\2\365"+
    "\107\0\2\366\133\0\2\367\101\0\2\370\117\0\2\371"+
    "\117\0\2\372\105\0\2\373\121\0\2\374\77\0\2\375"+
    "\127\0\2\376\135\0\2\377\53\0\2\u0100\141\0\2\u0101"+
    "\77\0\2\u0102\103\0\2\u0103\113\0\2\u0104\113\0\2\u0105"+
    "\127\0\2\u0106\75\0\2\u0107\123\0\2\u0108\62\0\7\242"+
    "\1\10\1\321\104\242\41\0\2\u0109\165\0\2\u010a\11\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u0109\1\u010b\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\4\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\16\0\1\u010a\1\u010c\41\0\2\u010d\63\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u010d\1\u010e\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\43\0\2\u010f\61\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u010f\1\u0110\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\23\0\2\u0111\123\0\2\u0112"+
    "\127\0\2\u0113\10\0\2\u0114\55\0\2\u0115\127\0\2\u0116"+
    "\65\0\2\47\1\0\2\47\4\0\1\47\1\u0111\1\u0117"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0112\1\u0118\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u0113\1\u0119"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0114\1\u011a\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u0115\1\u011b\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u0116\1\u011c\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u0106\1\u011d\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\23\0\2\u011e\123\0\2\u011f"+
    "\127\0\2\u0120\10\0\2\u0121\55\0\2\u0122\127\0\2\u0123"+
    "\65\0\2\47\1\0\2\47\4\0\1\47\1\u011e\1\u0124"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u011f\1\u0125\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u0120\1\u0126"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0121\1\u0127\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u0122\1\u0128\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u0123\1\u0129\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\61\0\2\u012a\71\0\2\u012b\107\0\2\u012c"+
    "\103\0\2\u012d\143\0\2\u012e\121\0\2\u012f\71\0\2\u0130"+
    "\107\0\2\u0131\111\0\2\u0132\105\0\2\u0133\123\0\2\u0134"+
    "\2\u0135\147\0\2\u0136\75\0\2\u0137\67\0\2\u0138\2\u0139"+
    "\2\0\2\u013a\4\0\2\u013b\105\0\2\u013c\67\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0138\1\u013d\1\u0139\1\u013e\1\0\1\47\1\u013a\1\u013f"+
    "\1\0\1\47\1\0\1\47\1\u013b\1\u0140\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u013c\1\u0141\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\43\0\2\u0142\61\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u0142\1\u0143\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\31\0\2\u0144"+
    "\73\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u0144\1\u0145\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\61\0\2\u0146\75\0\2\u0147\101\0\2\u0148"+
    "\10\0\2\u0149\71\0\2\u014a\133\0\2\u014b\127\0\2\u014c"+
    "\47\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u0146\1\u014d\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0147\1\u014e\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0148\1\u014f\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u0149\1\u0150\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\3\0\1\u014a\1\u0151\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\4\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u014b\1\u0152\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\17\0\1\47\11\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u014c\1\u0153\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\61\0\2\u0154\75\0"+
    "\2\u0155\101\0\2\u0156\10\0\2\u0157\71\0\2\u0158\133\0"+
    "\2\u0159\127\0\2\u015a\47\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\u0154"+
    "\1\u015b\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\11\0\2\47\1\0"+
    "\2\47\4\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u0155\1\u015c\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\17\0\1\47\11\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u0156\1\u015d\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u0157\1\u015e\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\3\0\1\u0158\1\u015f"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0159\1\u0160\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u015a\1\u0161"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\33\0\2\u0162\121\0\2\u0163\135\0\2\u0164\53\0\2\u0165"+
    "\131\0\2\u0166\73\0\2\u0167\115\0\2\u0168\123\0\2\u0169"+
    "\111\0\2\u016a\115\0\2\u016b\105\0\2\u016c\111\0\2\u016d"+
    "\123\0\2\u016e\2\0\2\u016f\77\0\2\u0170\101\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u016b\1\u0171\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\u016c\1\u0172\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\u016d\1\u0173\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u016e\1\u0174\1\0\1\47\1\u016f\1\u0175"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u0170\1\u0176\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\33\0\2\u0177\71\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0177\1\u0178\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\41\0\2\u0179\63\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u0179\1\u017a\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\43\0\2\u017b\141\0\2\u017c\103\0\2\u017d\55\0\2\u017e"+
    "\161\0\2\u017f\105\0\2\u0180\73\0\2\u0181\61\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u017b\1\u0182\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u017c\1\u0183\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u017d\1\u0184"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\u017e\1\u0185\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u017f\1\u0186\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u0180\1\u0187"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0181\1\u0188\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\43\0\2\u0189\141\0\2\u018a"+
    "\103\0\2\u018b\55\0\2\u018c\161\0\2\u018d\105\0\2\u018e"+
    "\73\0\2\u018f\61\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u0189\1\u0190\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u018a\1\u0191\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u018b\1\u0192\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\u018c\1\u0193"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u018d\1\u0194"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u018e\1\u0195\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u018f\1\u0196\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\21\0\2\u0197\125\0\2\u0198\103\0\2\u0199\153\0\2\u019a"+
    "\61\0\2\u019b\103\0\2\u019c\133\0\2\u019d\105\0\2\u019e"+
    "\123\0\2\u019f\105\0\2\u01a0\133\0\2\u01a1\101\0\2\u01a2"+
    "\61\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u019d\1\u01a3\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u019e\1\u01a4\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u019f\1\u01a5\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01a0\1\u01a6"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u01a1\1\u01a7\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u01a2\1\u01a8\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\41\0\2\u01a9\63\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01a9\1\u01aa\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\37\0\2\u01ab\113\0\2\u01ac\77\0\2\u01ad\127\0\2\u01ae"+
    "\77\0\2\u01af\101\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u01ab\1\u01b0\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01ac\1\u01b1"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u01ad\1\u01b2\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01ae\1\u01b3\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\u01af\1\u01b4\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\37\0\2\u01b5\113\0\2\u01b6"+
    "\77\0\2\u01b7\127\0\2\u01b8\77\0\2\u01b9\101\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u01b5\1\u01ba\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01b6\1\u01bb\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\u01b7\1\u01bc\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01b8\1\u01bd"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u01b9\1\u01be\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\33\0\2\u01bf\103\0\2\u01c0\123\0\2\u01c1\121\0\2\u01c2"+
    "\131\0\2\u01c3\57\0\2\u01c4\137\0\2\u01c5\107\0\2\u01c6"+
    "\73\0\2\u01c7\101\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01c2\1\u01c8"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01c3\1\u01c9"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u01c4\1\u01ca\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01c5\1\u01cb\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\u01c6\1\u01cc\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\u01c7\1\u01cd\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\61\0\2\u01ce"+
    "\65\0\2\u01cf\71\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01ce\1\u01d0"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01cf\1\u01d1\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\61\0\2\u01d2"+
    "\65\0\2\u01d3\71\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01d2\1\u01d4"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01d3\1\u01d5\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\61\0\2\u01d6"+
    "\115\0\2\u01d7\63\0\2\u01d8\117\0\2\u01d9\135\0\2\u01da"+
    "\65\0\2\u01db\103\0\2\u01dc\151\0\2\u01dd\43\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u01d8\1\u01de\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01d9\1\u01df\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\11\0\2\47\1\0\2\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\u01da\1\u01e0"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\11\0\2\47\1\0\2\47"+
    "\4\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01db\1\u01e1\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\17\0\1\47\11\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\u01dc\1\u01e2\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\4\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\u01dd\1\u01e3\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\17\0\1\47\31\0\2\u01e4\103\0\2\u01e5\103\0\2\47"+
    "\1\0\2\47\4\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\u01e4\1\u01e6\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\17\0\1\47"+
    "\11\0\2\47\1\0\2\47\3\0\1\u01e5\1\u01e7\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\17\0\1\47\31\0\2\u01e8\103\0\2\u01e9\103\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u01e8\1\u01ea\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\3\0\1\u01e9\1\u01eb"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\17\0\1\47\23\0\2\u01ec\143\0\2\u01ed"+
    "\121\0\2\u01ee\65\0\2\u01ef\2\u01f0\67\0\2\47\1\0"+
    "\2\47\4\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u01ed\1\u01f1\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\17\0\1\47\11\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\u01ee\1\u01f2\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\4\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\u01ef"+
    "\1\u01f3\1\u01f0\1\u01f4\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\17\0\1\47\63\0\2\u01f5\61\0\2\u01f6\73\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u01f5\1\u01f7\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\4\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u01f6\1\u01f8\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\17\0\1\47\63\0\2\u01f9\61\0\2\u01fa\73\0"+
    "\2\47\1\0\2\47\4\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u01f9\1\u01fb\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\17\0"+
    "\1\47\11\0\2\47\1\0\2\47\4\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u01fa\1\u01fc\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\17\0\1\47\23\0\2\u01fd\101\0\2\47\1\0"+
    "\2\47\4\0\1\47\1\u01fd\1\u01fe\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\17\0\1\47\23\0"+
    "\2\u01ff\113\0\2\u0200\101\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\u01ff\1\u0201\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\11\0\2\47\1\0"+
    "\2\47\4\0\1\47\1\u0200\1\u0202\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\17\0\1\47\23\0"+
    "\2\u0203\113\0\2\u0204\101\0\2\47\1\0\2\47\4\0"+
    "\1\47\1\u0203\1\u0205\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\17\0\1\47\11\0\2\47\1\0"+
    "\2\47\4\0\1\47\1\u0204\1\u0206\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\17\0\1\47\61\0"+
    "\2\u0207\43\0\2\47\1\0\2\47\4\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\u0207\1\u0208\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\17\0\1\47\61\0\2\u0209\43\0\2\47\1\0"+
    "\2\47\4\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\u0209\1\u020a\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\17\0\1\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30954];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\2\11\2\1\2\11\1\1\3\11"+
    "\14\1\1\11\5\1\1\11\2\1\1\11\2\1\2\11"+
    "\22\1\12\11\2\1\2\11\2\0\1\11\6\0\1\11"+
    "\17\0\7\11\1\1\2\0\1\11\2\0\2\1\1\11"+
    "\1\0\2\1\2\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\2\11\32\0\1\1\2\0"+
    "\1\11\1\1\2\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\6\0\1\11"+
    "\3\0\1\11\7\0\1\11\2\0\1\11\6\0\2\1"+
    "\1\0\1\1\2\11\2\1\1\0\2\1\5\0\6\1"+
    "\5\0\5\1\1\11\10\0\3\11\2\0\1\11\1\1"+
    "\3\11\4\0\2\1\1\0\1\1\1\0\1\1\6\0"+
    "\7\1\6\0\6\1\3\0\1\11\1\0\1\11\3\0"+
    "\3\11\7\0\5\1\1\0\1\1\1\0\1\1\7\0"+
    "\7\1\7\0\10\1\2\0\1\11\2\0\2\11\7\0"+
    "\6\1\1\0\1\1\1\11\1\1\1\0\1\11\1\0"+
    "\1\11\3\0\7\1\1\0\1\11\1\0\1\11\3\0"+
    "\7\1\3\11\11\0\6\1\1\11\1\1\2\0\3\11"+
    "\5\1\2\0\3\11\5\1\1\11\10\0\6\1\2\0"+
    "\2\1\2\0\2\1\1\11\3\0\2\11\1\0\1\11"+
    "\6\1\2\0\2\1\2\0\2\1\1\11\1\0\3\11"+
    "\4\1\2\0\2\1\2\0\2\1\1\11\1\1\1\11"+
    "\1\0\2\1\1\11\1\0\2\1\1\11\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public void addToken(String lexema, String tipo){
        main.Main.tokens.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void addError(String lexema, String tipo){
        main.Main.errores.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void removerUltimoToken(){
        try{
            main.Main.tokens.remove(main.Main.tokens.size() - 1);
        }catch(Exception ex){}
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 104: break;
          case 2: 
            { yychar=1;
            }
          case 105: break;
          case 3: 
            { 
            }
          case 106: break;
          case 4: 
            { addToken(yytext(), "menor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 107: break;
          case 5: 
            { addToken(yytext(), "mayor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 108: break;
          case 6: 
            { addToken(yytext(), "barra"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 109: break;
          case 7: 
            { addToken(yytext(), "numero"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 110: break;
          case 8: 
            { addToken(yytext(), "igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 111: break;
          case 9: 
            { addToken(yytext(), "comillas");  string.setLength(0); yybegin(TEXTO); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 112: break;
          case 10: 
            { addToken(yytext(), "interrogacion"); yybegin(HSCRIPT);/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 113: break;
          case 11: 
            { string.append( yytext() );
            }
          case 114: break;
          case 12: 
            { addToken(string.toString(), "cadena"); addToken(yytext(), "comilla"); yybegin(YYINITIAL);/*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 115: break;
          case 13: 
            { string.append( '\\' );
            }
          case 116: break;
          case 14: 
            { addToken(yytext(), "operador menor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 117: break;
          case 15: 
            { addToken(yytext(), "operador NOT"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 118: break;
          case 16: 
            { addToken(yytext(), "operador mayor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 119: break;
          case 17: 
            { addToken(yytext(), "division"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 120: break;
          case 18: 
            { addToken(yytext(), "multiplicacion"); /*return new Symbol(sym.multiplicacion , yyline , yychar , yytext());*/
            }
          case 121: break;
          case 19: 
            { addToken(yytext(), "punto"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 122: break;
          case 20: 
            { addToken(yytext(), "identificador"); /*return new Symbol(sym.identificador , yyline , yychar , yytext());*/
            }
          case 123: break;
          case 21: 
            { addToken(yytext(), "igual"); /*return new Symbol(sym.suma , yyline , yychar , yytext());*/
            }
          case 124: break;
          case 22: 
            { addToken(yytext(), "comillas");  string.setLength(0); yybegin(CADENA); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 125: break;
          case 23: 
            { addToken(yytext(), "interrogacion"); yybegin(YYINITIAL);/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 126: break;
          case 24: 
            { addToken(yytext(), "dolar"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 127: break;
          case 25: 
            { addToken(yytext(), "suma"); /*return new Symbol(sym.suma , yyline , yychar , yytext());*/
            }
          case 128: break;
          case 26: 
            { addToken(yytext(), "resta"); /*return new Symbol(sym.resta , yyline , yychar , yytext());*/
            }
          case 129: break;
          case 27: 
            { addToken(yytext(), "punto y coma"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 130: break;
          case 28: 
            { addToken(yytext(), "parentesis abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 131: break;
          case 29: 
            { addToken(yytext(), "parentesis cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 132: break;
          case 30: 
            { addToken(yytext(), "llave abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 133: break;
          case 31: 
            { addToken(yytext(), "llave cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 134: break;
          case 32: 
            { addToken(yytext(), "corchete abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 135: break;
          case 33: 
            { addToken(yytext(), "corchete cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 136: break;
          case 34: 
            { addToken(yytext(), "numerañ"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 137: break;
          case 35: 
            { addToken(string.toString(), "cadena"); addToken(yytext(), "comilla"); yybegin(HSCRIPT);/*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 138: break;
          case 36: 
            { addToken(yytext(), "cadena"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 139: break;
          case 37: 
            { addToken(yytext(), "Palabra Reservada id"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 140: break;
          case 38: 
            { string.append( '\"' );
            }
          case 141: break;
          case 39: 
            { string.append( '\r' );
            }
          case 142: break;
          case 40: 
            { string.append( '\t' );
            }
          case 143: break;
          case 41: 
            { string.append( '\n' );
            }
          case 144: break;
          case 42: 
            { addToken(yytext(), "operador menor igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 145: break;
          case 43: 
            { addToken(yytext(), "operador no igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 146: break;
          case 44: 
            { addToken(yytext(), "operador mayor igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 147: break;
          case 45: 
            { addToken(yytext(), "operador igual igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 148: break;
          case 46: 
            { addToken(yytext(), "Palabra Reservada if"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 149: break;
          case 47: 
            { addToken(yytext(), "Palabra Reservada de difinicion HScript"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 150: break;
          case 48: 
            { addToken(yytext(), "operador AND"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 151: break;
          case 49: 
            { addToken(yytext(), "operador OR"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 152: break;
          case 50: 
            { addToken(yytext(), "numeroDecimal"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 153: break;
          case 51: 
            { addToken(yytext(), "Palabra Reservada path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 154: break;
          case 52: 
            { addToken(yytext(), "Palabra Reservada alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 155: break;
          case 53: 
            { addToken(yytext(), "Palabra Reservada true"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 156: break;
          case 54: 
            { addToken(yytext(), "Palabra Reservada fila"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 157: break;
          case 55: 
            { addToken(yytext(), "Palabra Reservada echo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 158: break;
          case 56: 
            { addToken(yytext(), "Palabra Reservada else"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 159: break;
          case 57: 
            { addToken(yytext(), "Palabra Reservada compi"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 160: break;
          case 58: 
            { addToken(yytext(), "Palabra Reservada ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 161: break;
          case 59: 
            { addToken(yytext(), "Palabra Reservada borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 162: break;
          case 60: 
            { addToken(yytext(), "Palabra Reservada boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 163: break;
          case 61: 
            { addToken(yytext(), "Palabra Reservada tabla"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 164: break;
          case 62: 
            { addToken(yytext(), "Palabra Reservada texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 165: break;
          case 63: 
            { addToken(yytext(), "Palabra Reservada salto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 166: break;
          case 64: 
            { addToken(yytext(), "Palabra Reservada fondo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 167: break;
          case 65: 
            { addToken(yytext(), "Palabra Reservada false"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 168: break;
          case 66: 
            { addToken(yytext(), "Palabra Reservada cuerpo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 169: break;
          case 67: 
            { addToken(yytext(), "Palabra Reservada imagen");  /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 170: break;
          case 68: 
            { addToken(yytext(), "Palabra Reservada titulo");  /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 171: break;
          case 69: 
            { addToken(yytext(), "Palabra Reservada textoa"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 172: break;
          case 70: 
            { addToken(yytext(), "Palabra Reservada textob"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 173: break;
          case 71: 
            { addToken(yytext(), "Palabra Reservada columna"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 174: break;
          case 72: 
            { addToken(yytext(), "Palabra Reservada parrafo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 175: break;
          case 73: 
            { addToken(yytext(), "Palabra Reservada espacio"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 176: break;
          case 74: 
            { addToken(yytext(), "Palabra Reservada derecha"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 177: break;
          case 75: 
            { addToken(yytext(), "Palabra Reservada repetir"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 178: break;
          case 76: 
            { addToken(yytext(), "Funcion set path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 179: break;
          case 77: 
            { addToken(yytext(), "Funcion set alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 180: break;
          case 78: 
            { addToken(yytext(), "Funcion get path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 181: break;
          case 79: 
            { addToken(yytext(), "Funcion get alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 182: break;
          case 80: 
            { addToken(yytext(), "Palabra Reservada columnac"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 183: break;
          case 81: 
            { addToken(yytext(), "Palabra Reservada cabecera"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 184: break;
          case 82: 
            { addToken(yytext(), "Palabra Reservada centrado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 185: break;
          case 83: 
            { addToken(yytext(), "Funcion insertar"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 186: break;
          case 84: 
            { addToken(yytext(), "Funcion set ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 187: break;
          case 85: 
            { addToken(yytext(), "Funcion set borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 188: break;
          case 86: 
            { addToken(yytext(), "Funcion set texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 189: break;
          case 87: 
            { addToken(yytext(), "Funcion get ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 190: break;
          case 88: 
            { addToken(yytext(), "Funcion get borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 191: break;
          case 89: 
            { addToken(yytext(), "Funcion get texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 192: break;
          case 90: 
            { addToken(yytext(), "Palabra Reservada izquierda"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 193: break;
          case 91: 
            { addToken(yytext(), "Palabra Reservada alineacion");/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 194: break;
          case 92: 
            { addToken(yytext(), "Funcion crear boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 195: break;
          case 93: 
            { addToken(yytext(), "Funcion crear tabla"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 196: break;
          case 94: 
            { addToken(yytext(), "Funcion click boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 197: break;
          case 95: 
            { addToken(yytext(), "Palabra Reservada justificado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 198: break;
          case 96: 
            { addToken(yytext(), "Funcion crear imagen"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 199: break;
          case 97: 
            { addToken(yytext(), "Funcion crear texto A"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 200: break;
          case 98: 
            { addToken(yytext(), "Funcion crear texto B"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 201: break;
          case 99: 
            { addToken(yytext(), "Funcion crear parrafo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 202: break;
          case 100: 
            { addToken(yytext(), "Funcion set contenido"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 203: break;
          case 101: 
            { addToken(yytext(), "Funcion get contenido"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 204: break;
          case 102: 
            { addToken(yytext(), "Funcion set alineacion"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 205: break;
          case 103: 
            { addToken(yytext(), "Funcion get alineacion"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
