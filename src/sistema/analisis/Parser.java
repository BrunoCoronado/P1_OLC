
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistema.analisis;

import java_cup.runtime.*;
import sistema.bean.Token;
import sistema.bean.Variable;
import sistema.ui.Principal;
import java_cup.runtime.XMLElement;

import java.math.BigDecimal;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\013\000\002\002" +
    "\012\000\002\003\004\000\002\003\003\000\002\004\012" +
    "\000\002\004\012\000\002\004\011\000\002\004\011\000" +
    "\002\005\004\000\002\005\003\000\002\046\010\000\002" +
    "\046\011\000\002\006\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\047\005\000\002\010\010" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\010\007\000\002\010\007\000\002\010\011\000\002" +
    "\010\011\000\002\010\012\000\002\010\006\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\013\004" +
    "\000\002\013\003\000\002\014\010\000\002\014\007\000" +
    "\002\014\007\000\002\014\005\000\002\014\007\000\002" +
    "\014\007\000\002\014\011\000\002\014\011\000\002\014" +
    "\003\000\002\014\007\000\002\014\006\000\002\014\006" +
    "\000\002\014\004\000\002\014\006\000\002\014\006\000" +
    "\002\014\010\000\002\014\010\000\002\014\012\000\002" +
    "\014\011\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\005" +
    "\000\002\016\004\000\002\016\003\000\002\050\005\000" +
    "\002\017\003\000\002\017\004\000\002\020\003\000\002" +
    "\020\004\000\002\021\003\000\002\023\004\000\002\023" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\024\003\000\002\026\004\000\002\026\003\000" +
    "\002\025\005\000\002\025\005\000\002\030\003\000\002" +
    "\027\004\000\002\027\003\000\002\031\005\000\002\033" +
    "\003\000\002\032\004\000\002\032\003\000\002\034\012" +
    "\000\002\035\003\000\002\036\004\000\002\036\003\000" +
    "\002\037\007\000\002\037\007\000\002\037\010\000\002" +
    "\037\010\000\002\041\003\000\002\043\003\000\002\040" +
    "\004\000\002\040\003\000\002\042\003\000\002\042\005" +
    "\000\002\042\004\000\002\042\007\000\002\042\006\000" +
    "\002\042\011\000\002\042\010\000\002\042\011\000\002" +
    "\042\010\000\002\044\004\000\002\044\003\000\002\045" +
    "\007\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\004\006\005\001\002\000\004\002\u014e\001" +
    "\002\000\004\011\006\001\002\000\004\005\007\001\002" +
    "\000\004\006\010\001\002\000\010\007\u014a\012\017\013" +
    "\015\001\002\000\004\006\ufffd\001\002\000\004\006\013" +
    "\001\002\000\010\007\016\012\017\013\015\001\002\000" +
    "\004\006\ufffe\001\002\000\006\005\053\015\051\001\002" +
    "\000\004\011\046\001\002\000\004\005\020\001\002\000" +
    "\004\006\021\001\002\000\006\007\043\014\026\001\002" +
    "\000\004\006\ufff7\001\002\000\004\006\024\001\002\000" +
    "\006\007\027\014\026\001\002\000\004\006\ufff8\001\002" +
    "\000\006\005\032\041\033\001\002\000\004\012\030\001" +
    "\002\000\004\005\031\001\002\000\004\006\ufffc\001\002" +
    "\000\004\006\037\001\002\000\004\007\034\001\002\000" +
    "\004\014\035\001\002\000\004\005\036\001\002\000\004" +
    "\006\ufff6\001\002\000\004\007\040\001\002\000\004\014" +
    "\041\001\002\000\004\005\042\001\002\000\004\006\ufff5" +
    "\001\002\000\004\012\044\001\002\000\004\005\045\001" +
    "\002\000\004\006\ufffa\001\002\000\004\005\047\001\002" +
    "\000\004\004\050\001\002\000\004\002\000\001\002\000" +
    "\004\010\u0148\001\002\000\006\005\ufff1\015\ufff1\001\002" +
    "\000\004\006\ufff3\001\002\000\006\005\u0147\015\051\001" +
    "\002\000\004\006\057\001\002\000\004\006\uffe4\001\002" +
    "\000\024\007\u0143\016\067\017\074\023\070\024\066\025" +
    "\065\031\077\035\071\051\075\001\002\000\004\006\062" +
    "\001\002\000\004\006\uffe5\001\002\000\024\007\063\016" +
    "\067\017\074\023\070\024\066\025\065\031\077\035\071" +
    "\051\075\001\002\000\006\013\u0140\022\u0141\001\002\000" +
    "\006\036\230\037\233\001\002\000\004\040\uffb5\001\002" +
    "\000\006\005\u010e\041\u0110\001\002\000\026\006\uffe3\007" +
    "\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\031\uffe3" +
    "\035\uffe3\041\uffe3\001\002\000\006\005\u0108\041\u0109\001" +
    "\002\000\006\036\uffba\037\uffba\001\002\000\010\032\167" +
    "\033\165\034\166\001\002\000\026\006\320\007\322\016" +
    "\067\017\332\023\324\024\323\025\065\031\077\035\071" +
    "\041\331\001\002\000\012\005\151\007\150\020\145\041" +
    "\152\001\002\000\004\053\263\001\002\000\004\040\102" +
    "\001\002\000\010\032\uffc0\033\uffc0\034\uffc0\001\002\000" +
    "\006\005\uffb3\040\uffb3\001\002\000\006\005\106\040\102" +
    "\001\002\000\004\010\103\001\002\000\004\044\104\001" +
    "\002\000\006\005\uffb2\040\uffb2\001\002\000\006\005\uffb4" +
    "\040\uffb4\001\002\000\004\006\uffb1\001\002\000\004\006" +
    "\110\001\002\000\004\026\117\001\002\000\004\006\uffaf" +
    "\001\002\000\004\006\114\001\002\000\004\006\uffb0\001" +
    "\002\000\006\007\116\026\117\001\002\000\004\005\121" +
    "\001\002\000\004\025\120\001\002\000\004\005\uffad\001" +
    "\002\000\004\006\uffe7\001\002\000\004\006\122\001\002" +
    "\000\006\027\127\030\130\001\002\000\004\006\125\001" +
    "\002\000\004\006\uffab\001\002\000\010\007\131\027\127" +
    "\030\130\001\002\000\004\006\uffac\001\002\000\016\006" +
    "\uffa6\007\uffa6\017\uffa6\031\uffa6\035\uffa6\041\uffa6\001\002" +
    "\000\016\006\uffa5\007\uffa5\017\uffa5\031\uffa5\035\uffa5\041" +
    "\uffa5\001\002\000\004\026\261\001\002\000\016\006\134" +
    "\007\135\017\142\031\077\035\071\041\141\001\002\000" +
    "\016\006\134\007\135\017\142\031\077\035\071\041\141" +
    "\001\002\000\012\007\252\017\213\031\077\035\071\001" +
    "\002\000\004\022\211\001\002\000\006\036\230\037\233" +
    "\001\002\000\016\006\205\007\206\017\142\031\077\035" +
    "\071\041\141\001\002\000\010\032\167\033\165\034\166" +
    "\001\002\000\016\006\uffa2\007\uffa2\017\uffa2\031\uffa2\035" +
    "\uffa2\041\uffa2\001\002\000\012\005\151\007\150\020\145" +
    "\041\152\001\002\000\016\006\uffa3\007\uffa3\017\uffa3\031" +
    "\uffa3\035\uffa3\041\uffa3\001\002\000\006\020\uffc6\041\uffc6" +
    "\001\002\000\004\010\163\001\002\000\006\020\145\041" +
    "\162\001\002\000\006\007\155\041\156\001\002\000\004" +
    "\022\154\001\002\000\004\006\153\001\002\000\006\007" +
    "\uffcc\041\uffcc\001\002\000\006\007\uffcb\041\uffcb\001\002" +
    "\000\006\007\uffca\041\uffca\001\002\000\006\017\157\022" +
    "\160\001\002\000\006\007\uffc9\041\uffc9\001\002\000\016" +
    "\006\uff9e\007\uff9e\017\uff9e\031\uff9e\035\uff9e\041\uff9e\001" +
    "\002\000\006\007\uffc8\041\uffc8\001\002\000\006\020\uffc7" +
    "\041\uffc7\001\002\000\006\007\uffcd\041\uffcd\001\002\000" +
    "\004\021\164\001\002\000\006\020\uffc5\041\uffc5\001\002" +
    "\000\004\010\203\001\002\000\004\010\201\001\002\000" +
    "\004\010\177\001\002\000\012\005\172\032\167\033\165" +
    "\034\166\001\002\000\012\005\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\001\002\000\004\006\174\001\002\000\012\005\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\001\002\000\004\007\175\001" +
    "\002\000\004\031\176\001\002\000\016\006\uff9c\007\uff9c" +
    "\017\uff9c\031\uff9c\035\uff9c\041\uff9c\001\002\000\004\042" +
    "\200\001\002\000\012\005\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\001\002\000\004\043\202\001\002\000\012\005\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\001\002\000\004\043\204\001\002" +
    "\000\012\005\uffbc\032\uffbc\033\uffbc\034\uffbc\001\002\000" +
    "\012\007\214\017\213\031\077\035\071\001\002\000\006" +
    "\022\211\027\210\001\002\000\016\006\uffa4\007\uffa4\017" +
    "\uffa4\031\uffa4\035\uffa4\041\uffa4\001\002\000\004\006\uffa9" +
    "\001\002\000\016\006\uffa0\007\uffa0\017\uffa0\031\uffa0\035" +
    "\uffa0\041\uffa0\001\002\000\006\036\230\037\233\001\002" +
    "\000\012\005\151\007\150\020\145\041\152\001\002\000" +
    "\006\022\224\027\223\001\002\000\010\032\167\033\165" +
    "\034\166\001\002\000\012\005\217\032\167\033\165\034" +
    "\166\001\002\000\004\006\220\001\002\000\004\007\221" +
    "\001\002\000\004\031\222\001\002\000\016\006\uff9d\007" +
    "\uff9d\017\uff9d\031\uff9d\035\uff9d\041\uff9d\001\002\000\004" +
    "\006\uffa7\001\002\000\016\006\uffa1\007\uffa1\017\uffa1\031" +
    "\uffa1\035\uffa1\041\uffa1\001\002\000\006\007\226\041\156" +
    "\001\002\000\006\017\227\022\160\001\002\000\016\006" +
    "\uff9f\007\uff9f\017\uff9f\031\uff9f\035\uff9f\041\uff9f\001\002" +
    "\000\004\010\243\001\002\000\010\005\uffb8\036\uffb8\037" +
    "\uffb8\001\002\000\010\005\237\036\230\037\233\001\002" +
    "\000\004\010\234\001\002\000\004\042\235\001\002\000" +
    "\010\005\uffb7\036\uffb7\037\uffb7\001\002\000\010\005\uffb9" +
    "\036\uffb9\037\uffb9\001\002\000\004\006\240\001\002\000" +
    "\004\007\241\001\002\000\004\035\242\001\002\000\016" +
    "\006\uff9b\007\uff9b\017\uff9b\031\uff9b\035\uff9b\041\uff9b\001" +
    "\002\000\004\042\244\001\002\000\010\005\uffb6\036\uffb6" +
    "\037\uffb6\001\002\000\010\005\246\036\230\037\233\001" +
    "\002\000\004\006\247\001\002\000\004\007\250\001\002" +
    "\000\004\035\251\001\002\000\016\006\uff9a\007\uff9a\017" +
    "\uff9a\031\uff9a\035\uff9a\041\uff9a\001\002\000\004\022\224" +
    "\001\002\000\016\006\254\007\255\017\142\031\077\035" +
    "\071\041\141\001\002\000\012\007\257\017\213\031\077" +
    "\035\071\001\002\000\006\022\211\030\256\001\002\000" +
    "\004\006\uffaa\001\002\000\006\022\224\030\260\001\002" +
    "\000\004\006\uffa8\001\002\000\004\005\262\001\002\000" +
    "\004\006\uffae\001\002\000\004\061\270\001\002\000\006" +
    "\052\266\053\263\001\002\000\006\052\uff98\053\uff98\001" +
    "\002\000\004\006\uffe6\001\002\000\006\052\uff99\053\uff99" +
    "\001\002\000\004\010\271\001\002\000\014\042\301\044" +
    "\276\045\277\076\300\077\275\001\002\000\014\054\uff93" +
    "\055\303\056\305\057\304\060\307\001\002\000\004\054" +
    "\314\001\002\000\004\054\uff95\001\002\000\016\046\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\001\002\000" +
    "\004\054\uff94\001\002\000\010\045\277\076\300\077\275" +
    "\001\002\000\016\046\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\001\002\000\004\054\uff96\001\002\000\014" +
    "\046\306\055\303\056\305\057\304\060\307\001\002\000" +
    "\010\045\277\076\300\077\275\001\002\000\010\045\277" +
    "\076\300\077\275\001\002\000\010\045\277\076\300\077" +
    "\275\001\002\000\016\046\uff8e\054\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\001\002\000\010\045\277\076\300\077" +
    "\275\001\002\000\016\046\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\001\002\000\016\046\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\304\060\307\001\002\000\016\046\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\001\002\000" +
    "\016\046\uff92\054\uff92\055\uff92\056\uff92\057\304\060\307" +
    "\001\002\000\006\052\uff97\053\uff97\001\002\000\006\007" +
    "\316\041\156\001\002\000\006\017\317\022\160\001\002" +
    "\000\004\006\uffed\001\002\000\022\007\u012f\016\067\017" +
    "\361\023\356\024\355\025\065\031\077\035\071\001\002" +
    "\000\006\036\230\037\233\001\002\000\004\022\352\001" +
    "\002\000\006\005\u010e\041\u0110\001\002\000\006\005\u0108" +
    "\041\u0109\001\002\000\026\006\uffe1\007\uffe1\016\uffe1\017" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\031\uffe1\035\uffe1\041\uffe1" +
    "\001\002\000\026\006\u011f\007\u0120\016\067\017\332\023" +
    "\324\024\323\025\065\031\077\035\071\041\331\001\002" +
    "\000\010\032\167\033\165\034\166\001\002\000\026\006" +
    "\320\007\322\016\067\017\332\023\324\024\323\025\065" +
    "\031\077\035\071\041\331\001\002\000\026\006\uffd8\007" +
    "\uffd8\016\uffd8\017\uffd8\023\uffd8\024\uffd8\025\uffd8\031\uffd8" +
    "\035\uffd8\041\uffd8\001\002\000\012\005\151\007\150\020" +
    "\145\041\152\001\002\000\004\040\102\001\002\000\006" +
    "\005\106\040\102\001\002\000\004\006\110\001\002\000" +
    "\004\006\337\001\002\000\006\007\340\026\117\001\002" +
    "\000\004\025\341\001\002\000\026\006\uffce\007\uffce\016" +
    "\uffce\017\uffce\023\uffce\024\uffce\025\uffce\031\uffce\035\uffce" +
    "\041\uffce\001\002\000\006\007\343\041\156\001\002\000" +
    "\006\017\344\022\160\001\002\000\026\006\uffd5\007\uffd5" +
    "\016\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\031\uffd5\035" +
    "\uffd5\041\uffd5\001\002\000\026\006\346\007\347\016\067" +
    "\017\332\023\324\024\323\025\065\031\077\035\071\041" +
    "\331\001\002\000\022\007\353\016\067\017\361\023\356" +
    "\024\355\025\065\031\077\035\071\001\002\000\006\016" +
    "\351\022\352\001\002\000\026\006\uffe2\007\uffe2\016\uffe2" +
    "\017\uffe2\023\uffe2\024\uffe2\025\uffe2\031\uffe2\035\uffe2\041" +
    "\uffe2\001\002\000\026\006\uffd6\007\uffd6\016\uffd6\017\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\031\uffd6\035\uffd6\041\uffd6\001" +
    "\002\000\026\006\uffd4\007\uffd4\016\uffd4\017\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\031\uffd4\035\uffd4\041\uffd4\001\002\000" +
    "\006\016\u0119\022\u0102\001\002\000\006\036\230\037\233" +
    "\001\002\000\006\005\u010e\041\u0110\001\002\000\006\005" +
    "\u0108\041\u0109\001\002\000\010\032\167\033\165\034\166" +
    "\001\002\000\026\006\320\007\322\016\067\017\332\023" +
    "\324\024\323\025\065\031\077\035\071\041\331\001\002" +
    "\000\012\005\151\007\150\020\145\041\152\001\002\000" +
    "\004\040\102\001\002\000\006\005\106\040\102\001\002" +
    "\000\004\006\110\001\002\000\004\006\366\001\002\000" +
    "\006\007\367\026\117\001\002\000\004\025\370\001\002" +
    "\000\026\006\uffcf\007\uffcf\016\uffcf\017\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\031\uffcf\035\uffcf\041\uffcf\001\002\000\006" +
    "\007\372\041\156\001\002\000\006\017\373\022\160\001" +
    "\002\000\026\006\uffde\007\uffde\016\uffde\017\uffde\023\uffde" +
    "\024\uffde\025\uffde\031\uffde\035\uffde\041\uffde\001\002\000" +
    "\026\006\375\007\376\016\067\017\332\023\324\024\323" +
    "\025\065\031\077\035\071\041\331\001\002\000\022\007" +
    "\u0100\016\067\017\361\023\356\024\355\025\065\031\077" +
    "\035\071\001\002\000\006\016\377\022\352\001\002\000" +
    "\026\006\uffdf\007\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\031\uffdf\035\uffdf\041\uffdf\001\002\000\006\016" +
    "\u0101\022\u0102\001\002\000\026\006\uffe0\007\uffe0\016\uffe0" +
    "\017\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\035\uffe0\041" +
    "\uffe0\001\002\000\026\006\uffdd\007\uffdd\016\uffdd\017\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\031\uffdd\035\uffdd\041\uffdd\001" +
    "\002\000\012\005\u0104\032\167\033\165\034\166\001\002" +
    "\000\004\006\u0105\001\002\000\004\007\u0106\001\002\000" +
    "\004\031\u0107\001\002\000\026\006\uffda\007\uffda\016\uffda" +
    "\017\uffda\023\uffda\024\uffda\025\uffda\031\uffda\035\uffda\041" +
    "\uffda\001\002\000\004\006\u010d\001\002\000\004\007\uffc4" +
    "\001\002\000\004\007\u010b\001\002\000\004\023\u010c\001" +
    "\002\000\026\006\uffdc\007\uffdc\016\uffdc\017\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\031\uffdc\035\uffdc\041\uffdc\001\002\000" +
    "\004\007\uffc3\001\002\000\004\006\u0113\001\002\000\004" +
    "\007\u0111\001\002\000\004\007\uffc2\001\002\000\004\024" +
    "\u0112\001\002\000\026\006\uffdb\007\uffdb\016\uffdb\017\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\031\uffdb\035\uffdb\041\uffdb\001" +
    "\002\000\004\007\uffc1\001\002\000\010\005\u0115\036\230" +
    "\037\233\001\002\000\004\006\u0116\001\002\000\004\007" +
    "\u0117\001\002\000\004\035\u0118\001\002\000\026\006\uffd9" +
    "\007\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\025\uffd9\031" +
    "\uffd9\035\uffd9\041\uffd9\001\002\000\026\006\uffd7\007\uffd7" +
    "\016\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7\035" +
    "\uffd7\041\uffd7\001\002\000\012\005\u011b\032\167\033\165" +
    "\034\166\001\002\000\004\006\u011c\001\002\000\004\007" +
    "\u011d\001\002\000\004\031\u011e\001\002\000\026\006\uffd1" +
    "\007\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\031" +
    "\uffd1\035\uffd1\041\uffd1\001\002\000\022\007\u0122\016\067" +
    "\017\361\023\356\024\355\025\065\031\077\035\071\001" +
    "\002\000\006\016\u0121\022\352\001\002\000\004\006\uffee" +
    "\001\002\000\006\016\u0123\022\u0102\001\002\000\004\006" +
    "\uffef\001\002\000\004\007\u0125\001\002\000\004\023\u0126" +
    "\001\002\000\026\006\uffd3\007\uffd3\016\uffd3\017\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\031\uffd3\035\uffd3\041\uffd3\001\002" +
    "\000\004\007\u0128\001\002\000\004\024\u0129\001\002\000" +
    "\026\006\uffd2\007\uffd2\016\uffd2\017\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\031\uffd2\035\uffd2\041\uffd2\001\002\000\010\005" +
    "\u012b\036\230\037\233\001\002\000\004\006\u012c\001\002" +
    "\000\004\007\u012d\001\002\000\004\035\u012e\001\002\000" +
    "\026\006\uffd0\007\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\031\uffd0\035\uffd0\041\uffd0\001\002\000\004\022" +
    "\u0102\001\002\000\012\005\u0131\032\167\033\165\034\166" +
    "\001\002\000\004\006\u0132\001\002\000\004\007\u0133\001" +
    "\002\000\004\031\u0134\001\002\000\004\006\uffe9\001\002" +
    "\000\004\007\u0136\001\002\000\004\023\u0137\001\002\000" +
    "\004\006\uffeb\001\002\000\004\007\u0139\001\002\000\004" +
    "\024\u013a\001\002\000\004\006\uffea\001\002\000\010\005" +
    "\u013c\036\230\037\233\001\002\000\004\006\u013d\001\002" +
    "\000\004\007\u013e\001\002\000\004\035\u013f\001\002\000" +
    "\004\006\uffe8\001\002\000\004\005\u0142\001\002\000\004" +
    "\006\uffec\001\002\000\004\006\ufffb\001\002\000\006\013" +
    "\u0144\022\u0141\001\002\000\004\005\u0145\001\002\000\004" +
    "\006\ufff9\001\002\000\006\005\ufff2\015\ufff2\001\002\000" +
    "\004\006\ufff4\001\002\000\004\042\u0149\001\002\000\006" +
    "\005\ufff0\015\ufff0\001\002\000\004\011\u014b\001\002\000" +
    "\004\005\u014c\001\002\000\004\004\u014d\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\054\007\053\047\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\022\046\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u0145\001\001\000\006\010" +
    "\055\011\057\001\001\000\002\001\001\000\012\012\072" +
    "\021\071\024\063\030\075\001\001\000\004\010\060\001" +
    "\001\000\002\001\001\000\012\012\072\021\071\024\063" +
    "\030\075\001\001\000\002\001\001\000\006\025\230\026" +
    "\u013a\001\001\000\002\001\001\000\004\020\u0137\001\001" +
    "\000\002\001\001\000\004\017\u0134\001\001\000\002\001" +
    "\001\000\006\022\170\023\u012f\001\001\000\016\012\327" +
    "\013\325\014\324\021\326\024\320\030\332\001\001\000" +
    "\010\015\314\016\145\050\143\001\001\000\006\044\263" +
    "\045\264\001\001\000\006\027\100\031\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\104\033\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\111" +
    "\034\110\001\001\000\004\035\114\001\001\000\002\001" +
    "\001\000\004\034\112\001\001\000\002\001\001\000\004" +
    "\035\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\122\037\123" +
    "\001\001\000\006\041\132\043\131\001\001\000\004\037" +
    "\125\001\001\000\002\001\001\000\006\041\132\043\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\137\024\135\040\252" +
    "\042\142\001\001\000\012\021\137\024\135\040\136\042" +
    "\142\001\001\000\006\021\214\024\211\001\001\000\002" +
    "\001\001\000\006\025\230\026\244\001\001\000\010\021" +
    "\137\024\135\042\206\001\001\000\006\022\170\023\167" +
    "\001\001\000\002\001\001\000\010\015\146\016\145\050" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\214\024\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\230\026\231\001\001\000\010\015\224\016\145\050" +
    "\143\001\001\000\002\001\001\000\006\022\170\023\215" +
    "\001\001\000\004\022\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\137\024\135" +
    "\042\206\001\001\000\006\021\214\024\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\051" +
    "\272\052\273\053\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\312\001\001\000" +
    "\004\053\311\001\001\000\004\053\310\001\001\000\002" +
    "\001\001\000\004\053\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\357\021\356\024\353\030\361\001\001" +
    "\000\006\025\230\026\u0129\001\001\000\002\001\001\000" +
    "\004\020\u0126\001\001\000\004\017\u0123\001\001\000\002" +
    "\001\001\000\014\012\327\014\347\021\326\024\320\030" +
    "\332\001\001\000\006\022\170\023\u0119\001\001\000\016" +
    "\012\327\013\344\014\324\021\326\024\320\030\332\001" +
    "\001\000\002\001\001\000\010\015\341\016\145\050\143" +
    "\001\001\000\006\027\333\031\077\001\001\000\006\031" +
    "\104\033\334\001\001\000\006\032\335\034\110\001\001" +
    "\000\004\034\112\001\001\000\004\035\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\327\014\347\021" +
    "\326\024\320\030\332\001\001\000\012\012\357\021\356" +
    "\024\353\030\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\230\026\u0113\001\001\000\004\020\u010e\001" +
    "\001\000\004\017\u0109\001\001\000\006\022\170\023\u0102" +
    "\001\001\000\016\012\327\013\373\014\324\021\326\024" +
    "\320\030\332\001\001\000\010\015\370\016\145\050\143" +
    "\001\001\000\006\027\362\031\077\001\001\000\006\031" +
    "\104\033\363\001\001\000\006\032\364\034\110\001\001" +
    "\000\004\034\112\001\001\000\004\035\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\327\014\347\021" +
    "\326\024\320\030\332\001\001\000\012\012\357\021\356" +
    "\024\353\030\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\357\021\356\024\353\030\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private boolean pathImagen = false;
    private boolean botonId = false;
    private boolean botonTexto = false;
    private String tipoDato = "";

    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO - NO SE ESPERABA ESTE SIMBOLO", s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO IRRECUPERABLE - SIMBOLO NO RECONODIO", s.left, s.right));
    } 

    private void verificarParametrosImagen(){
        if(!pathImagen)
            Principal.errores.add(new Token("PATH", "ERROR SINTACTICO - IMAGEN - PARAMETRO PATH OBLIGATORIO OMITIDOS", 0, 0));
    } 

    private void verificarParametrosBoton(){
        if(!botonId)
            Principal.errores.add(new Token("ID", "ERROR SINTACTICO - BOTON - PARAMETRO ID OBLIGATORIO OMITIDO", 0, 0));
        if(!botonTexto)
            Principal.errores.add(new Token("NAME", "ERROR SINTACTICO - BOTON - PARAMETRO TEXTO OBLIGATORIO OMITIDO", 0, 0));
    } 

    private void agregarVariable(String a,Object b){
        Principal.variables.add(new Variable(tipoDato, a, b));
        switch(tipoDato){
            case "cadena":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "decimal":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + truncateDecimal((Double)b, 3) + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "entero":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + (Integer)b + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "booleano":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + Boolean.valueOf(b.toString()) + "\t|\t" + tipoDato + "\t|\n");
                break;
        }
        tipoDato = "";
    }

    private BigDecimal truncateDecimal(double x, int decimales){
        if ( x > 0) {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_FLOOR);
        } else {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_CEILING);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= menorQue compi mayorQue B menorQue barra compi mayorQue aceptacion 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarPagina();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= menorQue compi mayorQue menorQue barra compi mayorQue aceptacion 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarPagina();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // C ::= menorQue cabecera mayorQue D menorQue barra cabecera mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarHead();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C ::= menorQue cuerpo F I1 menorQue barra cuerpo mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= menorQue cabecera mayorQue menorQue barra cabecera mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.finalizarHead();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C ::= menorQue cuerpo F menorQue barra cuerpo mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D ::= D E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.escribirTitulo(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // D ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.escribirTitulo(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= menorQue titulo textoEntreEtiquetas barra titulo mayorQue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= menorQue titulo mayorQue menorQue barra titulo mayorQue 
            {
              String RESULT =null;
		
        RESULT = "";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F ::= G mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // G ::= G H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarBGColor(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // G ::= H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.agregarBGColor(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // H ::= fondo igual textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // I ::= menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // I ::= menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // I ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // I ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I ::= menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I ::= menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // I ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // I ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= menorQue Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= menorQue inicioHS U finHS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // I1 ::= I1 I 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // I1 ::= I 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I2 ::= espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // I3 ::= I3 I4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // I3 ::= I4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I4 ::= menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I4 ::= menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I4 ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // I4 ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // I4 ::= menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // I4 ::= menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // I4 ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // I4 ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // I4 ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // I4 ::= I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // I4 ::= I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // I4 ::= parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // I4 ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // I4 ::= textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // I4 ::= textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // I4 ::= O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // I4 ::= P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // I4 ::= menorQue Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // I4 ::= Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // J ::= K textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // J ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // J ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // J ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("br");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // J ::= J textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // J ::= J barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("br");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // K ::= K L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAlineacion(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // K ::= L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarAlineacion(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L ::= alineacion igual tipoAlineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // M ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // M ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // O0 ::= imagen 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O0",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // O ::= O O1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // O ::= O1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // O1 ::= path igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        pathImagen = true;
        Principal.archivoHTML.agregarPathImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // O1 ::= alto igual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAltoImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // O1 ::= ancho igual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAnchoImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // P0 ::= boton 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P0",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // P ::= P P1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // P ::= P1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // P1 ::= id igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        botonId = true;
        Principal.archivoHTML.agregarId(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // P1 ::= texto igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        botonTexto = true;
        Principal.archivoHTML.agregarTexto(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Q0 ::= tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarTabla();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q0",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Q ::= Q Q1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Q ::= Q1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Q1 ::= borde igual booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarBorde(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q1",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // R0 ::= mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.cerrarEtiquetaTabla();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // R ::= R R1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // R ::= R1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // R1 ::= menorQue R2 mayorQue S menorQue barra fila mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarFila();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // R2 ::= fila 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // S ::= S S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // S ::= S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // S1 ::= menorQue T3 T barra columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // S1 ::= menorQue T0 T barra columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // S1 ::= menorQue T3 T menorQue barra columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // S1 ::= menorQue T0 T menorQue barra columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // T0 ::= columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // T3 ::= columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // T ::= T T1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // T ::= T1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T1 ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // T1 ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T1 ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T1 ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T1 ::= parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // T1 ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // T1 ::= O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // T1 ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // T1 ::= P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // U ::= U U1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // U ::= U1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // U1 ::= dolar identificador igual V puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        agregarVariable(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // V ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        tipoDato = "cadena";
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // V ::= V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a instanceof Double){
                tipoDato = "decimal";
            }else if(a instanceof Integer){
                tipoDato = "entero";
            }
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // V ::= booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        tipoDato = "booleano";
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // V1 ::= V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // V2 ::= V2 mas V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a+(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a+(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // V2 ::= V2 menos V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a-(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a-(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // V2 ::= V2 multiplicacion V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a*(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a*(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // V2 ::= V2 division V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a/(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a/(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // V2 ::= parentesisAbre V2 parentesisCierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // V2 ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = Integer.parseInt(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable int");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // V2 ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = Double.parseDouble(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable double");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
