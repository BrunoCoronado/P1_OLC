
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistema.analisis;

import java_cup.runtime.*;
import sistema.bean.Token;
import sistema.bean.Variable;
import sistema.bean.Struct;
import sistema.bean.struct.*;
import sistema.ui.Principal;
import java.util.ArrayList;
import java.math.BigDecimal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\002\002\004\000\002\002\013\000\002\002" +
    "\012\000\002\003\004\000\002\003\003\000\002\004\012" +
    "\000\002\004\012\000\002\004\011\000\002\004\011\000" +
    "\002\005\004\000\002\005\003\000\002\075\010\000\002" +
    "\075\011\000\002\006\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\076\005\000\002\010\010" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\010\007\000\002\010\007\000\002\010\011\000\002" +
    "\010\011\000\002\010\012\000\002\010\006\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\010\000" +
    "\002\014\007\000\002\014\007\000\002\014\005\000\002" +
    "\014\007\000\002\014\007\000\002\014\011\000\002\014" +
    "\011\000\002\014\007\000\002\014\006\000\002\014\005" +
    "\000\002\014\003\000\002\014\007\000\002\014\006\000" +
    "\002\014\006\000\002\014\004\000\002\014\006\000\002" +
    "\014\006\000\002\014\010\000\002\014\010\000\002\014" +
    "\012\000\002\014\011\000\002\014\011\000\002\014\010" +
    "\000\002\014\010\000\002\014\006\000\002\014\010\000" +
    "\002\014\010\000\002\014\012\000\002\014\012\000\002" +
    "\014\004\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\005" +
    "\000\002\016\004\000\002\016\003\000\002\077\005\000" +
    "\002\017\003\000\002\017\004\000\002\020\003\000\002" +
    "\020\004\000\002\021\003\000\002\023\004\000\002\023" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\024\003\000\002\026\004\000\002\026\003\000" +
    "\002\025\005\000\002\025\005\000\002\030\003\000\002" +
    "\027\004\000\002\027\003\000\002\031\005\000\002\033" +
    "\003\000\002\032\004\000\002\032\003\000\002\034\012" +
    "\000\002\035\003\000\002\036\004\000\002\036\003\000" +
    "\002\037\007\000\002\037\007\000\002\037\010\000\002" +
    "\037\010\000\002\041\003\000\002\043\003\000\002\040" +
    "\004\000\002\040\003\000\002\042\003\000\002\042\005" +
    "\000\002\042\004\000\002\042\007\000\002\042\006\000" +
    "\002\042\011\000\002\042\010\000\002\042\011\000\002" +
    "\042\010\000\002\042\006\000\002\042\005\000\002\044" +
    "\004\000\002\044\003\000\002\045\007\000\002\045\005" +
    "\000\002\045\007\000\002\045\011\000\002\045\006\000" +
    "\002\045\011\000\002\045\011\000\002\045\015\000\002" +
    "\045\011\000\002\047\003\000\002\046\003\000\002\115" +
    "\003\000\002\115\003\000\002\115\003\000\002\116\003" +
    "\000\002\117\005\000\002\117\005\000\002\117\005\000" +
    "\002\117\005\000\002\117\005\000\002\117\003\000\002" +
    "\117\003\000\002\117\004\000\002\117\004\000\002\100" +
    "\003\000\002\101\005\000\002\101\004\000\002\101\003" +
    "\000\002\105\004\000\002\106\005\000\002\106\005\000" +
    "\002\106\005\000\002\106\005\000\002\106\005\000\002" +
    "\106\005\000\002\107\003\000\002\110\003\000\002\111" +
    "\003\000\002\112\003\000\002\113\003\000\002\114\003" +
    "\000\002\050\005\000\002\050\006\000\002\050\006\000" +
    "\002\050\007\000\002\050\003\000\002\050\004\000\002" +
    "\051\003\000\002\051\004\000\002\052\003\000\002\052" +
    "\004\000\002\053\003\000\002\053\004\000\002\053\006" +
    "\000\002\053\005\000\002\053\007\000\002\053\006\000" +
    "\002\053\011\000\002\053\010\000\002\053\010\000\002" +
    "\053\007\000\002\053\012\000\002\053\011\000\002\053" +
    "\011\000\002\053\010\000\002\054\005\000\002\054\005" +
    "\000\002\055\005\000\002\055\006\000\002\055\006\000" +
    "\002\055\007\000\002\056\003\000\002\057\005\000\002" +
    "\057\003\000\002\057\004\000\002\057\003\000\002\057" +
    "\003\000\002\120\004\000\002\120\004\000\002\120\004" +
    "\000\002\120\004\000\002\120\004\000\002\120\004\000" +
    "\002\060\007\000\002\060\007\000\002\060\007\000\002" +
    "\060\007\000\002\060\007\000\002\060\007\000\002\060" +
    "\007\000\002\060\007\000\002\102\003\000\002\102\004" +
    "\000\002\102\003\000\002\102\006\000\002\103\004\000" +
    "\002\103\003\000\002\104\004\000\002\104\003\000\002" +
    "\061\005\000\002\062\004\000\002\062\003\000\002\063" +
    "\004\000\002\063\003\000\002\065\005\000\002\065\011" +
    "\000\002\065\011\000\002\065\015\000\002\065\011\000" +
    "\002\064\004\000\002\064\003\000\002\066\005\000\002" +
    "\066\011\000\002\066\011\000\002\066\015\000\002\066" +
    "\011\000\002\073\004\000\002\073\003\000\002\074\005" +
    "\000\002\074\011\000\002\074\011\000\002\074\015\000" +
    "\002\074\011\000\002\072\003\000\002\071\003\000\002" +
    "\122\005\000\002\122\005\000\002\122\004\000\002\122" +
    "\005\000\002\122\003\000\002\121\005\000\002\121\005" +
    "\000\002\121\005\000\002\121\005\000\002\121\005\000" +
    "\002\121\005\000\002\121\003\000\002\123\004\000\002" +
    "\123\003\000\002\123\003\000\002\067\004\000\002\067" +
    "\004\000\002\067\004\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\070\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02db\000\004\006\005\001\002\000\004\002\u02dd\001" +
    "\002\000\004\011\006\001\002\000\004\005\007\001\002" +
    "\000\004\006\010\001\002\000\010\007\u02d9\012\017\013" +
    "\015\001\002\000\004\006\ufffd\001\002\000\004\006\013" +
    "\001\002\000\010\007\016\012\017\013\015\001\002\000" +
    "\004\006\ufffe\001\002\000\006\005\053\015\051\001\002" +
    "\000\004\011\046\001\002\000\004\005\020\001\002\000" +
    "\004\006\021\001\002\000\006\007\043\014\026\001\002" +
    "\000\004\006\ufff7\001\002\000\004\006\024\001\002\000" +
    "\006\007\027\014\026\001\002\000\004\006\ufff8\001\002" +
    "\000\006\005\032\041\033\001\002\000\004\012\030\001" +
    "\002\000\004\005\031\001\002\000\004\006\ufffc\001\002" +
    "\000\004\006\037\001\002\000\004\007\034\001\002\000" +
    "\004\014\035\001\002\000\004\005\036\001\002\000\004" +
    "\006\ufff6\001\002\000\004\007\040\001\002\000\004\014" +
    "\041\001\002\000\004\005\042\001\002\000\004\006\ufff5" +
    "\001\002\000\004\012\044\001\002\000\004\005\045\001" +
    "\002\000\004\006\ufffa\001\002\000\004\005\047\001\002" +
    "\000\004\004\050\001\002\000\004\002\000\001\002\000" +
    "\004\010\u02d7\001\002\000\006\005\ufff1\015\ufff1\001\002" +
    "\000\004\006\ufff3\001\002\000\006\005\u02d6\015\051\001" +
    "\002\000\004\006\057\001\002\000\004\006\uffe4\001\002" +
    "\000\024\007\u02d2\016\067\017\074\023\070\024\066\025" +
    "\065\031\077\035\071\051\075\001\002\000\004\006\062" +
    "\001\002\000\004\006\uffe5\001\002\000\024\007\063\016" +
    "\067\017\074\023\070\024\066\025\065\031\077\035\071" +
    "\051\075\001\002\000\006\013\u02cf\022\u02d0\001\002\000" +
    "\006\036\u020f\037\u0212\001\002\000\004\040\uffa8\001\002" +
    "\000\006\005\u0278\041\u027a\001\002\000\030\006\u02c6\007" +
    "\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\031\uffe3" +
    "\035\uffe3\041\uffe3\051\uffe3\001\002\000\006\005\u0272\041" +
    "\u0273\001\002\000\006\036\uffad\037\uffad\001\002\000\010" +
    "\032\u01eb\033\u01e9\034\u01ea\001\002\000\030\006\u0232\007" +
    "\u0233\016\067\017\u023d\023\u0236\024\u0235\025\065\031\077" +
    "\035\071\041\u023b\051\u023c\001\002\000\012\005\147\007" +
    "\146\020\143\041\150\001\002\000\014\052\163\061\171" +
    "\062\172\075\165\101\166\001\002\000\004\040\102\001" +
    "\002\000\010\032\uffb3\033\uffb3\034\uffb3\001\002\000\006" +
    "\005\uffa6\040\uffa6\001\002\000\006\005\107\040\102\001" +
    "\002\000\004\010\103\001\002\000\004\044\104\001\002" +
    "\000\006\005\uffa5\040\uffa5\001\002\000\006\005\uffa7\040" +
    "\uffa7\001\002\000\004\006\111\001\002\000\004\006\uffa4" +
    "\001\002\000\004\006\uffa2\001\002\000\004\026\117\001" +
    "\002\000\004\006\114\001\002\000\004\006\uffa3\001\002" +
    "\000\006\007\116\026\117\001\002\000\004\005\121\001" +
    "\002\000\004\025\120\001\002\000\004\005\uffa0\001\002" +
    "\000\004\006\uffe7\001\002\000\004\006\123\001\002\000" +
    "\004\006\u0228\001\002\000\006\027\126\030\125\001\002" +
    "\000\004\006\uff9e\001\002\000\020\006\uff98\007\uff98\017" +
    "\uff98\031\uff98\035\uff98\041\uff98\051\uff98\001\002\000\020" +
    "\006\uff99\007\uff99\017\uff99\031\uff99\035\uff99\041\uff99\051" +
    "\uff99\001\002\000\020\006\131\007\132\017\140\031\077" +
    "\035\071\041\136\051\137\001\002\000\020\006\131\007" +
    "\132\017\140\031\077\035\071\041\136\051\137\001\002" +
    "\000\014\007\u0221\017\u01ff\031\077\035\071\051\u0201\001" +
    "\002\000\004\022\u01fd\001\002\000\006\036\u020f\037\u0212" +
    "\001\002\000\020\006\u01f9\007\u01fa\017\140\031\077\035" +
    "\071\041\136\051\137\001\002\000\010\032\u01eb\033\u01e9" +
    "\034\u01ea\001\002\000\020\006\uff95\007\uff95\017\uff95\031" +
    "\uff95\035\uff95\041\uff95\051\uff95\001\002\000\014\052\163" +
    "\061\171\062\172\075\165\101\166\001\002\000\012\005" +
    "\147\007\146\020\143\041\150\001\002\000\020\006\uff96" +
    "\007\uff96\017\uff96\031\uff96\035\uff96\041\uff96\051\uff96\001" +
    "\002\000\006\020\uffb9\041\uffb9\001\002\000\004\010\161" +
    "\001\002\000\006\020\143\041\160\001\002\000\006\007" +
    "\153\041\154\001\002\000\004\022\152\001\002\000\004" +
    "\006\151\001\002\000\006\007\uffbf\041\uffbf\001\002\000" +
    "\006\007\uffbe\041\uffbe\001\002\000\006\007\uffbd\041\uffbd" +
    "\001\002\000\006\017\155\022\156\001\002\000\006\007" +
    "\uffbc\041\uffbc\001\002\000\020\006\uff91\007\uff91\017\uff91" +
    "\031\uff91\035\uff91\041\uff91\051\uff91\001\002\000\006\007" +
    "\uffbb\041\uffbb\001\002\000\006\020\uffba\041\uffba\001\002" +
    "\000\006\007\uffc0\041\uffc0\001\002\000\004\021\162\001" +
    "\002\000\006\020\uffb8\041\uffb8\001\002\000\004\060\u01cf" +
    "\001\002\000\004\045\u01c9\001\002\000\006\042\270\052" +
    "\266\001\002\000\004\060\u011a\001\002\000\016\050\uff89" +
    "\052\uff89\061\uff89\062\uff89\075\uff89\101\uff89\001\002\000" +
    "\016\050\u0119\052\163\061\171\062\172\075\165\101\166" +
    "\001\002\000\004\045\uff7f\001\002\000\004\045\uff0d\001" +
    "\002\000\004\045\174\001\002\000\020\044\204\045\176" +
    "\052\175\055\201\074\177\077\202\100\200\001\002\000" +
    "\004\060\u0117\001\002\000\020\044\204\045\176\052\175" +
    "\055\201\074\177\077\202\100\200\001\002\000\020\044" +
    "\204\045\176\052\175\055\201\074\177\077\202\100\200" +
    "\001\002\000\042\005\uff73\006\uff73\046\uff73\053\uff73\054" +
    "\uff73\055\uff73\056\uff73\057\uff73\066\uff73\067\uff73\070\uff73" +
    "\071\uff73\072\uff73\073\uff73\076\uff73\130\uff73\001\002\000" +
    "\006\077\u0112\100\u0111\001\002\000\042\005\uff74\006\uff74" +
    "\046\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\066" +
    "\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\076\uff74" +
    "\130\uff74\001\002\000\024\005\u0109\006\u0108\046\uff00\066" +
    "\u010a\067\u0106\070\u0107\071\u0105\072\uff00\073\uff00\001\002" +
    "\000\024\005\ufefe\006\ufefe\046\ufefe\066\ufefe\067\ufefe\070" +
    "\ufefe\071\ufefe\072\ufefe\073\ufefe\001\002\000\010\046\uff07" +
    "\072\uff07\073\uff07\001\002\000\004\046\231\001\002\000" +
    "\010\046\uff0c\072\225\073\226\001\002\000\042\005\uff7a" +
    "\006\uff7a\046\uff7a\053\uff7a\054\212\055\214\056\213\057" +
    "\215\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\076\uff7a\130\uff7a\001\002\000\024\005\ufefd\006\ufefd\046" +
    "\ufefd\066\ufefd\067\ufefd\070\ufefd\071\ufefd\072\ufefd\073\ufefd" +
    "\001\002\000\012\045\217\055\201\077\202\100\200\001" +
    "\002\000\012\045\217\055\201\077\202\100\200\001\002" +
    "\000\012\045\217\055\201\077\202\100\200\001\002\000" +
    "\012\045\217\055\201\077\202\100\200\001\002\000\042" +
    "\005\uff76\006\uff76\046\uff76\053\uff76\054\uff76\055\uff76\056" +
    "\uff76\057\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76" +
    "\073\uff76\076\uff76\130\uff76\001\002\000\012\045\217\055" +
    "\201\077\202\100\200\001\002\000\014\046\221\054\212" +
    "\055\214\056\213\057\215\001\002\000\042\005\uff75\006" +
    "\uff75\046\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\076" +
    "\uff75\130\uff75\001\002\000\042\005\uff78\006\uff78\046\uff78" +
    "\053\uff78\054\uff78\055\uff78\056\213\057\215\066\uff78\067" +
    "\uff78\070\uff78\071\uff78\072\uff78\073\uff78\076\uff78\130\uff78" +
    "\001\002\000\042\005\uff77\006\uff77\046\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\066\uff77\067\uff77\070\uff77" +
    "\071\uff77\072\uff77\073\uff77\076\uff77\130\uff77\001\002\000" +
    "\042\005\uff79\006\uff79\046\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\213\057\215\066\uff79\067\uff79\070\uff79\071\uff79\072" +
    "\uff79\073\uff79\076\uff79\130\uff79\001\002\000\020\044\204" +
    "\045\176\052\175\055\201\074\177\077\202\100\200\001" +
    "\002\000\020\044\204\045\176\052\175\055\201\074\177" +
    "\077\202\100\200\001\002\000\010\046\uff0a\072\uff0a\073" +
    "\uff0a\001\002\000\010\046\uff0b\072\uff0b\073\226\001\002" +
    "\000\004\064\232\001\002\000\012\061\171\062\237\075" +
    "\234\101\233\001\002\000\004\060\337\001\002\000\006" +
    "\042\270\052\266\001\002\000\014\061\171\062\237\065" +
    "\370\075\234\101\233\001\002\000\014\061\uff1a\062\uff1a" +
    "\065\uff1a\075\uff1a\101\uff1a\001\002\000\004\045\356\001" +
    "\002\000\004\045\241\001\002\000\006\052\242\077\243" +
    "\001\002\000\004\060\355\001\002\000\004\046\uff23\001" +
    "\002\000\004\046\245\001\002\000\004\064\246\001\002" +
    "\000\012\061\252\062\172\075\251\101\247\001\002\000" +
    "\004\060\337\001\002\000\004\045\275\001\002\000\006" +
    "\042\270\052\266\001\002\000\004\045\257\001\002\000" +
    "\014\061\uff21\062\uff21\065\uff21\075\uff21\101\uff21\001\002" +
    "\000\014\061\252\062\172\065\256\075\251\101\247\001" +
    "\002\000\014\061\uff22\062\uff22\065\uff22\075\uff22\101\uff22" +
    "\001\002\000\014\061\uff15\062\uff15\065\uff15\075\uff15\101" +
    "\uff15\001\002\000\006\052\242\077\243\001\002\000\004" +
    "\046\261\001\002\000\004\064\262\001\002\000\012\061" +
    "\252\062\172\075\251\101\247\001\002\000\014\061\252" +
    "\062\172\065\264\075\251\101\247\001\002\000\014\061" +
    "\uff1c\062\uff1c\065\uff1c\075\uff1c\101\uff1c\001\002\000\004" +
    "\053\274\001\002\000\004\060\273\001\002\000\006\047" +
    "\271\053\uff70\001\002\000\006\047\uff6d\053\uff6d\001\002" +
    "\000\006\042\270\052\266\001\002\000\006\047\uff6f\053" +
    "\uff6f\001\002\000\006\047\uff6e\053\uff6e\001\002\000\014" +
    "\061\uff20\062\uff20\065\uff20\075\uff20\101\uff20\001\002\000" +
    "\020\044\204\045\176\052\175\055\201\074\177\077\202" +
    "\100\200\001\002\000\004\046\277\001\002\000\004\064" +
    "\300\001\002\000\012\061\171\062\237\075\234\101\233" +
    "\001\002\000\014\061\171\062\237\065\303\075\234\101" +
    "\233\001\002\000\014\061\uff1b\062\uff1b\065\uff1b\075\uff1b" +
    "\101\uff1b\001\002\000\016\061\uff1e\062\uff1e\063\304\065" +
    "\uff1e\075\uff1e\101\uff1e\001\002\000\004\064\305\001\002" +
    "\000\012\061\171\062\311\075\310\101\307\001\002\000" +
    "\014\061\171\062\311\065\346\075\310\101\307\001\002" +
    "\000\004\060\337\001\002\000\006\042\270\052\266\001" +
    "\002\000\004\045\322\001\002\000\004\045\314\001\002" +
    "\000\014\061\uff13\062\uff13\065\uff13\075\uff13\101\uff13\001" +
    "\002\000\006\052\242\077\243\001\002\000\004\046\316" +
    "\001\002\000\004\064\317\001\002\000\012\061\252\062" +
    "\172\075\251\101\247\001\002\000\014\061\252\062\172" +
    "\065\321\075\251\101\247\001\002\000\014\061\uff0e\062" +
    "\uff0e\065\uff0e\075\uff0e\101\uff0e\001\002\000\020\044\204" +
    "\045\176\052\175\055\201\074\177\077\202\100\200\001" +
    "\002\000\004\046\324\001\002\000\004\064\325\001\002" +
    "\000\012\061\171\062\237\075\234\101\233\001\002\000" +
    "\014\061\171\062\237\065\327\075\234\101\233\001\002" +
    "\000\016\061\uff10\062\uff10\063\330\065\uff10\075\uff10\101" +
    "\uff10\001\002\000\004\064\331\001\002\000\012\061\171" +
    "\062\311\075\310\101\307\001\002\000\014\061\171\062" +
    "\311\065\334\075\310\101\307\001\002\000\014\061\uff14" +
    "\062\uff14\065\uff14\075\uff14\101\uff14\001\002\000\014\061" +
    "\uff0f\062\uff0f\065\uff0f\075\uff0f\101\uff0f\001\002\000\004" +
    "\053\336\001\002\000\014\061\uff12\062\uff12\065\uff12\075" +
    "\uff12\101\uff12\001\002\000\004\047\uff7e\001\002\000\004" +
    "\047\341\001\002\000\004\107\342\001\002\000\004\045" +
    "\343\001\002\000\004\046\344\001\002\000\004\053\345" +
    "\001\002\000\014\061\uff11\062\uff11\065\uff11\075\uff11\101" +
    "\uff11\001\002\000\014\061\uff1d\062\uff1d\065\uff1d\075\uff1d" +
    "\101\uff1d\001\002\000\004\047\350\001\002\000\004\107" +
    "\351\001\002\000\004\045\352\001\002\000\004\046\353" +
    "\001\002\000\004\053\354\001\002\000\014\061\uff1f\062" +
    "\uff1f\065\uff1f\075\uff1f\101\uff1f\001\002\000\004\046\uff24" +
    "\001\002\000\020\044\204\045\176\052\175\055\201\074" +
    "\177\077\202\100\200\001\002\000\004\046\360\001\002" +
    "\000\004\064\361\001\002\000\012\061\171\062\237\075" +
    "\234\101\233\001\002\000\014\061\171\062\237\065\363" +
    "\075\234\101\233\001\002\000\016\061\uff17\062\uff17\063" +
    "\364\065\uff17\075\uff17\101\uff17\001\002\000\004\064\365" +
    "\001\002\000\012\061\171\062\311\075\310\101\307\001" +
    "\002\000\014\061\171\062\311\065\367\075\310\101\307" +
    "\001\002\000\014\061\uff16\062\uff16\065\uff16\075\uff16\101" +
    "\uff16\001\002\000\020\050\uff82\052\uff82\061\uff82\062\uff82" +
    "\063\371\075\uff82\101\uff82\001\002\000\004\064\372\001" +
    "\002\000\012\061\171\062\311\075\310\101\307\001\002" +
    "\000\014\061\171\062\311\065\374\075\310\101\307\001" +
    "\002\000\016\050\uff81\052\uff81\061\uff81\062\uff81\075\uff81" +
    "\101\uff81\001\002\000\004\053\376\001\002\000\014\061" +
    "\uff19\062\uff19\065\uff19\075\uff19\101\uff19\001\002\000\004" +
    "\047\u0100\001\002\000\004\107\u0101\001\002\000\004\045" +
    "\u0102\001\002\000\004\046\u0103\001\002\000\004\053\u0104" +
    "\001\002\000\014\061\uff18\062\uff18\065\uff18\075\uff18\101" +
    "\uff18\001\002\000\016\044\204\045\217\052\175\055\201" +
    "\077\202\100\200\001\002\000\016\044\204\045\217\052" +
    "\175\055\201\077\202\100\200\001\002\000\016\044\204" +
    "\045\217\052\175\055\201\077\202\100\200\001\002\000" +
    "\016\044\204\045\217\052\175\055\201\077\202\100\200" +
    "\001\002\000\016\044\204\045\217\052\175\055\201\077" +
    "\202\100\200\001\002\000\016\044\204\045\217\052\175" +
    "\055\201\077\202\100\200\001\002\000\010\046\uff01\072" +
    "\uff01\073\uff01\001\002\000\010\046\uff05\072\uff05\073\uff05" +
    "\001\002\000\010\046\uff06\072\uff06\073\uff06\001\002\000" +
    "\010\046\uff03\072\uff03\073\uff03\001\002\000\010\046\uff04" +
    "\072\uff04\073\uff04\001\002\000\010\046\uff02\072\uff02\073" +
    "\uff02\001\002\000\042\005\uff71\006\uff71\046\uff71\053\uff71" +
    "\054\uff71\055\uff71\056\uff71\057\uff71\066\uff71\067\uff71\070" +
    "\uff71\071\uff71\072\uff71\073\uff71\076\uff71\130\uff71\001\002" +
    "\000\042\005\uff72\006\uff72\046\uff72\053\uff72\054\uff72\055" +
    "\uff72\056\uff72\057\uff72\066\uff72\067\uff72\070\uff72\071\uff72" +
    "\072\uff72\073\uff72\076\uff72\130\uff72\001\002\000\010\046" +
    "\uff09\072\uff09\073\uff09\001\002\000\010\046\u0116\072\225" +
    "\073\226\001\002\000\034\005\uff7a\006\uff7a\046\221\054" +
    "\212\055\214\056\213\057\215\066\uff7a\067\uff7a\070\uff7a" +
    "\071\uff7a\072\uff7a\073\uff7a\001\002\000\010\046\uff08\072" +
    "\uff08\073\uff08\001\002\000\024\005\ufeff\006\ufeff\046\ufeff" +
    "\066\ufeff\067\ufeff\070\ufeff\071\ufeff\072\ufeff\073\ufeff\001" +
    "\002\000\016\050\uff8a\052\uff8a\061\uff8a\062\uff8a\075\uff8a" +
    "\101\uff8a\001\002\000\020\006\uff8b\007\uff8b\017\uff8b\031" +
    "\uff8b\035\uff8b\041\uff8b\051\uff8b\001\002\000\006\010\u0166" +
    "\047\uff7e\001\002\000\004\047\u011c\001\002\000\024\103" +
    "\u0121\105\u011d\107\u011f\114\u0123\116\u0122\120\u0125\122\u0124" +
    "\124\u0126\126\u011e\001\002\000\004\045\u0162\001\002\000" +
    "\004\045\u015e\001\002\000\004\045\u015b\001\002\000\016" +
    "\050\uff84\052\uff84\061\uff84\062\uff84\075\uff84\101\uff84\001" +
    "\002\000\004\045\u0157\001\002\000\004\045\u0153\001\002" +
    "\000\004\045\u014f\001\002\000\004\045\u0148\001\002\000" +
    "\004\045\u0141\001\002\000\004\045\u0127\001\002\000\012" +
    "\021\u012c\042\u012b\052\u012a\101\u0129\001\002\000\004\046" +
    "\u013f\001\002\000\004\060\u012e\001\002\000\004\060\u012d" +
    "\001\002\000\004\046\uff2d\001\002\000\004\046\uff2b\001" +
    "\002\000\004\046\uff2c\001\002\000\004\047\u012f\001\002" +
    "\000\016\104\u0132\106\u0135\113\u0130\115\u0133\117\u0131\125" +
    "\u0134\001\002\000\004\045\u0137\001\002\000\004\045\u0137" +
    "\001\002\000\004\045\u0137\001\002\000\004\045\u0137\001" +
    "\002\000\004\045\u0137\001\002\000\004\045\u0137\001\002" +
    "\000\004\046\uff2a\001\002\000\004\046\u0139\001\002\000" +
    "\004\046\ufefc\001\002\000\004\046\ufef6\001\002\000\004" +
    "\046\ufef7\001\002\000\004\046\ufef8\001\002\000\004\046" +
    "\ufefb\001\002\000\004\046\ufef9\001\002\000\004\046\ufefa" +
    "\001\002\000\004\053\u0140\001\002\000\016\050\uff2f\052" +
    "\uff2f\061\uff2f\062\uff2f\075\uff2f\101\uff2f\001\002\000\014" +
    "\045\217\052\u0143\055\201\077\202\100\200\001\002\000" +
    "\004\046\uff28\001\002\000\004\060\u0147\001\002\000\004" +
    "\046\u0145\001\002\000\004\053\u0146\001\002\000\016\050" +
    "\uff31\052\uff31\061\uff31\062\uff31\075\uff31\101\uff31\001\002" +
    "\000\004\046\uff29\001\002\000\006\044\u0149\052\u014a\001" +
    "\002\000\004\046\uff26\001\002\000\004\060\u014e\001\002" +
    "\000\004\046\u014c\001\002\000\004\053\u014d\001\002\000" +
    "\016\050\uff30\052\uff30\061\uff30\062\uff30\075\uff30\101\uff30" +
    "\001\002\000\004\046\uff27\001\002\000\012\021\u012c\042" +
    "\u012b\052\u012a\101\u0129\001\002\000\004\046\u0151\001\002" +
    "\000\004\053\u0152\001\002\000\016\050\uff33\052\uff33\061" +
    "\uff33\062\uff33\075\uff33\101\uff33\001\002\000\014\045\217" +
    "\052\u0143\055\201\077\202\100\200\001\002\000\004\046" +
    "\u0155\001\002\000\004\053\u0156\001\002\000\016\050\uff32" +
    "\052\uff32\061\uff32\062\uff32\075\uff32\101\uff32\001\002\000" +
    "\012\021\u012c\042\u012b\052\u012a\101\u0129\001\002\000\004" +
    "\046\u0159\001\002\000\004\053\u015a\001\002\000\016\050" +
    "\uff34\052\uff34\061\uff34\062\uff34\075\uff34\101\uff34\001\002" +
    "\000\004\046\u015c\001\002\000\004\053\u015d\001\002\000" +
    "\016\050\uff83\052\uff83\061\uff83\062\uff83\075\uff83\101\uff83" +
    "\001\002\000\012\021\u012c\042\u012b\052\u012a\101\u0129\001" +
    "\002\000\004\046\u0160\001\002\000\004\053\u0161\001\002" +
    "\000\016\050\uff2e\052\uff2e\061\uff2e\062\uff2e\075\uff2e\101" +
    "\uff2e\001\002\000\012\021\u012c\042\u012b\052\u012a\101\u0129" +
    "\001\002\000\004\046\u0164\001\002\000\004\053\u0165\001" +
    "\002\000\016\050\uff35\052\uff35\061\uff35\062\uff35\075\uff35" +
    "\101\uff35\001\002\000\016\102\u0167\110\u0172\111\u0171\112" +
    "\u016a\121\u0170\123\u0173\001\002\000\004\045\uff65\001\002" +
    "\000\004\045\u01b8\001\002\000\004\045\u019b\001\002\000" +
    "\004\045\uff62\001\002\000\004\045\u0196\001\002\000\004" +
    "\045\u0191\001\002\000\004\053\u0190\001\002\000\004\045" +
    "\u0183\001\002\000\004\046\u0182\001\002\000\004\045\uff61" +
    "\001\002\000\004\045\uff63\001\002\000\004\045\uff64\001" +
    "\002\000\004\045\uff60\001\002\000\004\045\u0175\001\002" +
    "\000\006\042\u0177\052\u0176\001\002\000\004\060\u017d\001" +
    "\002\000\004\076\u0179\001\002\000\004\046\uff66\001\002" +
    "\000\006\042\u017b\052\u017a\001\002\000\004\060\u017c\001" +
    "\002\000\004\046\uff45\001\002\000\004\046\uff44\001\002" +
    "\000\004\076\u017e\001\002\000\006\042\u0180\052\u017f\001" +
    "\002\000\004\060\u0181\001\002\000\004\046\uff43\001\002" +
    "\000\004\046\uff42\001\002\000\004\053\uff6c\001\002\000" +
    "\006\042\u0185\052\u0184\001\002\000\004\060\u018b\001\002" +
    "\000\006\046\uff5b\076\u0187\001\002\000\004\046\uff6b\001" +
    "\002\000\006\021\u0189\052\u0188\001\002\000\004\060\u018a" +
    "\001\002\000\004\046\uff5f\001\002\000\004\046\uff5e\001" +
    "\002\000\006\046\uff5a\076\u018c\001\002\000\006\021\u018e" +
    "\052\u018d\001\002\000\004\060\u018f\001\002\000\004\046" +
    "\uff5d\001\002\000\004\046\uff5c\001\002\000\016\050\uff86" +
    "\052\uff86\061\uff86\062\uff86\075\uff86\101\uff86\001\002\000" +
    "\006\042\u0193\052\u0192\001\002\000\004\060\u0195\001\002" +
    "\000\004\046\uff59\001\002\000\004\046\uff6a\001\002\000" +
    "\004\046\uff58\001\002\000\006\042\u0198\052\u0197\001\002" +
    "\000\004\060\u019a\001\002\000\004\046\uff57\001\002\000" +
    "\004\046\uff69\001\002\000\004\046\uff56\001\002\000\006" +
    "\042\u019d\052\u019c\001\002\000\004\060\u01ab\001\002\000" +
    "\006\046\uff55\076\u019f\001\002\000\004\046\uff68\001\002" +
    "\000\014\045\217\052\u01a1\055\201\077\202\100\200\001" +
    "\002\000\006\046\uff52\076\u01a7\001\002\000\004\060\u01a2" +
    "\001\002\000\006\046\uff53\076\u01a3\001\002\000\014\045" +
    "\217\052\u01a5\055\201\077\202\100\200\001\002\000\004" +
    "\046\uff4e\001\002\000\004\060\u01a6\001\002\000\004\046" +
    "\uff4f\001\002\000\014\045\217\052\u01a9\055\201\077\202" +
    "\100\200\001\002\000\004\046\uff4c\001\002\000\004\060" +
    "\u01aa\001\002\000\004\046\uff4d\001\002\000\006\046\uff54" +
    "\076\u01ac\001\002\000\014\045\217\052\u01ae\055\201\077" +
    "\202\100\200\001\002\000\006\046\uff50\076\u01b4\001\002" +
    "\000\004\060\u01af\001\002\000\006\046\uff51\076\u01b0\001" +
    "\002\000\014\045\217\052\u01b2\055\201\077\202\100\200" +
    "\001\002\000\004\046\uff4a\001\002\000\004\060\u01b3\001" +
    "\002\000\004\046\uff4b\001\002\000\014\045\217\052\u01b6" +
    "\055\201\077\202\100\200\001\002\000\004\046\uff48\001" +
    "\002\000\004\060\u01b7\001\002\000\004\046\uff49\001\002" +
    "\000\004\127\u01b9\001\002\000\020\042\uff41\044\uff41\045" +
    "\uff41\052\uff41\055\uff41\077\uff41\100\uff41\001\002\000\020" +
    "\042\u01c0\044\u01c1\045\217\052\u01be\055\201\077\202\100" +
    "\200\001\002\000\006\046\uff67\076\u01bc\001\002\000\004" +
    "\127\u01b9\001\002\000\006\046\uff47\076\uff47\001\002\000" +
    "\004\060\u01c6\001\002\000\006\076\u01c3\130\u01c4\001\002" +
    "\000\006\076\uff3f\130\uff3f\001\002\000\006\076\uff3d\130" +
    "\uff3d\001\002\000\006\076\uff3c\130\uff3c\001\002\000\020" +
    "\042\u01c0\044\u01c1\045\217\052\u01be\055\201\077\202\100" +
    "\200\001\002\000\006\046\uff46\076\uff46\001\002\000\006" +
    "\076\uff40\130\uff40\001\002\000\006\076\uff3e\130\uff3e\001" +
    "\002\000\004\053\u01c8\001\002\000\016\050\uff87\052\uff87" +
    "\061\uff87\062\uff87\075\uff87\101\uff87\001\002\000\006\052" +
    "\242\077\243\001\002\000\004\046\u01cb\001\002\000\004" +
    "\064\u01cc\001\002\000\012\061\252\062\172\075\251\101" +
    "\247\001\002\000\014\061\252\062\172\065\u01ce\075\251" +
    "\101\247\001\002\000\016\050\uff80\052\uff80\061\uff80\062" +
    "\uff80\075\uff80\101\uff80\001\002\000\004\010\u01d0\001\002" +
    "\000\020\042\u01d3\044\u01d4\045\217\055\201\077\202\100" +
    "\200\101\u01d1\001\002\000\004\060\337\001\002\000\004" +
    "\053\u01d6\001\002\000\004\053\uff7d\001\002\000\004\053" +
    "\uff7b\001\002\000\004\053\uff7c\001\002\000\016\050\uff88" +
    "\052\uff88\061\uff88\062\uff88\075\uff88\101\uff88\001\002\000" +
    "\004\047\u01d8\001\002\000\016\104\u01dd\106\u01dc\113\u01d9" +
    "\115\u01de\117\u01da\125\u01df\001\002\000\004\045\u01e0\001" +
    "\002\000\004\045\u01e0\001\002\000\016\050\uff85\052\uff85" +
    "\061\uff85\062\uff85\075\uff85\101\uff85\001\002\000\004\045" +
    "\u01e0\001\002\000\004\045\u01e0\001\002\000\004\045\u01e0" +
    "\001\002\000\004\045\u01e0\001\002\000\004\046\u01e2\001" +
    "\002\000\016\050\uff36\052\uff36\061\uff36\062\uff36\075\uff36" +
    "\101\uff36\001\002\000\004\053\u01e3\001\002\000\016\050" +
    "\uff25\052\uff25\061\uff25\062\uff25\075\uff25\101\uff25\001\002" +
    "\000\016\050\uff37\052\uff37\061\uff37\062\uff37\075\uff37\101" +
    "\uff37\001\002\000\016\050\uff3a\052\uff3a\061\uff3a\062\uff3a" +
    "\075\uff3a\101\uff3a\001\002\000\016\050\uff3b\052\uff3b\061" +
    "\uff3b\062\uff3b\075\uff3b\101\uff3b\001\002\000\016\050\uff38" +
    "\052\uff38\061\uff38\062\uff38\075\uff38\101\uff38\001\002\000" +
    "\016\050\uff39\052\uff39\061\uff39\062\uff39\075\uff39\101\uff39" +
    "\001\002\000\004\010\u01f7\001\002\000\004\010\u01f5\001" +
    "\002\000\004\010\u01f3\001\002\000\012\005\u01ee\032\u01eb" +
    "\033\u01e9\034\u01ea\001\002\000\012\005\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\001\002\000\004\006\u01f0\001\002\000\012" +
    "\005\uffb2\032\uffb2\033\uffb2\034\uffb2\001\002\000\004\007" +
    "\u01f1\001\002\000\004\031\u01f2\001\002\000\020\006\uff8f" +
    "\007\uff8f\017\uff8f\031\uff8f\035\uff8f\041\uff8f\051\uff8f\001" +
    "\002\000\004\042\u01f4\001\002\000\012\005\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\001\002\000\004\043\u01f6\001\002\000" +
    "\012\005\uffae\032\uffae\033\uffae\034\uffae\001\002\000\004" +
    "\043\u01f8\001\002\000\012\005\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\001\002\000\014\007\u0200\017\u01ff\031\077\035\071" +
    "\051\u0201\001\002\000\006\022\u01fd\027\u01fc\001\002\000" +
    "\020\006\uff97\007\uff97\017\uff97\031\uff97\035\uff97\041\uff97" +
    "\051\uff97\001\002\000\004\006\uff9c\001\002\000\020\006" +
    "\uff93\007\uff93\017\uff93\031\uff93\035\uff93\041\uff93\051\uff93" +
    "\001\002\000\006\036\u020f\037\u0212\001\002\000\012\005" +
    "\147\007\146\020\143\041\150\001\002\000\006\022\u020b" +
    "\027\u020a\001\002\000\014\052\163\061\171\062\172\075" +
    "\165\101\166\001\002\000\010\032\u01eb\033\u01e9\034\u01ea" +
    "\001\002\000\012\005\u0204\032\u01eb\033\u01e9\034\u01ea\001" +
    "\002\000\004\006\u0205\001\002\000\004\007\u0206\001\002" +
    "\000\004\031\u0207\001\002\000\020\006\uff90\007\uff90\017" +
    "\uff90\031\uff90\035\uff90\041\uff90\051\uff90\001\002\000\016" +
    "\050\u0209\052\163\061\171\062\172\075\165\101\166\001" +
    "\002\000\020\006\uff8c\007\uff8c\017\uff8c\031\uff8c\035\uff8c" +
    "\041\uff8c\051\uff8c\001\002\000\004\006\uff9a\001\002\000" +
    "\020\006\uff94\007\uff94\017\uff94\031\uff94\035\uff94\041\uff94" +
    "\051\uff94\001\002\000\006\007\u020d\041\154\001\002\000" +
    "\006\017\u020e\022\156\001\002\000\020\006\uff92\007\uff92" +
    "\017\uff92\031\uff92\035\uff92\041\uff92\051\uff92\001\002\000" +
    "\004\010\u021a\001\002\000\010\005\uffab\036\uffab\037\uffab" +
    "\001\002\000\010\005\u0216\036\u020f\037\u0212\001\002\000" +
    "\004\010\u0213\001\002\000\004\042\u0214\001\002\000\010" +
    "\005\uffaa\036\uffaa\037\uffaa\001\002\000\010\005\uffac\036" +
    "\uffac\037\uffac\001\002\000\004\006\u0217\001\002\000\004" +
    "\007\u0218\001\002\000\004\035\u0219\001\002\000\020\006" +
    "\uff8e\007\uff8e\017\uff8e\031\uff8e\035\uff8e\041\uff8e\051\uff8e" +
    "\001\002\000\004\042\u021b\001\002\000\010\005\uffa9\036" +
    "\uffa9\037\uffa9\001\002\000\010\005\u021d\036\u020f\037\u0212" +
    "\001\002\000\004\006\u021e\001\002\000\004\007\u021f\001" +
    "\002\000\004\035\u0220\001\002\000\020\006\uff8d\007\uff8d" +
    "\017\uff8d\031\uff8d\035\uff8d\041\uff8d\051\uff8d\001\002\000" +
    "\004\022\u020b\001\002\000\020\006\u0223\007\u0224\017\140" +
    "\031\077\035\071\041\136\051\137\001\002\000\014\007" +
    "\u0226\017\u01ff\031\077\035\071\051\u0201\001\002\000\006" +
    "\022\u01fd\030\u0225\001\002\000\004\006\uff9d\001\002\000" +
    "\006\022\u020b\030\u0227\001\002\000\004\006\uff9b\001\002" +
    "\000\010\007\u022a\027\126\030\125\001\002\000\004\006" +
    "\uff9f\001\002\000\004\026\u022b\001\002\000\004\005\u022c" +
    "\001\002\000\004\006\uffa1\001\002\000\016\050\u022e\052" +
    "\163\061\171\062\172\075\165\101\166\001\002\000\004" +
    "\006\uffe6\001\002\000\006\007\u0230\041\154\001\002\000" +
    "\006\017\u0231\022\156\001\002\000\004\006\uffed\001\002" +
    "\000\030\006\u0250\007\u02bd\016\067\017\u0259\023\u0254\024" +
    "\u0253\025\065\031\077\035\071\041\u0257\051\u0258\001\002" +
    "\000\004\022\u024f\001\002\000\006\036\u020f\037\u0212\001" +
    "\002\000\006\005\u0278\041\u027a\001\002\000\006\005\u0272" +
    "\041\u0273\001\002\000\030\006\uffe0\007\uffe0\016\uffe0\017" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\035\uffe0\041\uffe0" +
    "\051\uffe0\001\002\000\030\006\u02ad\007\u02ae\016\067\017" +
    "\u023d\023\u0236\024\u0235\025\065\031\077\035\071\041\u023b" +
    "\051\u023c\001\002\000\010\032\u01eb\033\u01e9\034\u01ea\001" +
    "\002\000\030\006\u0232\007\u0233\016\067\017\u023d\023\u0236" +
    "\024\u0235\025\065\031\077\035\071\041\u023b\051\u023c\001" +
    "\002\000\030\006\uffd4\007\uffd4\016\uffd4\017\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\031\uffd4\035\uffd4\041\uffd4\051\uffd4\001" +
    "\002\000\014\052\163\061\171\062\172\075\165\101\166" +
    "\001\002\000\012\005\147\007\146\020\143\041\150\001" +
    "\002\000\004\040\102\001\002\000\006\005\107\040\102" +
    "\001\002\000\004\006\111\001\002\000\004\006\u0242\001" +
    "\002\000\006\007\u0243\026\117\001\002\000\004\025\u0244" +
    "\001\002\000\030\006\uffca\007\uffca\016\uffca\017\uffca\023" +
    "\uffca\024\uffca\025\uffca\031\uffca\035\uffca\041\uffca\051\uffca" +
    "\001\002\000\006\007\u0246\041\154\001\002\000\006\017" +
    "\u0247\022\156\001\002\000\030\006\uffd1\007\uffd1\016\uffd1" +
    "\017\uffd1\023\uffd1\024\uffd1\025\uffd1\031\uffd1\035\uffd1\041" +
    "\uffd1\051\uffd1\001\002\000\016\050\u0249\052\163\061\171" +
    "\062\172\075\165\101\166\001\002\000\030\006\uffd5\007" +
    "\uffd5\016\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\031\uffd5" +
    "\035\uffd5\041\uffd5\051\uffd5\001\002\000\030\006\u024b\007" +
    "\u024c\016\067\017\u023d\023\u0236\024\u0235\025\065\031\077" +
    "\035\071\041\u023b\051\u023c\001\002\000\030\006\u0250\007" +
    "\u0252\016\067\017\u0259\023\u0254\024\u0253\025\065\031\077" +
    "\035\071\041\u0257\051\u0258\001\002\000\006\016\u024e\022" +
    "\u024f\001\002\000\030\006\uffe1\007\uffe1\016\uffe1\017\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\031\uffe1\035\uffe1\041\uffe1\051" +
    "\uffe1\001\002\000\030\006\uffd2\007\uffd2\016\uffd2\017\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\031\uffd2\035\uffd2\041\uffd2\051" +
    "\uffd2\001\002\000\030\006\uffd0\007\uffd0\016\uffd0\017\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\031\uffd0\035\uffd0\041\uffd0\051" +
    "\uffd0\001\002\000\022\007\u0285\016\067\017\u028b\023\u0287" +
    "\024\u0286\031\077\035\071\051\u028a\001\002\000\006\036" +
    "\u020f\037\u0212\001\002\000\006\016\u027e\022\u026c\001\002" +
    "\000\006\005\u0278\041\u027a\001\002\000\006\005\u0272\041" +
    "\u0273\001\002\000\010\032\u01eb\033\u01e9\034\u01ea\001\002" +
    "\000\030\006\u0232\007\u0233\016\067\017\u023d\023\u0236\024" +
    "\u0235\025\065\031\077\035\071\041\u023b\051\u023c\001\002" +
    "\000\030\006\uffc1\007\uffc1\016\uffc1\017\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\031\uffc1\035\uffc1\041\uffc1\051\uffc1\001\002" +
    "\000\014\052\163\061\171\062\172\075\165\101\166\001" +
    "\002\000\012\005\147\007\146\020\143\041\150\001\002" +
    "\000\004\040\102\001\002\000\006\005\107\040\102\001" +
    "\002\000\004\006\111\001\002\000\004\006\u025e\001\002" +
    "\000\006\007\u025f\026\117\001\002\000\004\025\u0260\001" +
    "\002\000\030\006\uffcb\007\uffcb\016\uffcb\017\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\031\uffcb\035\uffcb\041\uffcb\051\uffcb\001" +
    "\002\000\006\007\u0262\041\154\001\002\000\006\017\u0263" +
    "\022\156\001\002\000\030\006\uffdd\007\uffdd\016\uffdd\017" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\031\uffdd\035\uffdd\041\uffdd" +
    "\051\uffdd\001\002\000\016\050\u0265\052\163\061\171\062" +
    "\172\075\165\101\166\001\002\000\030\006\uffd6\007\uffd6" +
    "\016\uffd6\017\uffd6\023\uffd6\024\uffd6\025\uffd6\031\uffd6\035" +
    "\uffd6\041\uffd6\051\uffd6\001\002\000\030\006\u0267\007\u0268" +
    "\016\067\017\u023d\023\u0236\024\u0235\025\065\031\077\035" +
    "\071\041\u023b\051\u023c\001\002\000\030\006\u0250\007\u026a" +
    "\016\067\017\u0259\023\u0254\024\u0253\025\065\031\077\035" +
    "\071\041\u0257\051\u0258\001\002\000\006\016\u0269\022\u024f" +
    "\001\002\000\030\006\uffde\007\uffde\016\uffde\017\uffde\023" +
    "\uffde\024\uffde\025\uffde\031\uffde\035\uffde\041\uffde\051\uffde" +
    "\001\002\000\006\016\u026b\022\u026c\001\002\000\030\006" +
    "\uffdf\007\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\031\uffdf\035\uffdf\041\uffdf\051\uffdf\001\002\000\030\006" +
    "\uffdc\007\uffdc\016\uffdc\017\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\031\uffdc\035\uffdc\041\uffdc\051\uffdc\001\002\000\012\005" +
    "\u026e\032\u01eb\033\u01e9\034\u01ea\001\002\000\004\006\u026f" +
    "\001\002\000\004\007\u0270\001\002\000\004\031\u0271\001" +
    "\002\000\030\006\uffd9\007\uffd9\016\uffd9\017\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\031\uffd9\035\uffd9\041\uffd9\051\uffd9\001" +
    "\002\000\004\006\u0277\001\002\000\004\007\uffb7\001\002" +
    "\000\004\007\u0275\001\002\000\004\023\u0276\001\002\000" +
    "\030\006\uffdb\007\uffdb\016\uffdb\017\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\031\uffdb\035\uffdb\041\uffdb\051\uffdb\001\002\000" +
    "\004\007\uffb6\001\002\000\004\006\u027d\001\002\000\004" +
    "\007\u027b\001\002\000\004\007\uffb5\001\002\000\004\024" +
    "\u027c\001\002\000\030\006\uffda\007\uffda\016\uffda\017\uffda" +
    "\023\uffda\024\uffda\025\uffda\031\uffda\035\uffda\041\uffda\051" +
    "\uffda\001\002\000\004\007\uffb4\001\002\000\030\006\uffd3" +
    "\007\uffd3\016\uffd3\017\uffd3\023\uffd3\024\uffd3\025\uffd3\031" +
    "\uffd3\035\uffd3\041\uffd3\051\uffd3\001\002\000\010\005\u0280" +
    "\036\u020f\037\u0212\001\002\000\004\006\u0281\001\002\000" +
    "\004\007\u0282\001\002\000\004\035\u0283\001\002\000\030" +
    "\006\uffd8\007\uffd8\016\uffd8\017\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\031\uffd8\035\uffd8\041\uffd8\051\uffd8\001\002\000\006" +
    "\036\u020f\037\u0212\001\002\000\004\022\u02a2\001\002\000" +
    "\006\005\u0278\041\u027a\001\002\000\006\005\u0272\041\u0273" +
    "\001\002\000\010\032\u01eb\033\u01e9\034\u01ea\001\002\000" +
    "\030\006\u0232\007\u0233\016\067\017\u023d\023\u0236\024\u0235" +
    "\025\065\031\077\035\071\041\u023b\051\u023c\001\002\000" +
    "\014\052\163\061\171\062\172\075\165\101\166\001\002" +
    "\000\012\005\147\007\146\020\143\041\150\001\002\000" +
    "\006\007\u028d\041\154\001\002\000\006\017\u028e\022\156" +
    "\001\002\000\030\006\uffc7\007\uffc7\016\uffc7\017\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\031\uffc7\035\uffc7\041\uffc7\051\uffc7" +
    "\001\002\000\016\050\u0290\052\163\061\171\062\172\075" +
    "\165\101\166\001\002\000\030\006\uffd7\007\uffd7\016\uffd7" +
    "\017\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7\035\uffd7\041" +
    "\uffd7\051\uffd7\001\002\000\030\006\u0292\007\u0293\016\067" +
    "\017\u023d\023\u0236\024\u0235\025\065\031\077\035\071\041" +
    "\u023b\051\u023c\001\002\000\030\006\u0250\007\u0295\016\067" +
    "\017\u0259\023\u0254\024\u0253\025\065\031\077\035\071\041" +
    "\u0257\051\u0258\001\002\000\006\016\u0294\022\u024f\001\002" +
    "\000\030\006\uffc8\007\uffc8\016\uffc8\017\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\031\uffc8\035\uffc8\041\uffc8\051\uffc8\001\002" +
    "\000\006\016\u0296\022\u026c\001\002\000\030\006\uffc9\007" +
    "\uffc9\016\uffc9\017\uffc9\023\uffc9\024\uffc9\025\uffc9\031\uffc9" +
    "\035\uffc9\041\uffc9\051\uffc9\001\002\000\012\005\u0298\032" +
    "\u01eb\033\u01e9\034\u01ea\001\002\000\004\006\u0299\001\002" +
    "\000\004\007\u029a\001\002\000\004\031\u029b\001\002\000" +
    "\030\006\uffc3\007\uffc3\016\uffc3\017\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\031\uffc3\035\uffc3\041\uffc3\051\uffc3\001\002\000" +
    "\004\007\u029d\001\002\000\004\023\u029e\001\002\000\030" +
    "\006\uffc5\007\uffc5\016\uffc5\017\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\031\uffc5\035\uffc5\041\uffc5\051\uffc5\001\002\000\004" +
    "\007\u02a0\001\002\000\004\024\u02a1\001\002\000\030\006" +
    "\uffc4\007\uffc4\016\uffc4\017\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\031\uffc4\035\uffc4\041\uffc4\051\uffc4\001\002\000\030\006" +
    "\uffc6\007\uffc6\016\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\031\uffc6\035\uffc6\041\uffc6\051\uffc6\001\002\000\010\005" +
    "\u02a4\036\u020f\037\u0212\001\002\000\004\006\u02a5\001\002" +
    "\000\004\007\u02a6\001\002\000\004\035\u02a7\001\002\000" +
    "\030\006\uffc2\007\uffc2\016\uffc2\017\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\031\uffc2\035\uffc2\041\uffc2\051\uffc2\001\002\000" +
    "\012\005\u02a9\032\u01eb\033\u01e9\034\u01ea\001\002\000\004" +
    "\006\u02aa\001\002\000\004\007\u02ab\001\002\000\004\031" +
    "\u02ac\001\002\000\030\006\uffcd\007\uffcd\016\uffcd\017\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\031\uffcd\035\uffcd\041\uffcd\051" +
    "\uffcd\001\002\000\030\006\u0250\007\u02b0\016\067\017\u0259" +
    "\023\u0254\024\u0253\025\065\031\077\035\071\041\u0257\051" +
    "\u0258\001\002\000\006\016\u02af\022\u024f\001\002\000\004" +
    "\006\uffee\001\002\000\006\016\u02b1\022\u026c\001\002\000" +
    "\004\006\uffef\001\002\000\004\007\u02b3\001\002\000\004" +
    "\023\u02b4\001\002\000\030\006\uffcf\007\uffcf\016\uffcf\017" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\031\uffcf\035\uffcf\041\uffcf" +
    "\051\uffcf\001\002\000\004\007\u02b6\001\002\000\004\024" +
    "\u02b7\001\002\000\030\006\uffce\007\uffce\016\uffce\017\uffce" +
    "\023\uffce\024\uffce\025\uffce\031\uffce\035\uffce\041\uffce\051" +
    "\uffce\001\002\000\010\005\u02b9\036\u020f\037\u0212\001\002" +
    "\000\004\006\u02ba\001\002\000\004\007\u02bb\001\002\000" +
    "\004\035\u02bc\001\002\000\030\006\uffcc\007\uffcc\016\uffcc" +
    "\017\uffcc\023\uffcc\024\uffcc\025\uffcc\031\uffcc\035\uffcc\041" +
    "\uffcc\051\uffcc\001\002\000\004\022\u026c\001\002\000\012" +
    "\005\u02bf\032\u01eb\033\u01e9\034\u01ea\001\002\000\004\006" +
    "\u02c0\001\002\000\004\007\u02c1\001\002\000\004\031\u02c2" +
    "\001\002\000\004\006\uffe9\001\002\000\004\007\u02c4\001" +
    "\002\000\004\023\u02c5\001\002\000\004\006\uffeb\001\002" +
    "\000\030\006\uffe2\007\uffe2\016\uffe2\017\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\031\uffe2\035\uffe2\041\uffe2\051\uffe2\001\002" +
    "\000\004\007\u02c8\001\002\000\004\024\u02c9\001\002\000" +
    "\004\006\uffea\001\002\000\010\005\u02cb\036\u020f\037\u0212" +
    "\001\002\000\004\006\u02cc\001\002\000\004\007\u02cd\001" +
    "\002\000\004\035\u02ce\001\002\000\004\006\uffe8\001\002" +
    "\000\004\005\u02d1\001\002\000\004\006\uffec\001\002\000" +
    "\004\006\ufffb\001\002\000\006\013\u02d3\022\u02d0\001\002" +
    "\000\004\005\u02d4\001\002\000\004\006\ufff9\001\002\000" +
    "\006\005\ufff2\015\ufff2\001\002\000\004\006\ufff4\001\002" +
    "\000\004\042\u02d8\001\002\000\006\005\ufff0\015\ufff0\001" +
    "\002\000\004\011\u02da\001\002\000\004\005\u02db\001\002" +
    "\000\004\004\u02dc\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02db\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\054\007\053\076\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\022\075\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\u02d4\001\001\000\006\010" +
    "\055\011\057\001\001\000\002\001\001\000\012\012\072" +
    "\021\071\024\063\030\075\001\001\000\004\010\060\001" +
    "\001\000\002\001\001\000\012\012\072\021\071\024\063" +
    "\030\075\001\001\000\002\001\001\000\006\025\u020f\026" +
    "\u02c9\001\001\000\002\001\001\000\004\020\u02c6\001\001" +
    "\000\002\001\001\000\004\017\u02c2\001\001\000\002\001" +
    "\001\000\006\022\u01ec\023\u02bd\001\001\000\016\012\u0239" +
    "\013\u0237\014\u0236\021\u0238\024\u0233\030\u023d\001\001\000" +
    "\010\015\u022e\016\143\077\141\001\001\000\012\044\u022c" +
    "\045\166\047\163\072\172\001\001\000\006\027\100\031" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\104\033\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\111" +
    "\034\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\114\001\001\000\004\034\112\001\001\000\002" +
    "\001\001\000\004\035\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\121\037\123\001\001\000\004\037\u0228\001\001\000" +
    "\006\041\127\043\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\134\024\132\040" +
    "\u0221\042\140\001\001\000\012\021\134\024\132\040\133" +
    "\042\140\001\001\000\006\021\u0201\024\u01fd\001\001\000" +
    "\002\001\001\000\006\025\u020f\026\u021b\001\001\000\010" +
    "\021\134\024\132\042\u01fa\001\001\000\006\022\u01ec\023" +
    "\u01eb\001\001\000\002\001\001\000\012\044\167\045\166" +
    "\047\163\072\172\001\001\000\010\015\144\016\143\077" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\100\u01c6\101\266" +
    "\001\001\000\004\046\u011a\001\001\000\002\001\001\000" +
    "\010\045\u0117\047\163\072\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\071\205\116" +
    "\210\117\207\121\204\122\206\123\202\001\001\000\002" +
    "\001\001\000\014\116\210\117\u0114\121\204\122\u0113\123" +
    "\202\001\001\000\014\116\210\117\207\121\204\122\u0112" +
    "\123\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\223\001\001\000\004" +
    "\117\222\001\001\000\004\117\221\001\001\000\004\117" +
    "\215\001\001\000\002\001\001\000\004\117\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\116\210\117\207" +
    "\121\204\122\227\123\202\001\001\000\014\116\210\117" +
    "\207\121\204\122\226\123\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\237\064" +
    "\234\066\235\001\001\000\004\046\376\001\001\000\006" +
    "\100\374\101\266\001\001\000\006\047\237\066\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\063\253" +
    "\065\252\072\247\001\001\000\004\046\346\001\001\000" +
    "\002\001\001\000\006\100\264\101\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\065\254\072\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\063" +
    "\262\065\252\072\247\001\001\000\006\065\254\072\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\071\275\116\210\117\207\121\204\122\206" +
    "\123\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\047\237\064\300\066\235\001\001\000\006\047\237" +
    "\066\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\311\073\305\074\312\001\001" +
    "\000\006\047\311\074\332\001\001\000\004\046\337\001" +
    "\001\000\006\100\334\101\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\063\317" +
    "\065\252\072\247\001\001\000\006\065\254\072\247\001" +
    "\001\000\002\001\001\000\016\071\322\116\210\117\207" +
    "\121\204\122\206\123\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\237\064\325\066\235\001\001" +
    "\000\006\047\237\066\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\311\073\331\074\312\001\001" +
    "\000\006\047\311\074\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\071\356\116\210\117" +
    "\207\121\204\122\206\123\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\237\064\361\066\235\001" +
    "\001\000\006\047\237\066\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\311\073\365\074\312\001" +
    "\001\000\006\047\311\074\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\311\073" +
    "\372\074\312\001\001\000\006\047\311\074\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\116" +
    "\210\117\207\123\u010f\001\001\000\010\116\210\117\207" +
    "\123\u010e\001\001\000\010\116\210\117\207\123\u010d\001" +
    "\001\000\010\116\210\117\207\123\u010c\001\001\000\010" +
    "\116\210\117\207\123\u010b\001\001\000\010\116\210\117" +
    "\207\123\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\u0135\001\001\000\004\070\u013d\001\001\000\004\070\u013c" +
    "\001\001\000\004\070\u013b\001\001\000\004\070\u013a\001" +
    "\001\000\004\070\u0139\001\001\000\004\070\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\103\u0143\116\u0141\117\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\104\u014a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\103\u0153" +
    "\116\u0141\117\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\102\u0157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\u015e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\105\u016c\106\u016e\107" +
    "\u016d\110\u016b\111\u016a\112\u0168\113\u0167\114\u0173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0185\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0193\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u019d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\116\u019f\117\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\116\u01a3\117\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\116\u01a7\117\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\116\u01ac\117\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\116\u01b0\117\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\116\u01b4\117\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\054\u01ba\056\u01b9" +
    "\001\001\000\002\001\001\000\010\057\u01be\116\u01c1\117" +
    "\207\001\001\000\002\001\001\000\006\054\u01bc\056\u01b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\057\u01c4\116\u01c1\117\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u01c9\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\063\u01cc\065\252\072\247" +
    "\001\001\000\006\065\254\072\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\115\u01d1\116\u01d4\117\207" +
    "\001\001\000\004\046\u01d6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\120\u01da\001\001\000" +
    "\004\061\u01e7\001\001\000\004\061\u01e6\001\001\000\002" +
    "\001\001\000\004\061\u01e5\001\001\000\004\061\u01e4\001" +
    "\001\000\004\061\u01e3\001\001\000\004\061\u01e0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u01ee" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\u0201\024\u01fd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\u020f" +
    "\026\u0210\001\001\000\010\015\u020b\016\143\077\141\001" +
    "\001\000\002\001\001\000\012\044\u0207\045\166\047\163" +
    "\072\172\001\001\000\006\022\u01ec\023\u0202\001\001\000" +
    "\004\022\u01ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\u0117\047" +
    "\163\072\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\134\024\132\042\u01fa" +
    "\001\001\000\006\021\u0201\024\u01fd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\127\043\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\045\u0117\047\163\072\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\u0255\021\u0254\024\u0250\030\u0259\001\001\000\002\001" +
    "\001\000\006\025\u020f\026\u02b7\001\001\000\004\020\u02b4" +
    "\001\001\000\004\017\u02b1\001\001\000\002\001\001\000" +
    "\014\012\u0239\014\u024c\021\u0238\024\u0233\030\u023d\001\001" +
    "\000\006\022\u01ec\023\u02a7\001\001\000\016\012\u0239\013" +
    "\u0249\014\u0236\021\u0238\024\u0233\030\u023d\001\001\000\002" +
    "\001\001\000\012\044\u0247\045\166\047\163\072\172\001" +
    "\001\000\010\015\u0244\016\143\077\141\001\001\000\006" +
    "\027\u023e\031\077\001\001\000\006\031\104\033\u023f\001" +
    "\001\000\006\032\u0240\034\107\001\001\000\004\034\112" +
    "\001\001\000\004\035\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\u0117\047\163\072\172\001\001\000" +
    "\002\001\001\000\014\012\u0239\014\u024c\021\u0238\024\u0233" +
    "\030\u023d\001\001\000\012\012\u0255\021\u0254\024\u0250\030" +
    "\u0259\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u0288\021\u0287\024" +
    "\u0283\001\001\000\006\025\u020f\026\u027e\001\001\000\002" +
    "\001\001\000\004\020\u0278\001\001\000\004\017\u0273\001" +
    "\001\000\006\022\u01ec\023\u026c\001\001\000\016\012\u0239" +
    "\013\u0265\014\u0236\021\u0238\024\u0233\030\u023d\001\001\000" +
    "\002\001\001\000\012\044\u0263\045\166\047\163\072\172" +
    "\001\001\000\010\015\u0260\016\143\077\141\001\001\000" +
    "\006\027\u025a\031\077\001\001\000\006\031\104\033\u025b" +
    "\001\001\000\006\032\u025c\034\107\001\001\000\004\034" +
    "\112\001\001\000\004\035\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\u0117\047\163\072\172\001\001" +
    "\000\002\001\001\000\014\012\u0239\014\u024c\021\u0238\024" +
    "\u0233\030\u023d\001\001\000\012\012\u0255\021\u0254\024\u0250" +
    "\030\u0259\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u01ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\u020f\026\u02a2\001\001\000\002" +
    "\001\001\000\004\020\u029e\001\001\000\004\017\u029b\001" +
    "\001\000\006\022\u01ec\023\u0296\001\001\000\016\012\u0239" +
    "\013\u0290\014\u0236\021\u0238\024\u0233\030\u023d\001\001\000" +
    "\012\044\u028e\045\166\047\163\072\172\001\001\000\010" +
    "\015\u028b\016\143\077\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\u0117\047\163" +
    "\072\172\001\001\000\002\001\001\000\014\012\u0239\014" +
    "\u024c\021\u0238\024\u0233\030\u023d\001\001\000\012\012\u0255" +
    "\021\u0254\024\u0250\030\u0259\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u01ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u0214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u01ee\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\u0255\021\u0254\024\u0250\030\u0259\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u0214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u01ee\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u0214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private boolean pathImagen = false;
    private boolean botonId = false;
    private boolean botonTexto = false;
    private String tipoDato = "";
    private int tipoStruct = 0;
    private StructParrafo structParrafo;
    private StructTextoA structTextoA;
    private StructTextoB structTextoB;
    private StructImagen structImagen;
    private StructTabla structTabla;
    private StructBoton structBoton;
    private String identificadorStruct;
    private ArrayList<Integer> repetidores = new ArrayList();
    private int contadorRepetidor = -1;
    private ArrayList<Boolean> condicionales = new ArrayList();
    private int contadorIf = -1;

    public void syntax_error(Symbol s){ 
        System.err.println("Error Sint??ctico en la L??nea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO - NO SE ESPERABA ESTE SIMBOLO", s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error s??ntactico irrecuperable en la L??nea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO IRRECUPERABLE - SIMBOLO NO RECONODIO", s.left, s.right));
    } 

    private void verificarParametrosImagen(){
        if(!pathImagen)
            Principal.errores.add(new Token("PATH", "ERROR SINTACTICO - IMAGEN - PARAMETRO PATH OBLIGATORIO OMITIDOS", 0, 0));
    } 

    private void verificarParametrosBoton(){
        if(!botonId)
            Principal.errores.add(new Token("ID", "ERROR SINTACTICO - BOTON - PARAMETRO ID OBLIGATORIO OMITIDO", 0, 0));
        if(!botonTexto)
            Principal.errores.add(new Token("NAME", "ERROR SINTACTICO - BOTON - PARAMETRO TEXTO OBLIGATORIO OMITIDO", 0, 0));
    } 

    private void agregarVariable(String a,Object b){
        Principal.variables.add(new Variable(tipoDato, a, b));
        switch(tipoDato){
            case "cadena":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "decimal":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + truncateDecimal((Double)b, 3) + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "entero":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "booleano":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + Boolean.valueOf(b.toString()) + "\t|\t" + tipoDato + "\t|\n");
                break;
        }
        Principal.txtVariables.append("\n\n");
        tipoDato = "";
    }

    private BigDecimal truncateDecimal(double x, int decimales){
        if ( x > 0) {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_FLOOR);
        } else {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_CEILING);
        }
    }

    private Boolean verificarAlineacion(String parametro){
        parametro = parametro.toLowerCase().replace("\"","");
        switch(parametro){
            case "izquierda": return true;
            case "derecha": return true;
            case "centrado": return true;
            case "justificado": return true;
        }
        Principal.errores.add(new Token("ALINEACION", "ERROR SINTACTICO - CREAR PARRAFO - PARAMETRO ALINEACION NO PERMITIDO", 0, 0));
        return false;
    }

    private void anidarVariable(String identificador, Object nuevoValor){
        if(Principal.actualizarVariable(identificador, nuevoValor) != 1)
            Principal.errores.add(new Token("ERROR ANIDACION", "ERROR SINTACTICO - ANIDACION INVALIDA", 0, 0));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= menorQue compi mayorQue B menorQue barra compi mayorQue aceptacion 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarPagina();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= menorQue compi mayorQue menorQue barra compi mayorQue aceptacion 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarPagina();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // C ::= menorQue cabecera mayorQue D menorQue barra cabecera mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarHead();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C ::= menorQue cuerpo F I1 menorQue barra cuerpo mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= menorQue cabecera mayorQue menorQue barra cabecera mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.finalizarHead();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C ::= menorQue cuerpo F menorQue barra cuerpo mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D ::= D E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.escribirTitulo(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // D ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.escribirTitulo(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= menorQue titulo textoEntreEtiquetas barra titulo mayorQue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= menorQue titulo mayorQue menorQue barra titulo mayorQue 
            {
              String RESULT =null;
		
        RESULT = "";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F ::= G mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // G ::= G H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarBGColor(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // G ::= H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.agregarBGColor(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // H ::= fondo igual textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // I ::= menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // I ::= menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // I ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // I ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I ::= menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I ::= menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // I ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // I ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= menorQue Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= menorQue inicioHS U interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // I1 ::= I1 I 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // I1 ::= I 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I2 ::= espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // I2 ::= espacio menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // I3 ::= I3 I4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I3 ::= I4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I4 ::= menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I4 ::= menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // I4 ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // I4 ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // I4 ::= menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // I4 ::= menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // I4 ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // I4 ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // I4 ::= menorQue menorQue inicioHS U interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // I4 ::= menorQue inicioHS U interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // I4 ::= inicioHS U interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // I4 ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // I4 ::= I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // I4 ::= I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // I4 ::= parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // I4 ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // I4 ::= textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // I4 ::= textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // I4 ::= O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // I4 ::= P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // I4 ::= menorQue Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // I4 ::= Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // I4 ::= menorQue menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // I4 ::= menorQue menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // I4 ::= menorQue menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // I4 ::= menorQue menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // I4 ::= menorQue menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // I4 ::= menorQue menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // I4 ::= menorQue menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // I4 ::= menorQue menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // I4 ::= menorQue textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // J ::= K textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // J ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // J ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // J ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("br");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // J ::= J textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // J ::= J barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("br");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // K ::= K L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAlineacion(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // K ::= L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarAlineacion(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L ::= alineacion igual tipoAlineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // M ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // M ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // O0 ::= imagen 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O0",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // O ::= O O1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // O ::= O1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // O1 ::= path igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        pathImagen = true;
        Principal.archivoHTML.agregarPathImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // O1 ::= alto igual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAltoImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // O1 ::= ancho igual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAnchoImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // P0 ::= boton 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P0",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // P ::= P P1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // P ::= P1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // P1 ::= id igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        botonId = true;
        Principal.archivoHTML.agregarId(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // P1 ::= texto igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        botonTexto = true;
        Principal.archivoHTML.agregarTexto(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Q0 ::= tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarTabla();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q0",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Q ::= Q Q1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Q ::= Q1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Q1 ::= borde igual booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarBorde(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q1",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // R0 ::= mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.cerrarEtiquetaTabla();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // R ::= R R1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // R ::= R1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // R1 ::= menorQue R2 mayorQue S menorQue barra fila mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarFila();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // R2 ::= fila 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // S ::= S S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // S ::= S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // S1 ::= menorQue T3 T barra columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // S1 ::= menorQue T0 T barra columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // S1 ::= menorQue T3 T menorQue barra columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // S1 ::= menorQue T0 T menorQue barra columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // T0 ::= columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // T3 ::= columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // T ::= T T1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // T ::= T1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // T1 ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // T1 ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // T1 ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // T1 ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // T1 ::= parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // T1 ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // T1 ::= O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // T1 ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // T1 ::= P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // T1 ::= menorQue inicioHS U interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // T1 ::= inicioHS U interrogacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // U ::= U U1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // U ::= U1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // U1 ::= dolar identificador igual V puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        agregarVariable(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // U1 ::= echo W puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Principal.txtConsola.append(a+"\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // U1 ::= numeral identificador igual X puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        switch(b){
            case 1: 
                Principal.structs.add(new Struct("parrafo" ,a ,structParrafo));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructParrafo\t|\n");
            break;
            case 2: 
                Principal.structs.add(new Struct("textoA" ,a ,structTextoA));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTextoA\t|\n");
            break;
            case 3: 
                Principal.structs.add(new Struct("textoB" ,a ,structTextoB));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTextoB\t|\n");
            break;
            case 4: 
                Principal.structs.add(new Struct("imagen" ,a ,structImagen));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructImagen\t|\n");
            break;
            case 5: 
                Principal.structs.add(new Struct("tabla" ,a ,structTabla));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTabla\t|\n");
            break;
            case 6: 
                Principal.structs.add(new Struct("boton" ,a ,structBoton));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTabla\t|\n");
            break;
        }
        Principal.txtStructs.append("\n\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // U1 ::= dolar identificador igual numeral U2 punto AH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        agregarVariable(a, b);
        identificadorStruct = "";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // U1 ::= numeral U2 punto AI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // U1 ::= numeral U2 punto insertar parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                break;
            case "textoA": ((StructTextoA)struct.getValor()).insertar();
                break;
            case "textoB": ((StructTextoB)struct.getValor()).insertar();
                break;
            case "imagen": ((StructImagen)struct.getValor()).insertar();
                break;
            case "tabla": ((StructTabla)struct.getValor()).insertar();
                break;
            case "boton": ((StructBoton)struct.getValor()).insertar();
                break;
            default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // U1 ::= AQ00 parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // U1 ::= AQ00 parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra controlElse llaveAbre AO10 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // U1 ::= U5 parentesisAbre AN parentesisCierra llaveAbre AO llaveCierra 
            {
              Object RESULT =null;
		
        contadorRepetidor--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // U5 ::= repetir 
            {
              Object RESULT =null;
		
        repetidores = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U5",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // U2 ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        identificadorStruct = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // V ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        tipoDato = "cadena";
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // V ::= V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a instanceof Double){
                tipoDato = "decimal";
            }else if(a instanceof Integer){
                tipoDato = "entero";
            }
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // V ::= booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        tipoDato = "booleano";
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // V1 ::= V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // V2 ::= V2 mas V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a+(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a+(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // V2 ::= V2 menos V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a-(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a-(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // V2 ::= V2 multiplicacion V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a*(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a*(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // V2 ::= V2 division V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a/(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a/(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // V2 ::= parentesisAbre V2 parentesisCierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // V2 ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = Integer.parseInt(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable int");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // V2 ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = Double.parseDouble(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable double");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // V2 ::= menos entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = (Integer.parseInt(a)*-1);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable int");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // V2 ::= menos decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = (Double.parseDouble(a)*-1);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable double");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // W ::= W1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // W1 ::= W1 punto W1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // W1 ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // W1 ::= textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // X ::= X1 parentesisCierra 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // X1 ::= X2 parentesisAbre Y 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // X1 ::= X3 parentesisAbre Z 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // X1 ::= X4 parentesisAbre AA 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // X1 ::= X5 parentesisAbre AB 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // X1 ::= X6 parentesisAbre AC 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // X1 ::= X7 parentesisAbre AD 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // X2 ::= crearParrafo 
            {
              Integer RESULT =null;
		
        structParrafo = new StructParrafo();
        RESULT = 1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X2",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // X3 ::= crearTextoA 
            {
              Integer RESULT =null;
		
        structTextoA = new StructTextoA();
        RESULT = 2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X3",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // X4 ::= crearTextoB 
            {
              Integer RESULT =null;
		
        structTextoB = new StructTextoB();
        RESULT = 3;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X4",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // X5 ::= crearImagen 
            {
              Integer RESULT =null;
		
        structImagen = new StructImagen();
        RESULT = 4;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X5",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // X6 ::= crearTabla 
            {
              Integer RESULT =null;
		
        structTabla = new StructTabla();
        RESULT = 5;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X6",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // X7 ::= crearBoton 
            {
              Integer RESULT =null;
		
        structBoton = new StructBoton();
        RESULT = 6;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X7",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Y ::= textoEntreComillas coma tipoAlineacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo = new StructParrafo(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Y ::= textoEntreComillas coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        if(verificarAlineacion(b))
            structParrafo = new StructParrafo(a,Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Y ::= dolar identificador coma tipoAlineacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo = new StructParrafo(Principal.retornarValorCadenaVariable(a),b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Y ::= dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(verificarAlineacion(b))
            structParrafo = new StructParrafo(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Y ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo.setContenido(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Y ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo.setContenido(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Z ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoA = new StructTextoA(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Z ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoA.setContenido(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AA ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoB = new StructTextoB(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AA ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoB.setContenido(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AB ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AB ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AB ::= textoEntreComillas coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AB ::= textoEntreComillas coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, b.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // AB ::= dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AB ::= dolar identificador coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AB ::= textoEntreComillas coma dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AB ::= textoEntreComillas coma dolar identificador coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AB ::= textoEntreComillas coma V1 coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, b.toString(), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // AB ::= textoEntreComillas coma V1 coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, b.toString(), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // AB ::= dolar identificador coma dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // AB ::= dolar identificador coma dolar identificador coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // AB ::= dolar identificador coma V1 coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString(), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // AB ::= dolar identificador coma V1 coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString(), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // AC ::= AC coma AC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AC",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // AC ::= AF AE corcheteCierra 
            {
              Object RESULT =null;
		
        structTabla.agregarFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AC",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // AD ::= textoEntreComillas coma textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // AD ::= textoEntreComillas coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(a, Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AD ::= dolar identificador coma textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(Principal.retornarValorCadenaVariable(a), b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AD ::= dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AF ::= corcheteAbre 
            {
              Object RESULT =null;
		
        structTabla.crearFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AF",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // AE ::= AE coma AE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AE ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AE ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // AE ::= booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // AE ::= V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(a.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // AH ::= getContenido AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": RESULT = ((StructParrafo)struct.getValor()).getContenido();
                break;
            case "textoA": RESULT = ((StructTextoA)struct.getValor()).getContenido();
                break;
            case "textoB": RESULT = ((StructTextoB)struct.getValor()).getContenido();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // AH ::= getAlineacion AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": RESULT = ((StructParrafo)struct.getValor()).getAlineacion();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AH ::= getPath AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getPath();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AH ::= getAncho AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getAncho();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "entero";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AH ::= getAlto AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getAlto();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "entero";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AH ::= getTexto AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "boton": RESULT = ((StructBoton)struct.getValor()).getTexto();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // AI ::= setContenido parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "parrafo": 
                StructParrafo strParrafo = (StructParrafo)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strParrafo.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("parrafo", identificadorStruct, strParrafo));
                identificadorStruct = "";
                break;
            case "textoA": 
                StructTextoA strTextoA = (StructTextoA)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTextoA.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("textoA", identificadorStruct, strTextoA));
                identificadorStruct = "";
                break;
            case "textoB": 
                StructTextoB strTextoB = (StructTextoB)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTextoB.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("textoB", identificadorStruct, strTextoB));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // AI ::= setAlineacion parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "parrafo": 
                StructParrafo strParrafo = (StructParrafo)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strParrafo.setAlineacion(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("parrafo", identificadorStruct, strParrafo));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // AI ::= setPath parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setPath(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // AI ::= setAlto parentesisAbre AK parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setAlto(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // AI ::= setAncho parentesisAbre AK parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setAncho(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // AI ::= setBorde parentesisAbre AL parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "tabla": 
                StructTabla strTabla = (StructTabla)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTabla.setBorde(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("tabla", identificadorStruct, strTabla));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // AI ::= setTexto parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "boton": 
                StructBoton strBoton = (StructBoton)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strBoton.setTexto(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("boton", identificadorStruct, strBoton));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // AI ::= clickBoton parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "boton": 
                StructBoton strBoton = (StructBoton)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strBoton.click(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("boton", identificadorStruct, strBoton));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // AJ ::= textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // AJ ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // AJ ::= tipoAlineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // AJ ::= numeral identificador punto AH1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // AK ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AK",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // AK ::= V1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AK",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // AL ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AL",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // AL ::= booleano 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AL",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // AM ::= parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // AN ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        contadorRepetidor++;
        repetidores.add(Integer.parseInt(Principal.retornarValorCadenaVariable(a)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // AN ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        contadorRepetidor++;
        repetidores.add(Integer.parseInt(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AN",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // AO ::= AO AP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // AO ::= AP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // AP ::= echo W puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if(contadorRepetidor > 0){
            for(int i = 0; i < repetidores.get(contadorRepetidor); i++)
                Principal.txtConsola.append(a+"\n");
        }else{
            for(int i = 0; i < repetidores.get(0); i++)
                Principal.txtConsola.append(a+"\n");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // AP ::= numeral U2 punto insertar parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		
        if(contadorRepetidor > 0){
            for(int i = 0; i < repetidores.get(contadorRepetidor); i++){
                Struct struct = Principal.retornarStruct(identificadorStruct);
                switch(struct.getTipo()){
                    case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                        break;
                    case "textoA": ((StructTextoA)struct.getValor()).insertar();
                        break;
                    case "textoB": ((StructTextoB)struct.getValor()).insertar();
                        break;
                    case "imagen": ((StructImagen)struct.getValor()).insertar();
                        break;
                    case "tabla": ((StructTabla)struct.getValor()).insertar();
                        break;
                    case "boton": ((StructBoton)struct.getValor()).insertar();
                        break;
                    default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                        break;
                }
            }
        }else{
            for(int i = 0; i < repetidores.get(0); i++){
                Struct struct = Principal.retornarStruct(identificadorStruct);
                switch(struct.getTipo()){
                    case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                        break;
                    case "textoA": ((StructTextoA)struct.getValor()).insertar();
                        break;
                    case "textoB": ((StructTextoB)struct.getValor()).insertar();
                        break;
                    case "imagen": ((StructImagen)struct.getValor()).insertar();
                        break;
                    case "tabla": ((StructTabla)struct.getValor()).insertar();
                        break;
                    case "boton": ((StructBoton)struct.getValor()).insertar();
                        break;
                    default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                        break;
                }
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // AP ::= AQ00 parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // AP ::= AQ00 parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra controlElse llaveAbre AO10 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // AP ::= repetir parentesisAbre AN parentesisCierra llaveAbre AO llaveCierra 
            {
              Object RESULT =null;
		
        contadorRepetidor--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // AO1 ::= AO1 AP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // AO1 ::= AP1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // AP1 ::= echo W puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if(contadorIf > 0){
            if(condicionales.get(contadorIf)){
                Principal.txtConsola.append(a+"\n");
            }
        }else{
            if(condicionales.get(0)){
                Principal.txtConsola.append(a+"\n");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // AP1 ::= numeral U2 punto insertar parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		
        if(contadorIf > 0){
            if(condicionales.get(contadorIf)){
                Struct struct = Principal.retornarStruct(identificadorStruct);
                switch(struct.getTipo()){
                    case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                        break;
                    case "textoA": ((StructTextoA)struct.getValor()).insertar();
                        break;
                    case "textoB": ((StructTextoB)struct.getValor()).insertar();
                        break;
                    case "imagen": ((StructImagen)struct.getValor()).insertar();
                        break;
                    case "tabla": ((StructTabla)struct.getValor()).insertar();
                        break;
                    case "boton": ((StructBoton)struct.getValor()).insertar();
                        break;
                    default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                        break;
                }
            }
        }else{
            if(condicionales.get(0)){
                Struct struct = Principal.retornarStruct(identificadorStruct);
                switch(struct.getTipo()){
                    case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                        break;
                    case "textoA": ((StructTextoA)struct.getValor()).insertar();
                        break;
                    case "textoB": ((StructTextoB)struct.getValor()).insertar();
                        break;
                    case "imagen": ((StructImagen)struct.getValor()).insertar();
                        break;
                    case "tabla": ((StructTabla)struct.getValor()).insertar();
                        break;
                    case "boton": ((StructBoton)struct.getValor()).insertar();
                        break;
                    default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                        break;
                }
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // AP1 ::= controlIf parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // AP1 ::= controlIf parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra controlElse llaveAbre AO10 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // AP1 ::= U5 parentesisAbre AN parentesisCierra llaveAbre AO llaveCierra 
            {
              Object RESULT =null;
		
        contadorRepetidor--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // AO10 ::= AO10 AP10 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO10",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // AO10 ::= AP10 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AO10",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // AP10 ::= echo W puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        if(contadorIf > 0){
            if(!condicionales.get(contadorIf)){
                Principal.txtConsola.append(a+"\n");
            }
        }else{
            if(condicionales.get(0)){
                Principal.txtConsola.append(a+"\n");
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP10",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // AP10 ::= numeral U2 punto insertar parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		
        if(contadorIf > 0){
            if(!condicionales.get(contadorIf)){
                Struct struct = Principal.retornarStruct(identificadorStruct);
                switch(struct.getTipo()){
                    case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                        break;
                    case "textoA": ((StructTextoA)struct.getValor()).insertar();
                        break;
                    case "textoB": ((StructTextoB)struct.getValor()).insertar();
                        break;
                    case "imagen": ((StructImagen)struct.getValor()).insertar();
                        break;
                    case "tabla": ((StructTabla)struct.getValor()).insertar();
                        break;
                    case "boton": ((StructBoton)struct.getValor()).insertar();
                        break;
                    default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                        break;
                }
            }
        }else{
            if(condicionales.get(0)){
                Struct struct = Principal.retornarStruct(identificadorStruct);
                switch(struct.getTipo()){
                    case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                        break;
                    case "textoA": ((StructTextoA)struct.getValor()).insertar();
                        break;
                    case "textoB": ((StructTextoB)struct.getValor()).insertar();
                        break;
                    case "imagen": ((StructImagen)struct.getValor()).insertar();
                        break;
                    case "tabla": ((StructTabla)struct.getValor()).insertar();
                        break;
                    case "boton": ((StructBoton)struct.getValor()).insertar();
                        break;
                    default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                        break;
                }
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP10",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // AP10 ::= controlIf parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP10",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // AP10 ::= controlIf parentesisAbre AQ0 parentesisCierra llaveAbre AO1 llaveCierra controlElse llaveAbre AO10 llaveCierra 
            {
              Object RESULT =null;
		
        contadorIf--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP10",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // AP10 ::= U5 parentesisAbre AN parentesisCierra llaveAbre AO llaveCierra 
            {
              Object RESULT =null;
		
        contadorRepetidor--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AP10",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // AQ00 ::= controlIf 
            {
              Object RESULT =null;
		
        condicionales = new ArrayList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ00",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // AQ0 ::= AQ 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        contadorIf++;
        condicionales.add(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ0",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // AQ ::= AQ and AQ 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a && b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // AQ ::= AQ or AQ 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a | b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // AQ ::= not AQ 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(!a)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // AQ ::= parentesisAbre AQ parentesisCierra 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // AQ ::= AR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AQ",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // AR ::= AS menorQue AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a < b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // AR ::= AS mayorQue AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a > b)
                RESULT = true;
            else
                RESULT = false;    
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // AR ::= AS menorIgual AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a <= b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // AR ::= AS mayorIgual AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a >= b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // AR ::= AS noIgual AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a != b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // AR ::= AS igualIgual AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a == b)
                RESULT = true;
            else
                RESULT = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // AR ::= AS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = (a > 0)? true : false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // AS ::= dolar identificador 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Variable var = Principal.retornarVariable(a);
            switch(var.getTipo()){
                case "entero": RESULT = Double.parseDouble(var.getValor().toString());
                break;
                case "decimal": RESULT = Double.parseDouble(var.getValor().toString());
                break;
                case "booleano": RESULT = (Boolean.valueOf(var.getValor().toString())) ? 1.0 : 0;
                break;
                default: Principal.errores.add(new Token("TIPO DATO INVALIDO", "ERROR SINTACTICO - TIPO DATO NO ESPERADO", 0, 0));
                break;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // AS ::= booleano 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (Boolean.valueOf(a)) ? 1.0 : 0;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // AS ::= V1 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = Double.parseDouble(a.toString());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AS",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // AH1 ::= getContenido AH2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // AH1 ::= getAlineacion AH2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // AH1 ::= getPath AH2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // AH1 ::= getAncho AH2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // AH1 ::= getAlto AH2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // AH1 ::= getTexto AH2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // AH2 ::= parentesisAbre parentesisCierra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
