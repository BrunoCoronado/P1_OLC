
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistema.analisis;

import java_cup.runtime.*;
import sistema.bean.Token;
import sistema.bean.Variable;
import sistema.bean.Struct;
import sistema.bean.struct.*;
import sistema.ui.Principal;
import java.math.BigDecimal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\307\000\002\002\004\000\002\002\013\000\002\002" +
    "\012\000\002\003\004\000\002\003\003\000\002\004\012" +
    "\000\002\004\012\000\002\004\011\000\002\004\011\000" +
    "\002\005\004\000\002\005\003\000\002\062\010\000\002" +
    "\062\011\000\002\006\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\063\005\000\002\010\010" +
    "\000\002\010\007\000\002\010\007\000\002\010\005\000" +
    "\002\010\007\000\002\010\007\000\002\010\011\000\002" +
    "\010\011\000\002\010\012\000\002\010\007\000\002\011" +
    "\004\000\002\011\003\000\002\012\003\000\002\013\004" +
    "\000\002\013\003\000\002\014\010\000\002\014\007\000" +
    "\002\014\007\000\002\014\005\000\002\014\007\000\002" +
    "\014\007\000\002\014\011\000\002\014\011\000\002\014" +
    "\003\000\002\014\007\000\002\014\006\000\002\014\006" +
    "\000\002\014\004\000\002\014\006\000\002\014\006\000" +
    "\002\014\010\000\002\014\010\000\002\014\012\000\002" +
    "\014\011\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\005" +
    "\000\002\016\004\000\002\016\003\000\002\064\005\000" +
    "\002\017\003\000\002\017\004\000\002\020\003\000\002" +
    "\020\004\000\002\021\003\000\002\023\004\000\002\023" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\024\003\000\002\026\004\000\002\026\003\000" +
    "\002\025\005\000\002\025\005\000\002\030\003\000\002" +
    "\027\004\000\002\027\003\000\002\031\005\000\002\033" +
    "\003\000\002\032\004\000\002\032\003\000\002\034\012" +
    "\000\002\035\003\000\002\036\004\000\002\036\003\000" +
    "\002\037\007\000\002\037\007\000\002\037\010\000\002" +
    "\037\010\000\002\041\003\000\002\043\003\000\002\040" +
    "\004\000\002\040\003\000\002\042\003\000\002\042\005" +
    "\000\002\042\004\000\002\042\007\000\002\042\006\000" +
    "\002\042\011\000\002\042\010\000\002\042\011\000\002" +
    "\042\010\000\002\044\004\000\002\044\003\000\002\045" +
    "\007\000\002\045\005\000\002\045\007\000\002\045\011" +
    "\000\002\045\006\000\002\045\011\000\002\046\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\103\003\000\002\104\005\000\002\104\005\000\002\104" +
    "\005\000\002\104\005\000\002\104\005\000\002\104\003" +
    "\000\002\104\003\000\002\065\003\000\002\066\005\000" +
    "\002\066\004\000\002\066\003\000\002\072\004\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\074\003" +
    "\000\002\075\003\000\002\076\003\000\002\077\003\000" +
    "\002\100\003\000\002\101\003\000\002\047\005\000\002" +
    "\047\006\000\002\047\006\000\002\047\007\000\002\047" +
    "\003\000\002\047\004\000\002\050\003\000\002\050\004" +
    "\000\002\051\003\000\002\051\004\000\002\052\003\000" +
    "\002\052\004\000\002\052\006\000\002\052\005\000\002" +
    "\052\007\000\002\052\006\000\002\052\011\000\002\052" +
    "\010\000\002\052\010\000\002\052\007\000\002\052\012" +
    "\000\002\052\011\000\002\052\011\000\002\052\010\000" +
    "\002\053\005\000\002\053\005\000\002\054\005\000\002" +
    "\054\006\000\002\054\006\000\002\054\007\000\002\055" +
    "\003\000\002\056\005\000\002\056\003\000\002\056\004" +
    "\000\002\056\003\000\002\056\003\000\002\105\004\000" +
    "\002\105\004\000\002\105\004\000\002\105\004\000\002" +
    "\105\004\000\002\105\004\000\002\060\007\000\002\060" +
    "\007\000\002\060\007\000\002\060\007\000\002\060\007" +
    "\000\002\060\007\000\002\060\007\000\002\060\007\000" +
    "\002\067\003\000\002\067\004\000\002\067\003\000\002" +
    "\070\004\000\002\070\003\000\002\071\004\000\002\071" +
    "\003\000\002\061\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0206\000\004\006\005\001\002\000\004\002\u0208\001" +
    "\002\000\004\011\006\001\002\000\004\005\007\001\002" +
    "\000\004\006\010\001\002\000\010\007\u0204\012\017\013" +
    "\015\001\002\000\004\006\ufffd\001\002\000\004\006\013" +
    "\001\002\000\010\007\016\012\017\013\015\001\002\000" +
    "\004\006\ufffe\001\002\000\006\005\053\015\051\001\002" +
    "\000\004\011\046\001\002\000\004\005\020\001\002\000" +
    "\004\006\021\001\002\000\006\007\043\014\026\001\002" +
    "\000\004\006\ufff7\001\002\000\004\006\024\001\002\000" +
    "\006\007\027\014\026\001\002\000\004\006\ufff8\001\002" +
    "\000\006\005\032\041\033\001\002\000\004\012\030\001" +
    "\002\000\004\005\031\001\002\000\004\006\ufffc\001\002" +
    "\000\004\006\037\001\002\000\004\007\034\001\002\000" +
    "\004\014\035\001\002\000\004\005\036\001\002\000\004" +
    "\006\ufff6\001\002\000\004\007\040\001\002\000\004\014" +
    "\041\001\002\000\004\005\042\001\002\000\004\006\ufff5" +
    "\001\002\000\004\012\044\001\002\000\004\005\045\001" +
    "\002\000\004\006\ufffa\001\002\000\004\005\047\001\002" +
    "\000\004\004\050\001\002\000\004\002\000\001\002\000" +
    "\004\010\u0202\001\002\000\006\005\ufff1\015\ufff1\001\002" +
    "\000\004\006\ufff3\001\002\000\006\005\u0201\015\051\001" +
    "\002\000\004\006\057\001\002\000\004\006\uffe4\001\002" +
    "\000\024\007\u01fd\016\067\017\074\023\070\024\066\025" +
    "\065\031\077\035\071\051\075\001\002\000\004\006\062" +
    "\001\002\000\004\006\uffe5\001\002\000\024\007\063\016" +
    "\067\017\074\023\070\024\066\025\065\031\077\035\071" +
    "\051\075\001\002\000\006\013\u01fa\022\u01fb\001\002\000" +
    "\006\036\230\037\233\001\002\000\004\040\uffb5\001\002" +
    "\000\006\005\u01c8\041\u01ca\001\002\000\026\006\uffe3\007" +
    "\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\031\uffe3" +
    "\035\uffe3\041\uffe3\001\002\000\006\005\u01c2\041\u01c3\001" +
    "\002\000\006\036\uffba\037\uffba\001\002\000\010\032\167" +
    "\033\165\034\166\001\002\000\026\006\u018a\007\u018c\016" +
    "\067\017\u0194\023\u018e\024\u018d\025\065\031\077\035\071" +
    "\041\u0193\001\002\000\012\005\151\007\150\020\145\041" +
    "\152\001\002\000\010\052\266\075\264\101\263\001\002" +
    "\000\004\040\102\001\002\000\010\032\uffc0\033\uffc0\034" +
    "\uffc0\001\002\000\006\005\uffb3\040\uffb3\001\002\000\006" +
    "\005\106\040\102\001\002\000\004\010\103\001\002\000" +
    "\004\044\104\001\002\000\006\005\uffb2\040\uffb2\001\002" +
    "\000\006\005\uffb4\040\uffb4\001\002\000\004\006\uffb1\001" +
    "\002\000\004\006\110\001\002\000\004\026\117\001\002" +
    "\000\004\006\uffaf\001\002\000\004\006\114\001\002\000" +
    "\004\006\uffb0\001\002\000\006\007\116\026\117\001\002" +
    "\000\004\005\121\001\002\000\004\025\120\001\002\000" +
    "\004\005\uffad\001\002\000\004\006\uffe7\001\002\000\004" +
    "\006\122\001\002\000\006\027\127\030\130\001\002\000" +
    "\004\006\125\001\002\000\004\006\uffab\001\002\000\010" +
    "\007\131\027\127\030\130\001\002\000\004\006\uffac\001" +
    "\002\000\016\006\uffa6\007\uffa6\017\uffa6\031\uffa6\035\uffa6" +
    "\041\uffa6\001\002\000\016\006\uffa5\007\uffa5\017\uffa5\031" +
    "\uffa5\035\uffa5\041\uffa5\001\002\000\004\026\261\001\002" +
    "\000\016\006\134\007\135\017\142\031\077\035\071\041" +
    "\141\001\002\000\016\006\134\007\135\017\142\031\077" +
    "\035\071\041\141\001\002\000\012\007\252\017\213\031" +
    "\077\035\071\001\002\000\004\022\211\001\002\000\006" +
    "\036\230\037\233\001\002\000\016\006\205\007\206\017" +
    "\142\031\077\035\071\041\141\001\002\000\010\032\167" +
    "\033\165\034\166\001\002\000\016\006\uffa2\007\uffa2\017" +
    "\uffa2\031\uffa2\035\uffa2\041\uffa2\001\002\000\012\005\151" +
    "\007\150\020\145\041\152\001\002\000\016\006\uffa3\007" +
    "\uffa3\017\uffa3\031\uffa3\035\uffa3\041\uffa3\001\002\000\006" +
    "\020\uffc6\041\uffc6\001\002\000\004\010\163\001\002\000" +
    "\006\020\145\041\162\001\002\000\006\007\155\041\156" +
    "\001\002\000\004\022\154\001\002\000\004\006\153\001" +
    "\002\000\006\007\uffcc\041\uffcc\001\002\000\006\007\uffcb" +
    "\041\uffcb\001\002\000\006\007\uffca\041\uffca\001\002\000" +
    "\006\017\157\022\160\001\002\000\006\007\uffc9\041\uffc9" +
    "\001\002\000\016\006\uff9e\007\uff9e\017\uff9e\031\uff9e\035" +
    "\uff9e\041\uff9e\001\002\000\006\007\uffc8\041\uffc8\001\002" +
    "\000\006\020\uffc7\041\uffc7\001\002\000\006\007\uffcd\041" +
    "\uffcd\001\002\000\004\021\164\001\002\000\006\020\uffc5" +
    "\041\uffc5\001\002\000\004\010\203\001\002\000\004\010" +
    "\201\001\002\000\004\010\177\001\002\000\012\005\172" +
    "\032\167\033\165\034\166\001\002\000\012\005\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\001\002\000\004\006\174\001\002" +
    "\000\012\005\uffbf\032\uffbf\033\uffbf\034\uffbf\001\002\000" +
    "\004\007\175\001\002\000\004\031\176\001\002\000\016" +
    "\006\uff9c\007\uff9c\017\uff9c\031\uff9c\035\uff9c\041\uff9c\001" +
    "\002\000\004\042\200\001\002\000\012\005\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\001\002\000\004\043\202\001\002\000" +
    "\012\005\uffbb\032\uffbb\033\uffbb\034\uffbb\001\002\000\004" +
    "\043\204\001\002\000\012\005\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\001\002\000\012\007\214\017\213\031\077\035\071" +
    "\001\002\000\006\022\211\027\210\001\002\000\016\006" +
    "\uffa4\007\uffa4\017\uffa4\031\uffa4\035\uffa4\041\uffa4\001\002" +
    "\000\004\006\uffa9\001\002\000\016\006\uffa0\007\uffa0\017" +
    "\uffa0\031\uffa0\035\uffa0\041\uffa0\001\002\000\006\036\230" +
    "\037\233\001\002\000\012\005\151\007\150\020\145\041" +
    "\152\001\002\000\006\022\224\027\223\001\002\000\010" +
    "\032\167\033\165\034\166\001\002\000\012\005\217\032" +
    "\167\033\165\034\166\001\002\000\004\006\220\001\002" +
    "\000\004\007\221\001\002\000\004\031\222\001\002\000" +
    "\016\006\uff9d\007\uff9d\017\uff9d\031\uff9d\035\uff9d\041\uff9d" +
    "\001\002\000\004\006\uffa7\001\002\000\016\006\uffa1\007" +
    "\uffa1\017\uffa1\031\uffa1\035\uffa1\041\uffa1\001\002\000\006" +
    "\007\226\041\156\001\002\000\006\017\227\022\160\001" +
    "\002\000\016\006\uff9f\007\uff9f\017\uff9f\031\uff9f\035\uff9f" +
    "\041\uff9f\001\002\000\004\010\243\001\002\000\010\005" +
    "\uffb8\036\uffb8\037\uffb8\001\002\000\010\005\237\036\230" +
    "\037\233\001\002\000\004\010\234\001\002\000\004\042" +
    "\235\001\002\000\010\005\uffb7\036\uffb7\037\uffb7\001\002" +
    "\000\010\005\uffb9\036\uffb9\037\uffb9\001\002\000\004\006" +
    "\240\001\002\000\004\007\241\001\002\000\004\035\242" +
    "\001\002\000\016\006\uff9b\007\uff9b\017\uff9b\031\uff9b\035" +
    "\uff9b\041\uff9b\001\002\000\004\042\244\001\002\000\010" +
    "\005\uffb6\036\uffb6\037\uffb6\001\002\000\010\005\246\036" +
    "\230\037\233\001\002\000\004\006\247\001\002\000\004" +
    "\007\250\001\002\000\004\035\251\001\002\000\016\006" +
    "\uff9a\007\uff9a\017\uff9a\031\uff9a\035\uff9a\041\uff9a\001\002" +
    "\000\004\022\224\001\002\000\016\006\254\007\255\017" +
    "\142\031\077\035\071\041\141\001\002\000\012\007\257" +
    "\017\213\031\077\035\071\001\002\000\006\022\211\030" +
    "\256\001\002\000\004\006\uffaa\001\002\000\006\022\224" +
    "\030\260\001\002\000\004\006\uffa8\001\002\000\004\005" +
    "\262\001\002\000\004\006\uffae\001\002\000\004\060\354" +
    "\001\002\000\006\042\346\052\345\001\002\000\012\050" +
    "\341\052\266\075\264\101\263\001\002\000\004\060\270" +
    "\001\002\000\012\050\uff98\052\uff98\075\uff98\101\uff98\001" +
    "\002\000\004\010\271\001\002\000\016\042\277\044\300" +
    "\045\272\077\276\100\275\101\273\001\002\000\010\045" +
    "\272\077\276\100\275\001\002\000\004\060\314\001\002" +
    "\000\004\053\313\001\002\000\022\046\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\076\uff86\130\uff86\001\002" +
    "\000\022\046\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057" +
    "\uff87\076\uff87\130\uff87\001\002\000\004\053\uff90\001\002" +
    "\000\004\053\uff8e\001\002\000\022\046\uff8d\053\uff8d\054" +
    "\303\055\304\056\305\057\306\076\uff8d\130\uff8d\001\002" +
    "\000\004\053\uff8f\001\002\000\010\045\272\077\276\100" +
    "\275\001\002\000\010\045\272\077\276\100\275\001\002" +
    "\000\010\045\272\077\276\100\275\001\002\000\010\045" +
    "\272\077\276\100\275\001\002\000\022\046\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\076\uff89\130\uff89\001" +
    "\002\000\022\046\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\076\uff8a\130\uff8a\001\002\000\022\046\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\056\305\057\306\076\uff8b\130\uff8b" +
    "\001\002\000\022\046\uff8c\053\uff8c\054\uff8c\055\uff8c\056" +
    "\305\057\306\076\uff8c\130\uff8c\001\002\000\012\050\uff97" +
    "\052\uff97\075\uff97\101\uff97\001\002\000\004\047\uff91\001" +
    "\002\000\004\047\316\001\002\000\016\104\324\106\323" +
    "\113\317\115\325\117\321\125\322\001\002\000\004\045" +
    "\326\001\002\000\012\050\uff94\052\uff94\075\uff94\101\uff94" +
    "\001\002\000\004\045\326\001\002\000\004\045\326\001" +
    "\002\000\004\045\326\001\002\000\004\045\326\001\002" +
    "\000\004\045\326\001\002\000\004\046\330\001\002\000" +
    "\012\050\uff4c\052\uff4c\075\uff4c\101\uff4c\001\002\000\004" +
    "\053\331\001\002\000\012\050\uff3b\052\uff3b\075\uff3b\101" +
    "\uff3b\001\002\000\012\050\uff4f\052\uff4f\075\uff4f\101\uff4f" +
    "\001\002\000\012\050\uff50\052\uff50\075\uff50\101\uff50\001" +
    "\002\000\012\050\uff4b\052\uff4b\075\uff4b\101\uff4b\001\002" +
    "\000\012\050\uff4d\052\uff4d\075\uff4d\101\uff4d\001\002\000" +
    "\012\050\uff4e\052\uff4e\075\uff4e\101\uff4e\001\002\000\014" +
    "\046\340\054\303\055\304\056\305\057\306\001\002\000" +
    "\022\046\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88" +
    "\076\uff88\130\uff88\001\002\000\004\005\343\001\002\000" +
    "\012\050\uff99\052\uff99\075\uff99\101\uff99\001\002\000\004" +
    "\006\uffe6\001\002\000\004\053\353\001\002\000\004\060" +
    "\352\001\002\000\006\047\uff82\053\uff82\001\002\000\006" +
    "\047\350\053\uff85\001\002\000\006\042\346\052\345\001" +
    "\002\000\006\047\uff84\053\uff84\001\002\000\006\047\uff83" +
    "\053\uff83\001\002\000\012\050\uff96\052\uff96\075\uff96\101" +
    "\uff96\001\002\000\006\010\u0126\047\uff91\001\002\000\004" +
    "\047\356\001\002\000\024\103\363\105\357\107\361\114" +
    "\365\116\364\120\367\122\366\124\370\126\360\001\002" +
    "\000\004\045\u0122\001\002\000\004\045\u011e\001\002\000" +
    "\004\045\u011b\001\002\000\012\050\uff93\052\uff93\075\uff93" +
    "\101\uff93\001\002\000\004\045\u0117\001\002\000\004\045" +
    "\u0113\001\002\000\004\045\u010f\001\002\000\004\045\u0108" +
    "\001\002\000\004\045\u0101\001\002\000\004\045\371\001" +
    "\002\000\010\021\375\042\374\052\373\001\002\000\004" +
    "\046\377\001\002\000\004\060\376\001\002\000\004\046" +
    "\uff42\001\002\000\004\046\uff40\001\002\000\004\046\uff41" +
    "\001\002\000\004\053\u0100\001\002\000\012\050\uff44\052" +
    "\uff44\075\uff44\101\uff44\001\002\000\012\045\272\052\u0103" +
    "\077\276\100\275\001\002\000\004\046\uff3e\001\002\000" +
    "\004\060\u0107\001\002\000\004\046\u0105\001\002\000\004" +
    "\053\u0106\001\002\000\012\050\uff46\052\uff46\075\uff46\101" +
    "\uff46\001\002\000\004\046\uff3f\001\002\000\006\044\u0109" +
    "\052\u010a\001\002\000\004\046\uff3c\001\002\000\004\060" +
    "\u010e\001\002\000\004\046\u010c\001\002\000\004\053\u010d" +
    "\001\002\000\012\050\uff45\052\uff45\075\uff45\101\uff45\001" +
    "\002\000\004\046\uff3d\001\002\000\010\021\375\042\374" +
    "\052\373\001\002\000\004\046\u0111\001\002\000\004\053" +
    "\u0112\001\002\000\012\050\uff48\052\uff48\075\uff48\101\uff48" +
    "\001\002\000\012\045\272\052\u0103\077\276\100\275\001" +
    "\002\000\004\046\u0115\001\002\000\004\053\u0116\001\002" +
    "\000\012\050\uff47\052\uff47\075\uff47\101\uff47\001\002\000" +
    "\010\021\375\042\374\052\373\001\002\000\004\046\u0119" +
    "\001\002\000\004\053\u011a\001\002\000\012\050\uff49\052" +
    "\uff49\075\uff49\101\uff49\001\002\000\004\046\u011c\001\002" +
    "\000\004\053\u011d\001\002\000\012\050\uff92\052\uff92\075" +
    "\uff92\101\uff92\001\002\000\010\021\375\042\374\052\373" +
    "\001\002\000\004\046\u0120\001\002\000\004\053\u0121\001" +
    "\002\000\012\050\uff43\052\uff43\075\uff43\101\uff43\001\002" +
    "\000\010\021\375\042\374\052\373\001\002\000\004\046" +
    "\u0124\001\002\000\004\053\u0125\001\002\000\012\050\uff4a" +
    "\052\uff4a\075\uff4a\101\uff4a\001\002\000\016\102\u0128\110" +
    "\u0132\111\u0131\112\u0129\121\u0130\123\u0133\001\002\000\004" +
    "\045\u0178\001\002\000\004\045\uff7a\001\002\000\004\045" +
    "\uff77\001\002\000\004\045\u015b\001\002\000\004\045\u0156" +
    "\001\002\000\004\045\u0151\001\002\000\004\053\u0150\001" +
    "\002\000\004\045\u0143\001\002\000\004\046\u0142\001\002" +
    "\000\004\045\uff76\001\002\000\004\045\uff78\001\002\000" +
    "\004\045\uff79\001\002\000\004\045\uff75\001\002\000\004" +
    "\045\u0135\001\002\000\006\042\u0137\052\u0136\001\002\000" +
    "\004\060\u013d\001\002\000\004\076\u0139\001\002\000\004" +
    "\046\uff7b\001\002\000\006\042\u013b\052\u013a\001\002\000" +
    "\004\060\u013c\001\002\000\004\046\uff5a\001\002\000\004" +
    "\046\uff59\001\002\000\004\076\u013e\001\002\000\006\042" +
    "\u0140\052\u013f\001\002\000\004\060\u0141\001\002\000\004" +
    "\046\uff58\001\002\000\004\046\uff57\001\002\000\004\053" +
    "\uff81\001\002\000\006\042\u0145\052\u0144\001\002\000\004" +
    "\060\u014b\001\002\000\006\046\uff70\076\u0147\001\002\000" +
    "\004\046\uff80\001\002\000\006\021\u0149\052\u0148\001\002" +
    "\000\004\060\u014a\001\002\000\004\046\uff74\001\002\000" +
    "\004\046\uff73\001\002\000\006\046\uff6f\076\u014c\001\002" +
    "\000\006\021\u014e\052\u014d\001\002\000\004\060\u014f\001" +
    "\002\000\004\046\uff72\001\002\000\004\046\uff71\001\002" +
    "\000\012\050\uff95\052\uff95\075\uff95\101\uff95\001\002\000" +
    "\006\042\u0153\052\u0152\001\002\000\004\060\u0155\001\002" +
    "\000\004\046\uff6e\001\002\000\004\046\uff7f\001\002\000" +
    "\004\046\uff6d\001\002\000\006\042\u0158\052\u0157\001\002" +
    "\000\004\060\u015a\001\002\000\004\046\uff6c\001\002\000" +
    "\004\046\uff7e\001\002\000\004\046\uff6b\001\002\000\006" +
    "\042\u015d\052\u015c\001\002\000\004\060\u016b\001\002\000" +
    "\006\046\uff6a\076\u015f\001\002\000\004\046\uff7d\001\002" +
    "\000\012\045\272\052\u0161\077\276\100\275\001\002\000" +
    "\006\046\uff67\076\u0167\001\002\000\004\060\u0162\001\002" +
    "\000\006\046\uff68\076\u0163\001\002\000\012\045\272\052" +
    "\u0165\077\276\100\275\001\002\000\004\046\uff63\001\002" +
    "\000\004\060\u0166\001\002\000\004\046\uff64\001\002\000" +
    "\012\045\272\052\u0169\077\276\100\275\001\002\000\004" +
    "\046\uff61\001\002\000\004\060\u016a\001\002\000\004\046" +
    "\uff62\001\002\000\006\046\uff69\076\u016c\001\002\000\012" +
    "\045\272\052\u016e\077\276\100\275\001\002\000\006\046" +
    "\uff65\076\u0174\001\002\000\004\060\u016f\001\002\000\006" +
    "\046\uff66\076\u0170\001\002\000\012\045\272\052\u0172\077" +
    "\276\100\275\001\002\000\004\046\uff5f\001\002\000\004" +
    "\060\u0173\001\002\000\004\046\uff60\001\002\000\012\045" +
    "\272\052\u0176\077\276\100\275\001\002\000\004\046\uff5d" +
    "\001\002\000\004\060\u0177\001\002\000\004\046\uff5e\001" +
    "\002\000\004\127\u0179\001\002\000\016\042\uff56\044\uff56" +
    "\045\uff56\052\uff56\077\uff56\100\uff56\001\002\000\016\042" +
    "\u0180\044\u0181\045\272\052\u017e\077\276\100\275\001\002" +
    "\000\006\046\uff7c\076\u017c\001\002\000\004\127\u0179\001" +
    "\002\000\006\046\uff5c\076\uff5c\001\002\000\004\060\u0186" +
    "\001\002\000\006\076\u0183\130\u0184\001\002\000\006\076" +
    "\uff54\130\uff54\001\002\000\006\076\uff52\130\uff52\001\002" +
    "\000\006\076\uff51\130\uff51\001\002\000\016\042\u0180\044" +
    "\u0181\045\272\052\u017e\077\276\100\275\001\002\000\006" +
    "\046\uff5b\076\uff5b\001\002\000\006\076\uff55\130\uff55\001" +
    "\002\000\006\076\uff53\130\uff53\001\002\000\006\007\u0188" +
    "\041\156\001\002\000\006\017\u0189\022\160\001\002\000" +
    "\004\006\uffed\001\002\000\022\007\u01e9\016\067\017\u01ab" +
    "\023\u01a8\024\u01a7\025\065\031\077\035\071\001\002\000" +
    "\006\036\230\037\233\001\002\000\004\022\u01a4\001\002" +
    "\000\006\005\u01c8\041\u01ca\001\002\000\006\005\u01c2\041" +
    "\u01c3\001\002\000\026\006\uffe1\007\uffe1\016\uffe1\017\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\031\uffe1\035\uffe1\041\uffe1\001" +
    "\002\000\026\006\u01d9\007\u01da\016\067\017\u0194\023\u018e" +
    "\024\u018d\025\065\031\077\035\071\041\u0193\001\002\000" +
    "\010\032\167\033\165\034\166\001\002\000\026\006\u018a" +
    "\007\u018c\016\067\017\u0194\023\u018e\024\u018d\025\065\031" +
    "\077\035\071\041\u0193\001\002\000\026\006\uffd8\007\uffd8" +
    "\016\uffd8\017\uffd8\023\uffd8\024\uffd8\025\uffd8\031\uffd8\035" +
    "\uffd8\041\uffd8\001\002\000\012\005\151\007\150\020\145" +
    "\041\152\001\002\000\004\040\102\001\002\000\006\005" +
    "\106\040\102\001\002\000\004\006\110\001\002\000\004" +
    "\006\u0199\001\002\000\006\007\u019a\026\117\001\002\000" +
    "\004\025\u019b\001\002\000\026\006\uffce\007\uffce\016\uffce" +
    "\017\uffce\023\uffce\024\uffce\025\uffce\031\uffce\035\uffce\041" +
    "\uffce\001\002\000\006\007\u019d\041\156\001\002\000\006" +
    "\017\u019e\022\160\001\002\000\026\006\uffd5\007\uffd5\016" +
    "\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\031\uffd5\035\uffd5" +
    "\041\uffd5\001\002\000\026\006\u01a0\007\u01a1\016\067\017" +
    "\u0194\023\u018e\024\u018d\025\065\031\077\035\071\041\u0193" +
    "\001\002\000\022\007\u01a5\016\067\017\u01ab\023\u01a8\024" +
    "\u01a7\025\065\031\077\035\071\001\002\000\006\016\u01a3" +
    "\022\u01a4\001\002\000\026\006\uffe2\007\uffe2\016\uffe2\017" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\031\uffe2\035\uffe2\041\uffe2" +
    "\001\002\000\026\006\uffd6\007\uffd6\016\uffd6\017\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\031\uffd6\035\uffd6\041\uffd6\001\002" +
    "\000\026\006\uffd4\007\uffd4\016\uffd4\017\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\031\uffd4\035\uffd4\041\uffd4\001\002\000\006" +
    "\016\u01d3\022\u01bc\001\002\000\006\036\230\037\233\001" +
    "\002\000\006\005\u01c8\041\u01ca\001\002\000\006\005\u01c2" +
    "\041\u01c3\001\002\000\010\032\167\033\165\034\166\001" +
    "\002\000\026\006\u018a\007\u018c\016\067\017\u0194\023\u018e" +
    "\024\u018d\025\065\031\077\035\071\041\u0193\001\002\000" +
    "\012\005\151\007\150\020\145\041\152\001\002\000\004" +
    "\040\102\001\002\000\006\005\106\040\102\001\002\000" +
    "\004\006\110\001\002\000\004\006\u01b0\001\002\000\006" +
    "\007\u01b1\026\117\001\002\000\004\025\u01b2\001\002\000" +
    "\026\006\uffcf\007\uffcf\016\uffcf\017\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\031\uffcf\035\uffcf\041\uffcf\001\002\000\006\007" +
    "\u01b4\041\156\001\002\000\006\017\u01b5\022\160\001\002" +
    "\000\026\006\uffde\007\uffde\016\uffde\017\uffde\023\uffde\024" +
    "\uffde\025\uffde\031\uffde\035\uffde\041\uffde\001\002\000\026" +
    "\006\u01b7\007\u01b8\016\067\017\u0194\023\u018e\024\u018d\025" +
    "\065\031\077\035\071\041\u0193\001\002\000\022\007\u01ba" +
    "\016\067\017\u01ab\023\u01a8\024\u01a7\025\065\031\077\035" +
    "\071\001\002\000\006\016\u01b9\022\u01a4\001\002\000\026" +
    "\006\uffdf\007\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\031\uffdf\035\uffdf\041\uffdf\001\002\000\006\016\u01bb" +
    "\022\u01bc\001\002\000\026\006\uffe0\007\uffe0\016\uffe0\017" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\035\uffe0\041\uffe0" +
    "\001\002\000\026\006\uffdd\007\uffdd\016\uffdd\017\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\031\uffdd\035\uffdd\041\uffdd\001\002" +
    "\000\012\005\u01be\032\167\033\165\034\166\001\002\000" +
    "\004\006\u01bf\001\002\000\004\007\u01c0\001\002\000\004" +
    "\031\u01c1\001\002\000\026\006\uffda\007\uffda\016\uffda\017" +
    "\uffda\023\uffda\024\uffda\025\uffda\031\uffda\035\uffda\041\uffda" +
    "\001\002\000\004\006\u01c7\001\002\000\004\007\uffc4\001" +
    "\002\000\004\007\u01c5\001\002\000\004\023\u01c6\001\002" +
    "\000\026\006\uffdc\007\uffdc\016\uffdc\017\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\031\uffdc\035\uffdc\041\uffdc\001\002\000\004" +
    "\007\uffc3\001\002\000\004\006\u01cd\001\002\000\004\007" +
    "\u01cb\001\002\000\004\007\uffc2\001\002\000\004\024\u01cc" +
    "\001\002\000\026\006\uffdb\007\uffdb\016\uffdb\017\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\031\uffdb\035\uffdb\041\uffdb\001\002" +
    "\000\004\007\uffc1\001\002\000\010\005\u01cf\036\230\037" +
    "\233\001\002\000\004\006\u01d0\001\002\000\004\007\u01d1" +
    "\001\002\000\004\035\u01d2\001\002\000\026\006\uffd9\007" +
    "\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\025\uffd9\031\uffd9" +
    "\035\uffd9\041\uffd9\001\002\000\026\006\uffd7\007\uffd7\016" +
    "\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7\031\uffd7\035\uffd7" +
    "\041\uffd7\001\002\000\012\005\u01d5\032\167\033\165\034" +
    "\166\001\002\000\004\006\u01d6\001\002\000\004\007\u01d7" +
    "\001\002\000\004\031\u01d8\001\002\000\026\006\uffd1\007" +
    "\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\031\uffd1" +
    "\035\uffd1\041\uffd1\001\002\000\022\007\u01dc\016\067\017" +
    "\u01ab\023\u01a8\024\u01a7\025\065\031\077\035\071\001\002" +
    "\000\006\016\u01db\022\u01a4\001\002\000\004\006\uffee\001" +
    "\002\000\006\016\u01dd\022\u01bc\001\002\000\004\006\uffef" +
    "\001\002\000\004\007\u01df\001\002\000\004\023\u01e0\001" +
    "\002\000\026\006\uffd3\007\uffd3\016\uffd3\017\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\031\uffd3\035\uffd3\041\uffd3\001\002\000" +
    "\004\007\u01e2\001\002\000\004\024\u01e3\001\002\000\026" +
    "\006\uffd2\007\uffd2\016\uffd2\017\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\031\uffd2\035\uffd2\041\uffd2\001\002\000\010\005\u01e5" +
    "\036\230\037\233\001\002\000\004\006\u01e6\001\002\000" +
    "\004\007\u01e7\001\002\000\004\035\u01e8\001\002\000\026" +
    "\006\uffd0\007\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\031\uffd0\035\uffd0\041\uffd0\001\002\000\004\022\u01bc" +
    "\001\002\000\012\005\u01eb\032\167\033\165\034\166\001" +
    "\002\000\004\006\u01ec\001\002\000\004\007\u01ed\001\002" +
    "\000\004\031\u01ee\001\002\000\004\006\uffe9\001\002\000" +
    "\004\007\u01f0\001\002\000\004\023\u01f1\001\002\000\004" +
    "\006\uffeb\001\002\000\004\007\u01f3\001\002\000\004\024" +
    "\u01f4\001\002\000\004\006\uffea\001\002\000\010\005\u01f6" +
    "\036\230\037\233\001\002\000\004\006\u01f7\001\002\000" +
    "\004\007\u01f8\001\002\000\004\035\u01f9\001\002\000\004" +
    "\006\uffe8\001\002\000\004\005\u01fc\001\002\000\004\006" +
    "\uffec\001\002\000\004\006\ufffb\001\002\000\006\013\u01fe" +
    "\022\u01fb\001\002\000\004\005\u01ff\001\002\000\004\006" +
    "\ufff9\001\002\000\006\005\ufff2\015\ufff2\001\002\000\004" +
    "\006\ufff4\001\002\000\004\042\u0203\001\002\000\006\005" +
    "\ufff0\015\ufff0\001\002\000\004\011\u0205\001\002\000\004" +
    "\005\u0206\001\002\000\004\004\u0207\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0206\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\054\007\053\063\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\022\062\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\u01ff\001\001\000\006\010" +
    "\055\011\057\001\001\000\002\001\001\000\012\012\072" +
    "\021\071\024\063\030\075\001\001\000\004\010\060\001" +
    "\001\000\002\001\001\000\012\012\072\021\071\024\063" +
    "\030\075\001\001\000\002\001\001\000\006\025\230\026" +
    "\u01f4\001\001\000\002\001\001\000\004\020\u01f1\001\001" +
    "\000\002\001\001\000\004\017\u01ee\001\001\000\002\001" +
    "\001\000\006\022\170\023\u01e9\001\001\000\016\012\u0191" +
    "\013\u018f\014\u018e\021\u0190\024\u018a\030\u0194\001\001\000" +
    "\010\015\u0186\016\145\064\143\001\001\000\006\044\264" +
    "\045\266\001\001\000\006\027\100\031\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\104\033\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\111" +
    "\034\110\001\001\000\004\035\114\001\001\000\002\001" +
    "\001\000\004\034\112\001\001\000\002\001\001\000\004" +
    "\035\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\122\037\123" +
    "\001\001\000\006\041\132\043\131\001\001\000\004\037" +
    "\125\001\001\000\002\001\001\000\006\041\132\043\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\137\024\135\040\252" +
    "\042\142\001\001\000\012\021\137\024\135\040\136\042" +
    "\142\001\001\000\006\021\214\024\211\001\001\000\002" +
    "\001\001\000\006\025\230\026\244\001\001\000\010\021" +
    "\137\024\135\042\206\001\001\000\006\022\170\023\167" +
    "\001\001\000\002\001\001\000\010\015\146\016\145\064" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\214\024\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\230\026\231\001\001\000\010\015\224\016\145\064" +
    "\143\001\001\000\002\001\001\000\006\022\170\023\215" +
    "\001\001\000\004\022\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\137\024\135" +
    "\042\206\001\001\000\006\021\214\024\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\354\001\001\000\006\065\343\066\346\001\001\000\004" +
    "\045\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\102\273\103\301\104\300\001\001" +
    "\000\004\104\336\001\001\000\004\046\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\311\001\001\000\004\104\310\001\001" +
    "\000\004\104\307\001\001\000\004\104\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\317\001\001\000\004\061\335\001\001" +
    "\000\002\001\001\000\004\061\334\001\001\000\004\061" +
    "\333\001\001\000\004\061\332\001\001\000\004\061\331" +
    "\001\001\000\004\061\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\070\u0103\103\u0101\104\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\070\u0113\103" +
    "\u0101\104\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u011e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\072\u012c\073\u012e\074\u012d" +
    "\075\u012b\076\u012a\077\u0129\100\u0126\101\u0133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\u0137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\103\u015f\104\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\103\u0163\104\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\103\u0167\104\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\103\u016c\104\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\103\u0170\104\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\103\u0174\104\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\u017a\055\u0179\001" +
    "\001\000\002\001\001\000\010\056\u017e\103\u0181\104\300" +
    "\001\001\000\002\001\001\000\006\053\u017c\055\u0179\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\056\u0184\103\u0181\104\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\u01a9\021\u01a8" +
    "\024\u01a5\030\u01ab\001\001\000\006\025\230\026\u01e3\001" +
    "\001\000\002\001\001\000\004\020\u01e0\001\001\000\004" +
    "\017\u01dd\001\001\000\002\001\001\000\014\012\u0191\014" +
    "\u01a1\021\u0190\024\u018a\030\u0194\001\001\000\006\022\170" +
    "\023\u01d3\001\001\000\016\012\u0191\013\u019e\014\u018e\021" +
    "\u0190\024\u018a\030\u0194\001\001\000\002\001\001\000\010" +
    "\015\u019b\016\145\064\143\001\001\000\006\027\u0195\031" +
    "\077\001\001\000\006\031\104\033\u0196\001\001\000\006" +
    "\032\u0197\034\110\001\001\000\004\034\112\001\001\000" +
    "\004\035\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\u0191\014\u01a1\021\u0190\024\u018a\030\u0194\001\001" +
    "\000\012\012\u01a9\021\u01a8\024\u01a5\030\u01ab\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\230\026\u01cd\001" +
    "\001\000\004\020\u01c8\001\001\000\004\017\u01c3\001\001" +
    "\000\006\022\170\023\u01bc\001\001\000\016\012\u0191\013" +
    "\u01b5\014\u018e\021\u0190\024\u018a\030\u0194\001\001\000\010" +
    "\015\u01b2\016\145\064\143\001\001\000\006\027\u01ac\031" +
    "\077\001\001\000\006\031\104\033\u01ad\001\001\000\006" +
    "\032\u01ae\034\110\001\001\000\004\034\112\001\001\000" +
    "\004\035\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\u0191\014\u01a1\021\u0190\024\u018a\030\u0194\001\001" +
    "\000\012\012\u01a9\021\u01a8\024\u01a5\030\u01ab\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\u01a9\021\u01a8" +
    "\024\u01a5\030\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private boolean pathImagen = false;
    private boolean botonId = false;
    private boolean botonTexto = false;
    private String tipoDato = "";
    private int tipoStruct = 0;
    private StructParrafo structParrafo;
    private StructTextoA structTextoA;
    private StructTextoB structTextoB;
    private StructImagen structImagen;
    private StructTabla structTabla;
    private StructBoton structBoton;
    private String identificadorStruct;

    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO - NO SE ESPERABA ESTE SIMBOLO", s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO IRRECUPERABLE - SIMBOLO NO RECONODIO", s.left, s.right));
    } 

    private void verificarParametrosImagen(){
        if(!pathImagen)
            Principal.errores.add(new Token("PATH", "ERROR SINTACTICO - IMAGEN - PARAMETRO PATH OBLIGATORIO OMITIDOS", 0, 0));
    } 

    private void verificarParametrosBoton(){
        if(!botonId)
            Principal.errores.add(new Token("ID", "ERROR SINTACTICO - BOTON - PARAMETRO ID OBLIGATORIO OMITIDO", 0, 0));
        if(!botonTexto)
            Principal.errores.add(new Token("NAME", "ERROR SINTACTICO - BOTON - PARAMETRO TEXTO OBLIGATORIO OMITIDO", 0, 0));
    } 

    private void agregarVariable(String a,Object b){
        Principal.variables.add(new Variable(tipoDato, a, b));
        switch(tipoDato){
            case "cadena":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "decimal":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + truncateDecimal((Double)b, 3) + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "entero":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "booleano":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + Boolean.valueOf(b.toString()) + "\t|\t" + tipoDato + "\t|\n");
                break;
        }
        Principal.txtVariables.append("\n\n");
        tipoDato = "";
    }

    private BigDecimal truncateDecimal(double x, int decimales){
        if ( x > 0) {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_FLOOR);
        } else {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_CEILING);
        }
    }

    private Boolean verificarAlineacion(String parametro){
        parametro = parametro.toLowerCase().replace("\"","");
        switch(parametro){
            case "izquierda": return true;
            case "derecha": return true;
            case "centrado": return true;
            case "justificado": return true;
        }
        Principal.errores.add(new Token("ALINEACION", "ERROR SINTACTICO - CREAR PARRAFO - PARAMETRO ALINEACION NO PERMITIDO", 0, 0));
        return false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= menorQue compi mayorQue B menorQue barra compi mayorQue aceptacion 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarPagina();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= menorQue compi mayorQue menorQue barra compi mayorQue aceptacion 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarPagina();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= B C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // C ::= menorQue cabecera mayorQue D menorQue barra cabecera mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarHead();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // C ::= menorQue cuerpo F I1 menorQue barra cuerpo mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= menorQue cabecera mayorQue menorQue barra cabecera mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.finalizarHead();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C ::= menorQue cuerpo F menorQue barra cuerpo mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D ::= D E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.escribirTitulo(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // D ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.escribirTitulo(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= menorQue titulo textoEntreEtiquetas barra titulo mayorQue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= menorQue titulo mayorQue menorQue barra titulo mayorQue 
            {
              String RESULT =null;
		
        RESULT = "";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // F ::= G mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // G ::= G H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarBGColor(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // G ::= H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.agregarBGColor(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("G",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // H ::= fondo igual textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("H",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // I ::= menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // I ::= menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // I ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // I ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I ::= menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I ::= menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // I ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // I ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= menorQue Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= menorQue inicioHS U interrogacion mayorQue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // I1 ::= I1 I 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // I1 ::= I 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I2 ::= espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I2",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // I3 ::= I3 I4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // I3 ::= I4 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I3",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I4 ::= menorQue I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I4 ::= menorQue I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I4 ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // I4 ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // I4 ::= menorQue textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // I4 ::= menorQue textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // I4 ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // I4 ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // I4 ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // I4 ::= I2 I3 menorQue barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // I4 ::= I2 I3 barra espacio 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarDiv();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // I4 ::= parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // I4 ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // I4 ::= textoA M barra textoA 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH1();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // I4 ::= textoB N barra textoB 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarH2();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // I4 ::= O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // I4 ::= P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // I4 ::= menorQue Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // I4 ::= Q0 Q R0 R menorQue barra tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarTabla();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I4",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // J ::= K textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // J ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // J ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // J ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("br");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // J ::= J textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoParrafo(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // J ::= J barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("br");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // K ::= K L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAlineacion(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // K ::= L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarAlineacion(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("K",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L ::= alineacion igual tipoAlineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // M ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // M ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N ::= mayorQue menorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2("");  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // O0 ::= imagen 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O0",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // O ::= O O1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // O ::= O1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // O1 ::= path igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        pathImagen = true;
        Principal.archivoHTML.agregarPathImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // O1 ::= alto igual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAltoImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // O1 ::= ancho igual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarAnchoImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("O1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // P0 ::= boton 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P0",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // P ::= P P1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // P ::= P1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // P1 ::= id igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        botonId = true;
        Principal.archivoHTML.agregarId(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // P1 ::= texto igual textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        botonTexto = true;
        Principal.archivoHTML.agregarTexto(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Q0 ::= tabla 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarTabla();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q0",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Q ::= Q Q1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Q ::= Q1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Q1 ::= borde igual booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarBorde(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Q1",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // R0 ::= mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.cerrarEtiquetaTabla();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // R ::= R R1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // R ::= R1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // R1 ::= menorQue R2 mayorQue S menorQue barra fila mayorQue 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarFila();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // R2 ::= fila 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // S ::= S S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // S ::= S1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // S1 ::= menorQue T3 T barra columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // S1 ::= menorQue T0 T barra columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // S1 ::= menorQue T3 T menorQue barra columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // S1 ::= menorQue T0 T menorQue barra columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // T0 ::= columna 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarColumna();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // T3 ::= columnaC 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.iniciarColumnaC();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // T ::= T T1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // T ::= T1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T1 ::= textoEntreEtiquetas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // T1 ::= menorQue barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T1 ::= barra salto 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.agreagarSalto("<br>");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T1 ::= menorQue parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T1 ::= parrafo J barra parrafo 
            {
              Object RESULT =null;
		
        Principal.archivoHTML.finalizarParrafo();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // T1 ::= menorQue O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // T1 ::= O0 O mayorQue menorQue barra imagen 
            {
              Object RESULT =null;
		
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // T1 ::= menorQue P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // T1 ::= P0 P mayorQue menorQue barra boton 
            {
              Object RESULT =null;
		
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // U ::= U U1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // U ::= U1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // U1 ::= dolar identificador igual V puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        agregarVariable(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // U1 ::= echo W puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Principal.txtConsola.append(a+"\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // U1 ::= numeral identificador igual X puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        switch(b){
            case 1: 
                Principal.structs.add(new Struct("parrafo" ,a ,structParrafo));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructParrafo\t|\n");
            break;
            case 2: 
                Principal.structs.add(new Struct("textoA" ,a ,structTextoA));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTextoA\t|\n");
            break;
            case 3: 
                Principal.structs.add(new Struct("textoB" ,a ,structTextoB));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTextoB\t|\n");
            break;
            case 4: 
                Principal.structs.add(new Struct("imagen" ,a ,structImagen));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructImagen\t|\n");
            break;
            case 5: 
                Principal.structs.add(new Struct("tabla" ,a ,structTabla));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTabla\t|\n");
            break;
            case 6: 
                Principal.structs.add(new Struct("boton" ,a ,structBoton));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTabla\t|\n");
            break;
        }
        Principal.txtStructs.append("\n\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // U1 ::= dolar identificador igual numeral U2 punto AH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        agregarVariable(a, b);
        identificadorStruct = "";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // U1 ::= numeral U2 punto AI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // U1 ::= numeral U2 punto insertar parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                break;
            case "textoA": ((StructTextoA)struct.getValor()).insertar();
                break;
            case "textoB": ((StructTextoB)struct.getValor()).insertar();
                break;
            case "imagen": ((StructImagen)struct.getValor()).insertar();
                break;
            case "tabla": ((StructTabla)struct.getValor()).insertar();
                break;
            case "boton": ((StructBoton)struct.getValor()).insertar();
                break;
            default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // U2 ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        identificadorStruct = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // V ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        tipoDato = "cadena";
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // V ::= V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            if(a instanceof Double){
                tipoDato = "decimal";
            }else if(a instanceof Integer){
                tipoDato = "entero";
            }
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // V ::= booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        tipoDato = "booleano";
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // V1 ::= V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // V2 ::= V2 mas V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a+(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a+(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // V2 ::= V2 menos V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a-(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a-(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // V2 ::= V2 multiplicacion V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a*(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a*(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // V2 ::= V2 division V2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a/(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a/(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // V2 ::= parentesisAbre V2 parentesisCierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // V2 ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = Integer.parseInt(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable int");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // V2 ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            try{
                RESULT = Double.parseDouble(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable double");
                RESULT = 0;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // W ::= W1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // W1 ::= W1 punto W1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // W1 ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // W1 ::= textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("W1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // X ::= X1 parentesisCierra 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // X1 ::= X2 parentesisAbre Y 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // X1 ::= X3 parentesisAbre Z 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // X1 ::= X4 parentesisAbre AA 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // X1 ::= X5 parentesisAbre AB 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // X1 ::= X6 parentesisAbre AC 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // X1 ::= X7 parentesisAbre AD 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // X2 ::= crearParrafo 
            {
              Integer RESULT =null;
		
        structParrafo = new StructParrafo();
        RESULT = 1;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // X3 ::= crearTextoA 
            {
              Integer RESULT =null;
		
        structTextoA = new StructTextoA();
        RESULT = 2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // X4 ::= crearTextoB 
            {
              Integer RESULT =null;
		
        structTextoB = new StructTextoB();
        RESULT = 3;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X4",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // X5 ::= crearImagen 
            {
              Integer RESULT =null;
		
        structImagen = new StructImagen();
        RESULT = 4;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X5",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // X6 ::= crearTabla 
            {
              Integer RESULT =null;
		
        structTabla = new StructTabla();
        RESULT = 5;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X6",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // X7 ::= crearBoton 
            {
              Integer RESULT =null;
		
        structBoton = new StructBoton();
        RESULT = 6;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X7",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Y ::= textoEntreComillas coma tipoAlineacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo = new StructParrafo(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Y ::= textoEntreComillas coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        if(verificarAlineacion(b))
            structParrafo = new StructParrafo(a,Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Y ::= dolar identificador coma tipoAlineacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo = new StructParrafo(Principal.retornarValorCadenaVariable(a),b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Y ::= dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(verificarAlineacion(b))
            structParrafo = new StructParrafo(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Y ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo.setContenido(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Y ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structParrafo.setContenido(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Z ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoA = new StructTextoA(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Z ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoA.setContenido(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AA ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoB = new StructTextoB(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AA ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTextoB.setContenido(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AB ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AB ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // AB ::= textoEntreComillas coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // AB ::= textoEntreComillas coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, b.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // AB ::= dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // AB ::= dolar identificador coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // AB ::= textoEntreComillas coma dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // AB ::= textoEntreComillas coma dolar identificador coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // AB ::= textoEntreComillas coma V1 coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, b.toString(), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // AB ::= textoEntreComillas coma V1 coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structImagen = new StructImagen(a, b.toString(), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // AB ::= dolar identificador coma dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AB ::= dolar identificador coma dolar identificador coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // AB ::= dolar identificador coma V1 coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString(), Principal.retornarValorCadenaVariable(c));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AB ::= dolar identificador coma V1 coma V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString(), c.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // AC ::= AC coma AC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AC ::= AF AE corcheteCierra 
            {
              Object RESULT =null;
		
        structTabla.agregarFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AC",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AD ::= textoEntreComillas coma textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(a,b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AD ::= textoEntreComillas coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(a, Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AD ::= dolar identificador coma textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(Principal.retornarValorCadenaVariable(a), b);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AD ::= dolar identificador coma dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structBoton = new StructBoton(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AD",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AF ::= corcheteAbre 
            {
              Object RESULT =null;
		
        structTabla.crearFila();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AF",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AE ::= AE coma AE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AE ::= textoEntreComillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AE ::= dolar identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(Principal.retornarValorCadenaVariable(a));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AE ::= booleano 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // AE ::= V1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        structTabla.agregarElementoAFila(a.toString());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AE",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AH ::= getContenido AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": RESULT = ((StructParrafo)struct.getValor()).getContenido();
                break;
            case "textoA": RESULT = ((StructTextoA)struct.getValor()).getContenido();
                break;
            case "textoB": RESULT = ((StructTextoB)struct.getValor()).getContenido();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AH ::= getAlineacion AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": RESULT = ((StructParrafo)struct.getValor()).getAlineacion();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AH ::= getPath AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getPath();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AH ::= getAncho AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getAncho();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "entero";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // AH ::= getAlto AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getAlto();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "entero";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // AH ::= getTexto AM 
            {
              Object RESULT =null;
		
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "boton": RESULT = ((StructBoton)struct.getValor()).getTexto();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AH",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // AI ::= setContenido parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "parrafo": 
                StructParrafo strParrafo = (StructParrafo)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strParrafo.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("parrafo", identificadorStruct, strParrafo));
                identificadorStruct = "";
                break;
            case "textoA": 
                StructTextoA strTextoA = (StructTextoA)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTextoA.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("textoA", identificadorStruct, strTextoA));
                identificadorStruct = "";
                break;
            case "textoB": 
                StructTextoB strTextoB = (StructTextoB)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTextoB.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("textoB", identificadorStruct, strTextoB));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // AI ::= setAlineacion parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "parrafo": 
                StructParrafo strParrafo = (StructParrafo)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strParrafo.setAlineacion(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("parrafo", identificadorStruct, strParrafo));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // AI ::= setPath parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setPath(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // AI ::= setAlto parentesisAbre AK parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setAlto(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // AI ::= setAncho parentesisAbre AK parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setAncho(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // AI ::= setBorde parentesisAbre AL parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "tabla": 
                StructTabla strTabla = (StructTabla)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTabla.setBorde(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("tabla", identificadorStruct, strTabla));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // AI ::= setTexto parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "boton": 
                StructBoton strBoton = (StructBoton)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strBoton.setTexto(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("boton", identificadorStruct, strBoton));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AI ::= clickBoton parentesisAbre AJ parentesisCierra puntoYComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "boton": 
                StructBoton strBoton = (StructBoton)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strBoton.click(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("boton", identificadorStruct, strBoton));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AI",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AJ ::= textoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AJ ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // AJ ::= tipoAlineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AJ",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AK ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AK",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AK ::= V1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AK",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // AL ::= dolar identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = Principal.retornarValorCadenaVariable(a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AL",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // AL ::= booleano 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AL",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // AM ::= parentesisAbre parentesisCierra puntoYComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AM",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
