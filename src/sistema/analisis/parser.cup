package sistema.analisis;

import java_cup.runtime.*;
import sistema.bean.Token;
import sistema.bean.Variable;
import sistema.bean.Struct;
import sistema.bean.struct.*;
import sistema.ui.Principal;

import java.math.BigDecimal;

parser code
{:
    private boolean pathImagen = false;
    private boolean botonId = false;
    private boolean botonTexto = false;
    private String tipoDato = "";
    private int tipoStruct = 0;
    private StructParrafo structParrafo;
    private StructTextoA structTextoA;
    private StructTextoB structTextoB;
    private StructImagen structImagen;
    private StructTabla structTabla;
    private StructBoton structBoton;
    private String identificadorStruct;

    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO - NO SE ESPERABA ESTE SIMBOLO", s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        Principal.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO IRRECUPERABLE - SIMBOLO NO RECONODIO", s.left, s.right));
    } 

    private void verificarParametrosImagen(){
        if(!pathImagen)
            Principal.errores.add(new Token("PATH", "ERROR SINTACTICO - IMAGEN - PARAMETRO PATH OBLIGATORIO OMITIDOS", 0, 0));
    } 

    private void verificarParametrosBoton(){
        if(!botonId)
            Principal.errores.add(new Token("ID", "ERROR SINTACTICO - BOTON - PARAMETRO ID OBLIGATORIO OMITIDO", 0, 0));
        if(!botonTexto)
            Principal.errores.add(new Token("NAME", "ERROR SINTACTICO - BOTON - PARAMETRO TEXTO OBLIGATORIO OMITIDO", 0, 0));
    } 

    private void agregarVariable(String a,Object b){
        Principal.variables.add(new Variable(tipoDato, a, b));
        switch(tipoDato){
            case "cadena":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "decimal":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + truncateDecimal((Double)b, 3) + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "entero":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + b.toString() + "\t|\t" + tipoDato + "\t|\n");
                break;
            case "booleano":
                Principal.txtVariables.append("|\t" + a + "\t|\t" + Boolean.valueOf(b.toString()) + "\t|\t" + tipoDato + "\t|\n");
                break;
        }
        Principal.txtVariables.append("\n\n");
        tipoDato = "";
    }

    private BigDecimal truncateDecimal(double x, int decimales){
        if ( x > 0) {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_FLOOR);
        } else {
            return new BigDecimal(String.valueOf(x)).setScale(decimales, BigDecimal.ROUND_CEILING);
        }
    }

    private Boolean verificarAlineacion(String parametro){
        parametro = parametro.toLowerCase().replace("\"","");
        switch(parametro){
            case "izquierda": return true;
            case "derecha": return true;
            case "centrado": return true;
            case "justificado": return true;
        }
        Principal.errores.add(new Token("ALINEACION", "ERROR SINTACTICO - CREAR PARRAFO - PARAMETRO ALINEACION NO PERMITIDO", 0, 0));
        return false;
    }
:}

terminal String aceptacion, mayorQue, menorQue, barra, igual;
terminal String compi, cabecera, cuerpo, titulo, fondo, espacio, parrafo, alineacion, tipoAlineacion, salto, textoA, textoB, tabla, fila, columna, columnaC;
terminal String imagen, path, alto, ancho, boton, texto, id, borde;
terminal String textoEntreEtiquetas, textoEntreComillas, numero, booleano, parentesisAbre, parentesisCierra, punto, interrogacion;
terminal String inicioHS, dolar, puntoYComa, mas, menos, multiplicacion, division, identificador, repetir, controlIf, controlElse, llaveAbre, llaveCierra;
terminal String igualIgual, menorIgual, mayorIgual, noIgual, and, or, not, echo, coma;
terminal String entero ,decimal, numeral,crearParrafo, setAlineacion, getAlineacion, setContenido, getContenido, insertar;
terminal String crearTextoA, crearTextoB, crearImagen, getPath, setPath, getAlto, setAlto, getAncho, setAncho, crearTabla;
terminal String setBorde, crearBoton, setTexto, getTexto, clickBoton, corcheteAbre, corcheteCierra;

non terminal A, B, C, D, F, G, I, I1, I2, I3, I4, J, K, M, N, O0, O1, O, P0, P1, P, Q, Q0, Q1, R, R0, R1, R2, S, S1, T, T0, T1, T3, U, U1, U2, Y;
non terminal Z, AA, AB, AC, AD, AF, AE, AG, AI, AM;
non terminal String E, H, L, W, W1, AJ, AK, AL;
non terminal Integer X, X1, X2, X3, X4, X5, X6, X7;
non terminal Object V, V1, V2, AH;

precedence left mas, menos, punto, coma;
precedence left multiplicacion, division;
precedence left parentesisAbre, parentesisCierra;


start with A;

A::= menorQue compi mayorQue B menorQue barra compi mayorQue aceptacion
    {:
        Principal.archivoHTML.finalizarPagina();
    :}
    |menorQue compi mayorQue menorQue barra compi mayorQue aceptacion
    {:
        Principal.archivoHTML.finalizarPagina();
    :}
;

B::= B C
    |C 
;

C::= menorQue cabecera mayorQue D menorQue barra cabecera mayorQue
    {:
        Principal.archivoHTML.finalizarHead();
    :}
    |menorQue cuerpo F I1 menorQue barra cuerpo mayorQue
    {:
        Principal.archivoHTML.finalizarBody();
    :}
    |menorQue cabecera mayorQue menorQue barra cabecera mayorQue
    {:
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.finalizarHead();
    :}
    |menorQue cuerpo F menorQue barra cuerpo mayorQue
    {:
        Principal.archivoHTML.finalizarBody();
    :}
;

D::= D E:a
    {:
        Principal.archivoHTML.escribirTitulo(a);
    :}
    |E:a 
    {:
        Principal.archivoHTML.iniciarHead();
        Principal.archivoHTML.escribirTitulo(a);
    :}
;

E::= menorQue titulo textoEntreEtiquetas:a barra titulo mayorQue
    {:
        RESULT = a;
    :}
    |menorQue titulo mayorQue menorQue barra titulo mayorQue
    {:
        RESULT = "";
    :}
;

F::= G mayorQue
    {:
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    :}
    |mayorQue
    {:
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.cerrarEtiquetaInicialBody();
    :}
;

G::= G H:a
    {:
        Principal.archivoHTML.agregarBGColor(a);
    :}
    |H:a
    {:
        Principal.archivoHTML.iniciarBody();
        Principal.archivoHTML.agregarBGColor(a);
    :}
;

H::= fondo igual textoEntreComillas:a
    {:
        RESULT = a;
    :}
;

I::= menorQue I2 I3 menorQue barra espacio
    {:
        Principal.archivoHTML.finalizarDiv();  
    :}
    |menorQue I2 I3 barra espacio
    {:
        Principal.archivoHTML.finalizarDiv();  
    :}
    |menorQue parrafo J barra parrafo 
    {:
        Principal.archivoHTML.finalizarParrafo();  
    :}
    |menorQue barra salto
    {:
        Principal.archivoHTML.agreagarSalto("<br>");
    :}
    |menorQue textoA M barra textoA 
    {:
        Principal.archivoHTML.finalizarH1();  
    :}
    |menorQue textoB N barra textoB 
    {:
        Principal.archivoHTML.finalizarH2();  
    :}
    |menorQue O0 O mayorQue menorQue barra imagen 
    {:
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    :}
    |menorQue P0 P mayorQue menorQue barra boton 
    {:
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    :}
    |menorQue Q0 Q R0 R menorQue barra tabla 
    {:
        Principal.archivoHTML.finalizarTabla();  
    :}
    |menorQue inicioHS U interrogacion mayorQue
;

I1::= I1 I 
    |I
;

I2::= espacio
    {:
        Principal.archivoHTML.iniciarDiv();  
    :}
;

I3::= I3 I4  
    |I4
;

I4::= menorQue I2 I3 menorQue barra espacio
    {:
        Principal.archivoHTML.finalizarDiv();  
    :}
    |menorQue I2 I3 barra espacio
    {:
        Principal.archivoHTML.finalizarDiv();  
    :}
    |menorQue parrafo J barra parrafo 
    {:
        Principal.archivoHTML.finalizarParrafo();  
    :}
    |menorQue barra salto 
    {:
        Principal.archivoHTML.agreagarSalto("<br>");
    :}
    |menorQue textoA M barra textoA 
    {:
        Principal.archivoHTML.finalizarH1();  
    :}
    |menorQue textoB N barra textoB 
    {:
        Principal.archivoHTML.finalizarH2();  
    :}
    |menorQue O0 O mayorQue menorQue barra imagen 
    {:
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    :}
    |menorQue P0 P mayorQue menorQue barra boton 
    {:
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    :}
    |textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    :}
    |I2 I3 menorQue barra espacio
    {:
        Principal.archivoHTML.finalizarDiv();  
    :}
    |I2 I3 barra espacio
    {:
        Principal.archivoHTML.finalizarDiv();  
    :}
    |parrafo J barra parrafo 
    {:
        Principal.archivoHTML.finalizarParrafo();  
    :}
    |barra salto 
    {:
        Principal.archivoHTML.agreagarSalto("<br>");
    :}
    |textoA M barra textoA
    {:
        Principal.archivoHTML.finalizarH1();  
    :}
    |textoB N barra textoB 
    {:
        Principal.archivoHTML.finalizarH2();  
    :}
    |O0 O mayorQue menorQue barra imagen 
    {:
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    :}
    |P0 P mayorQue menorQue barra boton 
    {:
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    :}
    |menorQue Q0 Q R0 R menorQue barra tabla 
    {:
        Principal.archivoHTML.finalizarTabla();  
    :}
    |Q0 Q R0 R menorQue barra tabla 
    {:
        Principal.archivoHTML.finalizarTabla();  
    :}
;

J::= K textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.agregarTextoParrafo(a);  
    :}
    |textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo(a);  
    :}
    |mayorQue menorQue
    {:
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarTextoParrafo("");  
    :}
    |barra salto
    {:
        Principal.archivoHTML.agreagarSalto("br");
    :}
    |J textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.agregarTextoParrafo(a);  
    :}
    |J barra salto
    {:
        Principal.archivoHTML.agreagarSalto("br");
    :}
;

K::= K L:a 
    {:
        Principal.archivoHTML.agregarAlineacion(a);
    :}
    |L:a
    {:
        Principal.archivoHTML.iniciarParrafo();
        Principal.archivoHTML.agregarAlineacion(a);
    :}
;

L::= alineacion igual tipoAlineacion:a
    {:
        RESULT = a;
    :}
;

M::= textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1(a);  
    :}
    |mayorQue menorQue
    {:
        Principal.archivoHTML.iniciarH1();
        Principal.archivoHTML.agregarTextoH1("");  
    :}
;

N::= textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2(a);  
    :}
    |mayorQue menorQue
    {:
        Principal.archivoHTML.iniciarH2();
        Principal.archivoHTML.agregarTextoH2("");  
    :}
;

O0::= imagen
    {:
        Principal.archivoHTML.iniciarImagen();  
    :}
;

O::= O O1
    |O1
;

O1::= path igual textoEntreComillas:a
    {:
        pathImagen = true;
        Principal.archivoHTML.agregarPathImagen(a);
    :}
    |alto igual numero:a
    {:
        Principal.archivoHTML.agregarAltoImagen(a);
    :}
    |ancho igual numero:a
    {:
        Principal.archivoHTML.agregarAnchoImagen(a);
    :}
;

P0::= boton 
    {:
        Principal.archivoHTML.iniciarBoton();  
    :}
;

P::= P P1
    |P1
;

P1::= id igual textoEntreComillas:a
    {:
        botonId = true;
        Principal.archivoHTML.agregarId(a);  
    :}
    |texto igual textoEntreComillas:a
    {:
        botonTexto = true;
        Principal.archivoHTML.agregarTexto(a);  
    :}
;

Q0::= tabla
    {:
        Principal.archivoHTML.iniciarTabla();
    :}
;

Q::= Q Q1
    |Q1
;

Q1::= borde igual booleano:a
    {:
        Principal.archivoHTML.agregarBorde(a);
    :}
;

R0::= mayorQue
    {:
        Principal.archivoHTML.cerrarEtiquetaTabla();
    :}
;

R::= R R1
    |R1
;

R1::= menorQue R2 mayorQue S menorQue barra fila mayorQue
    {:
        Principal.archivoHTML.finalizarFila();  
    :}
;

R2::= fila
    {:
        Principal.archivoHTML.iniciarFila();
    :}
;

S::= S S1
    |S1
;

S1::= menorQue T3 T barra columnaC
    {:
        Principal.archivoHTML.finalizarColumnaC();
    :}
    |menorQue T0 T barra columna
    {:
        Principal.archivoHTML.finalizarColumna();
    :}
    |menorQue T3 T menorQue barra columnaC
    {:
        Principal.archivoHTML.finalizarColumnaC();
    :}
    |menorQue T0 T menorQue barra columna
    {:
        Principal.archivoHTML.finalizarColumna();
    :}
;

T0::= columna
    {:
        Principal.archivoHTML.iniciarColumna();
    :}
;

T3::= columnaC
    {:
        Principal.archivoHTML.iniciarColumnaC();
    :}
;

T::= T T1
    |T1
;

T1::= textoEntreEtiquetas:a
    {:
        Principal.archivoHTML.agregarTextoEntreEtiquetas(a);  
    :} 
    |menorQue barra salto 
    {:
        Principal.archivoHTML.agreagarSalto("<br>");
    :}
    |barra salto 
    {:
        Principal.archivoHTML.agreagarSalto("<br>");
    :}
    |menorQue parrafo J barra parrafo 
    {:
        Principal.archivoHTML.finalizarParrafo();  
    :}
    |parrafo J barra parrafo 
    {:
        Principal.archivoHTML.finalizarParrafo();  
    :}
    |menorQue O0 O mayorQue menorQue barra imagen 
    {:
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    :}
    |O0 O mayorQue menorQue barra imagen 
    {:
        verificarParametrosImagen();
        pathImagen = false;
        Principal.archivoHTML.finalizarImagen();  
    :}
    |menorQue P0 P mayorQue menorQue barra boton 
    {:
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    :}
    |P0 P mayorQue menorQue barra boton 
    {:
        verificarParametrosBoton();
        botonId = false;
        botonTexto = false;
        Principal.archivoHTML.finalizarBoton();  
    :}
;

U::= U U1
    |U1
;

U1::= dolar identificador:a igual V:b puntoYComa
    {:
        agregarVariable(a,b);
    :}
    |echo W:a puntoYComa
    {:
        Principal.txtConsola.append(a+"\n");
    :}
    |numeral identificador:a igual X:b puntoYComa
    {:
        switch(b){
            case 1: 
                Principal.structs.add(new Struct("parrafo" ,a ,structParrafo));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructParrafo\t|\n");
            break;
            case 2: 
                Principal.structs.add(new Struct("textoA" ,a ,structTextoA));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTextoA\t|\n");
            break;
            case 3: 
                Principal.structs.add(new Struct("textoB" ,a ,structTextoB));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTextoB\t|\n");
            break;
            case 4: 
                Principal.structs.add(new Struct("imagen" ,a ,structImagen));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructImagen\t|\n");
            break;
            case 5: 
                Principal.structs.add(new Struct("tabla" ,a ,structTabla));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTabla\t|\n");
            break;
            case 6: 
                Principal.structs.add(new Struct("boton" ,a ,structBoton));
                Principal.txtStructs.append("|\t" + a + "\t|\tstruct\t|\tstructTabla\t|\n");
            break;
        }
        Principal.txtStructs.append("\n\n");
    :}
    |dolar identificador:a igual numeral U2 punto AH:b
    {:
        agregarVariable(a, b);
        identificadorStruct = "";
    :}
    |numeral U2 punto AI 
    |numeral U2 punto insertar parentesisAbre parentesisCierra puntoYComa
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": ((StructParrafo)struct.getValor()).insertar();
                break;
            case "textoA": ((StructTextoA)struct.getValor()).insertar();
                break;
            case "textoB": ((StructTextoB)struct.getValor()).insertar();
                break;
            case "imagen": ((StructImagen)struct.getValor()).insertar();
                break;
            case "tabla": ((StructTabla)struct.getValor()).insertar();
                break;
            case "boton": ((StructBoton)struct.getValor()).insertar();
                break;
            default: Principal.errores.add(new Token("ESTRUCTURA INVALIDA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
;

U2::= identificador:a
    {:
        identificadorStruct = a;
    :}
;

V::= textoEntreComillas:a
    {:
        tipoDato = "cadena";
        RESULT = a;
    :}
    |V1:a
        {:
            if(a instanceof Double){
                tipoDato = "decimal";
            }else if(a instanceof Integer){
                tipoDato = "entero";
            }
            RESULT = a;
        :}
    |booleano:a
    {:
        tipoDato = "booleano";
        RESULT = a;
    :}
;

V1::= V2:a
    {:
        RESULT = a;
    :}
;

V2::= V2:a mas V2:b   
        {:
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a+(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a+(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a+(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        :} 
    |V2:a menos V2:b
        {:
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a-(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a-(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a-(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        :}
    |V2:a multiplicacion V2:b
        {:
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a*(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a*(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a*(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        :}
    |V2:a division V2:b
        {:
            try{
                if(a instanceof Double){
                    if(b instanceof Integer)
                        RESULT = (Double)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Double)a/(Double)b;
                }else if(a instanceof Integer){ 
                    if(b instanceof Integer)
                        RESULT = (Integer)a/(Integer)b;
                    else if(b instanceof Double)
                        RESULT = (Integer)a/(Double)b;
                }   
            }catch(Exception ex){System.out.println("Error al realizar division");}
        :}
    |parentesisAbre V2:a parentesisCierra
        {:
            RESULT = a;
        :}
    |entero:a
        {:
            try{
                RESULT = Integer.parseInt(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable int");
                RESULT = 0;
            }
        :}
    |decimal:a
        {:
            try{
                RESULT = Double.parseDouble(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable double");
                RESULT = 0;
            }
        :}
;

W::= W1:a
    {:
        RESULT = a;
    :}
;

W1::= W1:a punto W1:b
    {:
        RESULT = a + b;
    :}
    |dolar identificador:a    
    {:
        RESULT = Principal.retornarValorCadenaVariable(a);
    :}
    |textoEntreComillas:a
    {:
        RESULT = a;
    :}   
;

X::= X1:a parentesisCierra
    {:
            RESULT = a;
    :}
;

X1::= X2:a parentesisAbre Y
    {:
        RESULT = a;
    :}
    |X3:a parentesisAbre Z
    {:
        RESULT = a;
    :}
    |X4:a parentesisAbre AA
    {:
        RESULT = a;
    :}
    |X5:a parentesisAbre AB
    {:
        RESULT = a;
    :}
    |X6:a parentesisAbre AC
    {:
        RESULT = a;
    :}
    |X7:a parentesisAbre AD
    {:
        RESULT = a;
    :}
;

X2::= crearParrafo
    {:
        structParrafo = new StructParrafo();
        RESULT = 1;
    :}
;

X3::= crearTextoA
    {:
        structTextoA = new StructTextoA();
        RESULT = 2;
    :}
;

X4::= crearTextoB
    {:
        structTextoB = new StructTextoB();
        RESULT = 3;
    :}
;

X5::= crearImagen
    {:
        structImagen = new StructImagen();
        RESULT = 4;
    :}
;

X6::=crearTabla 
    {:
        structTabla = new StructTabla();
        RESULT = 5;
    :}
;

X7::= crearBoton 
    {:
        structBoton = new StructBoton();
        RESULT = 6;
    :}
;

Y::= textoEntreComillas:a coma tipoAlineacion:b
    {:
        structParrafo = new StructParrafo(a,b);
    :}
    |textoEntreComillas:a coma dolar identificador:b
    {:  
        if(verificarAlineacion(b))
            structParrafo = new StructParrafo(a,Principal.retornarValorCadenaVariable(b));
    :}
    |dolar identificador:a coma tipoAlineacion:b
    {:
        structParrafo = new StructParrafo(Principal.retornarValorCadenaVariable(a),b);
    :}
    |dolar identificador:a coma dolar identificador:b
    {:
        if(verificarAlineacion(b))
            structParrafo = new StructParrafo(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    :}
    |textoEntreComillas:a
    {:
        structParrafo.setContenido(a);
    :}
    |dolar identificador:a
    {:
        structParrafo.setContenido(Principal.retornarValorCadenaVariable(a));
    :}
;

Z::= textoEntreComillas:a
    {:
        structTextoA = new StructTextoA(a);
    :}
    |dolar identificador:a
    {:
        structTextoA.setContenido(Principal.retornarValorCadenaVariable(a));
    :}
;

AA::= textoEntreComillas:a
    {:
        structTextoB = new StructTextoB(a);
    :}
    |dolar identificador:a
    {:
        structTextoB.setContenido(Principal.retornarValorCadenaVariable(a));
    :}
;

AB::= textoEntreComillas:a
    {:
        structImagen = new StructImagen(a);
    :}
    |dolar identificador:a
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a));
    :}
    |textoEntreComillas:a coma dolar identificador:b
    {:
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b));
    :}
    |textoEntreComillas:a coma V1:b
    {:
        structImagen = new StructImagen(a, b.toString());
    :}
    |dolar identificador:a coma dolar identificador:b
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    :}
    |dolar identificador:a coma V1:b
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString());
    :}
    |textoEntreComillas:a coma dolar identificador:b coma dolar identificador:c
    {:
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b), Principal.retornarValorCadenaVariable(c));
    :}
    |textoEntreComillas:a coma dolar identificador:b coma V1:c
    {:
        structImagen = new StructImagen(a, Principal.retornarValorCadenaVariable(b), c.toString());
    :}
    |textoEntreComillas:a coma V1:b coma dolar identificador:c
    {:
        structImagen = new StructImagen(a, b.toString(), Principal.retornarValorCadenaVariable(c));
    :}
    |textoEntreComillas:a coma V1:b coma V1:c
    {:
        structImagen = new StructImagen(a, b.toString(), c.toString());
    :}
    |dolar identificador:a coma dolar identificador:b coma dolar identificador:c
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b), Principal.retornarValorCadenaVariable(c));
    :}
    |dolar identificador:a coma dolar identificador:b coma V1:c
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b), c.toString());
    :}
    |dolar identificador:a coma V1:b coma dolar identificador:c
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString(), Principal.retornarValorCadenaVariable(c));
    :}
    |dolar identificador:a coma V1:b coma V1:c
    {:  
        structImagen = new StructImagen(Principal.retornarValorCadenaVariable(a), b.toString(), c.toString());
    :}
;

AC::= AC coma AC
    |AF AE corcheteCierra 
    {:
        structTabla.agregarFila();
    :}
;

AD::= textoEntreComillas:a coma textoEntreComillas:b
    {:
        structBoton = new StructBoton(a,b);
    :}
    |textoEntreComillas:a coma dolar identificador:b
    {:
        structBoton = new StructBoton(a, Principal.retornarValorCadenaVariable(b));
    :}
    |dolar identificador:a coma textoEntreComillas:b
    {:
        structBoton = new StructBoton(Principal.retornarValorCadenaVariable(a), b);
    :}
    |dolar identificador:a coma dolar identificador:b
    {:
        structBoton = new StructBoton(Principal.retornarValorCadenaVariable(a), Principal.retornarValorCadenaVariable(b));
    :}
;

AF::= corcheteAbre
    {:
        structTabla.crearFila();
    :}
;

AE::= AE coma AE
    |textoEntreComillas:a
    {:
        structTabla.agregarElementoAFila(a);
    :}
    |dolar identificador:a
    {:
        structTabla.agregarElementoAFila(Principal.retornarValorCadenaVariable(a));
    :}
    |booleano:a
    {:
        structTabla.agregarElementoAFila(a);
    :}
    |V1:a
    {:
        structTabla.agregarElementoAFila(a.toString());
    :}
;

AH::= getContenido AM
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": RESULT = ((StructParrafo)struct.getValor()).getContenido();
                break;
            case "textoA": RESULT = ((StructTextoA)struct.getValor()).getContenido();
                break;
            case "textoB": RESULT = ((StructTextoB)struct.getValor()).getContenido();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    :}
    |getAlineacion AM
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "parrafo": RESULT = ((StructParrafo)struct.getValor()).getAlineacion();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    :}
    |getPath AM
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getPath();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    :}
    |getAncho AM
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getAncho();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "entero";
    :}
    |getAlto AM
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "imagen": RESULT = ((StructImagen)struct.getValor()).getAlto();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "entero";
    :}
    |getTexto AM
    {:
        Struct struct = Principal.retornarStruct(identificadorStruct);
        switch(struct.getTipo()){
            case "boton": RESULT = ((StructBoton)struct.getValor()).getTexto();
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
        tipoDato = "cadena";
    :}
;

AI::= setContenido parentesisAbre AJ:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "parrafo": 
                StructParrafo strParrafo = (StructParrafo)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strParrafo.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("parrafo", identificadorStruct, strParrafo));
                identificadorStruct = "";
                break;
            case "textoA": 
                StructTextoA strTextoA = (StructTextoA)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTextoA.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("textoA", identificadorStruct, strTextoA));
                identificadorStruct = "";
                break;
            case "textoB": 
                StructTextoB strTextoB = (StructTextoB)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTextoB.setContenido(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("textoB", identificadorStruct, strTextoB));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |setAlineacion parentesisAbre AJ:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "parrafo": 
                StructParrafo strParrafo = (StructParrafo)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strParrafo.setAlineacion(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("parrafo", identificadorStruct, strParrafo));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |setPath parentesisAbre AJ:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setPath(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |setAlto parentesisAbre AK:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setAlto(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |setAncho parentesisAbre AK:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "imagen": 
                StructImagen strImagen = (StructImagen)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strImagen.setAncho(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("imagen", identificadorStruct, strImagen));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |setBorde parentesisAbre AL:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "tabla": 
                StructTabla strTabla = (StructTabla)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strTabla.setBorde(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("tabla", identificadorStruct, strTabla));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |setTexto parentesisAbre AJ:a parentesisCierra puntoYComa 
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "boton": 
                StructBoton strBoton = (StructBoton)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strBoton.setTexto(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("boton", identificadorStruct, strBoton));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
    |clickBoton parentesisAbre AJ:a parentesisCierra puntoYComa
    {:
        switch(Principal.retornarStruct(identificadorStruct).getTipo()){
            case "boton": 
                StructBoton strBoton = (StructBoton)(Principal.structs.get(Principal.indiceStruct(identificadorStruct)).getValor());
                strBoton.click(a);
                Principal.structs.set(Principal.indiceStruct(identificadorStruct), new Struct("boton", identificadorStruct, strBoton));
                identificadorStruct = "";
                break;
            default: Principal.errores.add(new Token("NO EXISTE FUNCION PARA ESTA ESTRUCTURA", "ERROR SINTACTICO - FUNCION NO ENCONTRADA", 0, 0));
                break;
        }
    :}
;

AJ::= textoEntreComillas:a
    {:
        RESULT = a;
    :}
    |dolar identificador:a
    {:
        RESULT = Principal.retornarValorCadenaVariable(a);
    :}
    |tipoAlineacion:a
    {:
        RESULT = a;
    :}
;

AK::= dolar identificador:a
    {:
        RESULT = Principal.retornarValorCadenaVariable(a);
    :}
    |V1:a
    {:
        RESULT = a.toString();
    :}
;

AL::= dolar identificador:a
    {:
        RESULT = Principal.retornarValorCadenaVariable(a);
    :}
    |booleano:a
    {:
        RESULT = a;
    :}
; 


AM::= parentesisAbre parentesisCierra puntoYComa
;