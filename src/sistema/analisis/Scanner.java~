/* The following code was generated by JFlex 1.6.1 */

package sistema.analisis;

/*impor java_cup.runtime.Symbol;*/
import sistema.bean.Token;
import main.Main;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int HSCRIPT = 4;
  public static final int CADENA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2, 78,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  5, 15, 75, 63,  0, 73,  0, 67, 68,  8, 64,  0, 65, 11,  7, 
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0, 66,  4, 14,  6, 16, 
     0, 28, 30, 18, 52, 32, 44, 48, 58, 26, 60, 76, 40, 22, 50, 20, 
    24, 56, 34, 42, 36, 38,  0,  0, 46,  0, 54, 71, 62, 72,  0, 13, 
     0, 29, 31, 19, 53, 33, 45, 49, 59, 27, 61, 77, 41, 23, 51, 21, 
    25, 57, 35, 43, 37, 39, 12, 12, 47, 12, 55, 69, 74, 70, 17,  0, 
     0,  0,  0,  0,  0, 78,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\13\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\7\1\25"+
    "\1\26\1\27\1\30\1\31\1\1\1\26\1\1\1\26"+
    "\1\1\1\26\1\1\1\26\1\1\1\26\1\1\1\26"+
    "\1\1\1\26\1\1\1\26\1\1\1\26\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\1\1\44\1\45\2\0\1\46\6\0\1\47\17\0"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\3"+
    "\2\0\1\57\2\0\2\26\1\60\1\0\1\60\1\26"+
    "\2\0\2\26\1\0\2\26\1\0\2\26\1\0\1\26"+
    "\2\61\1\62\1\63\32\0\1\3\2\0\2\64\2\0"+
    "\2\26\1\0\1\26\2\0\2\26\1\0\2\26\1\0"+
    "\2\26\1\0\1\26\6\0\1\65\3\0\1\66\7\0"+
    "\1\67\2\0\1\70\6\0\2\26\1\0\1\26\1\71"+
    "\1\72\1\71\1\72\1\0\1\26\1\67\5\0\6\26"+
    "\5\0\5\26\1\73\10\0\1\74\1\75\1\76\2\0"+
    "\1\77\1\100\1\101\1\102\1\103\4\0\2\26\1\0"+
    "\1\26\1\0\1\26\6\0\6\26\1\103\6\0\6\26"+
    "\3\0\1\104\1\0\1\105\3\0\1\106\1\107\1\110"+
    "\7\0\5\26\1\0\1\26\1\0\1\26\7\0\7\26"+
    "\7\0\7\26\1\111\2\0\1\112\2\0\1\113\1\114"+
    "\7\0\6\26\1\0\1\26\2\115\1\0\1\116\1\0"+
    "\1\117\3\0\1\26\1\116\1\26\1\117\3\26\1\0"+
    "\1\120\1\0\1\121\3\0\1\26\1\120\1\26\1\121"+
    "\3\26\1\122\1\123\1\124\11\0\6\26\2\125\2\0"+
    "\1\126\1\127\1\130\2\26\1\126\1\127\1\130\2\0"+
    "\1\131\1\132\1\133\2\26\1\131\1\132\1\133\1\134"+
    "\10\0\6\26\2\0\2\26\2\0\2\26\1\135\3\0"+
    "\1\136\1\137\1\0\1\140\2\26\1\136\1\137\1\26"+
    "\1\140\2\0\2\26\2\0\2\26\1\141\1\0\1\142"+
    "\1\143\1\144\1\26\1\142\1\143\1\144\2\0\2\26"+
    "\2\0\2\26\2\145\1\146\1\0\1\146\1\26\1\147"+
    "\1\0\1\147\1\26\2\150\2\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u013c\0\u013c"+
    "\0\u01da\0\u0229\0\u013c\0\u013c\0\u0278\0\u013c\0\u013c\0\u013c"+
    "\0\u013c\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u013c\0\u062c\0\u013c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u013c\0\u0806\0\u0855\0\u013c"+
    "\0\u08a4\0\u08f3\0\u013c\0\u013c\0\u0942\0\u0991\0\u09e0\0\u0a2f"+
    "\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7"+
    "\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u013c\0\u013c"+
    "\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c"+
    "\0\u0ed0\0\u0f1f\0\u013c\0\u013c\0\u0f6e\0\u0229\0\u013c\0\u0fbd"+
    "\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u013c\0\u1197\0\u11e6"+
    "\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e"+
    "\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u013c\0\u013c\0\u013c"+
    "\0\u013c\0\u013c\0\u013c\0\u013c\0\u1638\0\u1687\0\u16d6\0\u013c"+
    "\0\u1725\0\u1774\0\u17c3\0\u1812\0\u013c\0\u1861\0\u08a4\0\u18b0"+
    "\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28"+
    "\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u013c\0\u08a4\0\u013c\0\u013c"+
    "\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc"+
    "\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154"+
    "\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc"+
    "\0\u241b\0\u246a\0\u24b9\0\u2508\0\u2557\0\u013c\0\u25a6\0\u25f5"+
    "\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d"+
    "\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u2ae5"+
    "\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u013c"+
    "\0\u2d5d\0\u2dac\0\u2dfb\0\u013c\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37"+
    "\0\u2f86\0\u2fd5\0\u3024\0\u013c\0\u3073\0\u30c2\0\u013c\0\u3111"+
    "\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389"+
    "\0\u33d8\0\u013c\0\u013c\0\u08a4\0\u08a4\0\u3427\0\u3476\0\u08a4"+
    "\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee"+
    "\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966"+
    "\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u013c\0\u3b40\0\u3b8f"+
    "\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u013c\0\u013c"+
    "\0\u013c\0\u3db8\0\u3e07\0\u013c\0\u3e56\0\u013c\0\u013c\0\u013c"+
    "\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f\0\u40ce"+
    "\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u4346"+
    "\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520\0\u08a4\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u013c\0\u4a10"+
    "\0\u013c\0\u4a5f\0\u4aae\0\u4afd\0\u013c\0\u013c\0\u013c\0\u4b4c"+
    "\0\u4b9b\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4"+
    "\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c"+
    "\0\u508b\0\u50da\0\u5129\0\u5178\0\u51c7\0\u5216\0\u5265\0\u52b4"+
    "\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c"+
    "\0\u557b\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706\0\u5755\0\u57a4"+
    "\0\u57f3\0\u5842\0\u5891\0\u58e0\0\u592f\0\u597e\0\u013c\0\u59cd"+
    "\0\u5a1c\0\u013c\0\u013c\0\u5a6b\0\u5aba\0\u5b09\0\u5b58\0\u5ba7"+
    "\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f"+
    "\0\u5e6e\0\u5ebd\0\u013c\0\u08a4\0\u5f0c\0\u013c\0\u5f5b\0\u013c"+
    "\0\u5faa\0\u5ff9\0\u6048\0\u6097\0\u08a4\0\u60e6\0\u08a4\0\u6135"+
    "\0\u6184\0\u61d3\0\u6222\0\u013c\0\u6271\0\u013c\0\u62c0\0\u630f"+
    "\0\u635e\0\u63ad\0\u08a4\0\u63fc\0\u08a4\0\u644b\0\u649a\0\u64e9"+
    "\0\u013c\0\u013c\0\u013c\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674"+
    "\0\u66c3\0\u6712\0\u6761\0\u67b0\0\u67ff\0\u684e\0\u689d\0\u68ec"+
    "\0\u693b\0\u698a\0\u013c\0\u08a4\0\u69d9\0\u6a28\0\u013c\0\u013c"+
    "\0\u013c\0\u6a77\0\u6ac6\0\u08a4\0\u08a4\0\u08a4\0\u6b15\0\u6b64"+
    "\0\u013c\0\u013c\0\u013c\0\u6bb3\0\u6c02\0\u08a4\0\u08a4\0\u08a4"+
    "\0\u013c\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e\0\u6d8d\0\u6ddc\0\u6e2b"+
    "\0\u6e7a\0\u6ec9\0\u6f18\0\u6f67\0\u6fb6\0\u7005\0\u7054\0\u70a3"+
    "\0\u70f2\0\u7141\0\u7190\0\u71df\0\u722e\0\u727d\0\u72cc\0\u013c"+
    "\0\u731b\0\u736a\0\u73b9\0\u013c\0\u013c\0\u7408\0\u013c\0\u7457"+
    "\0\u74a6\0\u08a4\0\u08a4\0\u74f5\0\u08a4\0\u7544\0\u7593\0\u75e2"+
    "\0\u7631\0\u7680\0\u76cf\0\u771e\0\u776d\0\u013c\0\u77bc\0\u013c"+
    "\0\u013c\0\u013c\0\u780b\0\u08a4\0\u08a4\0\u08a4\0\u785a\0\u78a9"+
    "\0\u78f8\0\u7947\0\u7996\0\u79e5\0\u7a34\0\u7a83\0\u013c\0\u08a4"+
    "\0\u013c\0\u7ad2\0\u08a4\0\u7b21\0\u013c\0\u7b70\0\u08a4\0\u7bbf"+
    "\0\u013c\0\u08a4\0\u013c\0\u08a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\5\1\14\1\15\3\5\1\16\1\17\1\20\1\21"+
    "\2\22\4\5\2\23\2\24\2\25\2\26\2\27\2\5"+
    "\2\30\4\5\2\31\2\32\6\5\2\33\6\5\2\34"+
    "\20\5\1\35\1\36\2\35\14\36\1\37\56\36\1\40"+
    "\20\36\1\5\1\6\1\7\1\10\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\5\1\52"+
    "\1\53\1\54\1\21\1\55\1\56\1\5\1\51\1\5"+
    "\1\51\1\5\1\51\1\57\1\60\1\5\1\51\1\5"+
    "\1\51\1\61\1\62\1\63\1\64\1\65\1\66\1\5"+
    "\1\51\1\5\1\51\1\67\1\70\1\71\1\72\1\5"+
    "\1\51\1\73\1\74\1\5\1\51\1\5\1\51\1\5"+
    "\1\51\1\5\1\51\1\75\1\76\1\5\1\51\1\5"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\5\1\51\1\35"+
    "\1\36\2\35\14\36\1\114\56\36\1\40\20\36\121\0"+
    "\1\7\121\0\1\115\111\0\4\116\1\117\112\116\11\0"+
    "\2\15\130\0\2\120\6\0\2\121\2\0\2\122\4\0"+
    "\2\123\103\0\2\124\107\0\2\125\34\0\2\126\2\127"+
    "\77\0\2\130\10\0\2\131\57\0\2\132\143\0\2\133"+
    "\75\0\2\134\2\135\2\0\2\136\2\137\107\0\2\140"+
    "\105\0\2\141\4\0\2\142\2\143\121\0\2\144\123\0"+
    "\2\145\47\0\1\36\2\0\14\36\1\0\56\36\1\0"+
    "\20\36\17\0\1\146\22\0\2\147\2\150\14\0\2\151"+
    "\51\0\1\152\116\0\1\153\116\0\1\154\107\0\1\155"+
    "\1\156\121\0\1\157\114\0\2\47\1\157\114\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\17\0\1\160\142\0\2\161\4\0\2\162\56\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\161\1\163\1\0\1\51\1\0\1\51"+
    "\1\162\1\164\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\55\0\2\165\4\0\2\166\44\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\165\1\167\1\0\1\51\1\0\1\51"+
    "\1\166\1\170\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\23\0\2\171"+
    "\24\0\2\172\56\0\2\51\1\0\2\51\4\0\1\171"+
    "\1\173\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\172\1\174\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\41\0\2\175\66\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\175\1\176\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\43\0\2\137\64\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\137"+
    "\1\177\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\41\0\2\200\66\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\200\1\201\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\35\0\2\143\72\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\143\1\202\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\41\0\2\203\66\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\203\1\204\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\53\0\2\205\54\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\205"+
    "\1\206\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\112\0\1\207\117\0"+
    "\1\210\4\0\5\115\1\211\111\115\26\0\2\212\20\0"+
    "\2\213\103\0\2\214\141\0\2\215\73\0\2\216\117\0"+
    "\2\217\2\220\105\0\2\221\151\0\2\222\57\0\2\223"+
    "\10\0\2\224\73\0\2\225\135\0\2\226\2\227\101\0"+
    "\2\230\131\0\2\231\107\0\2\232\135\0\2\233\105\0"+
    "\2\234\117\0\2\235\127\0\2\236\103\0\2\237\115\0"+
    "\2\240\107\0\2\241\125\0\2\242\43\0\1\155\1\243"+
    "\1\10\114\155\10\244\1\245\106\244\11\0\1\246\1\247"+
    "\144\0\2\250\107\0\2\251\74\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\250\1\252"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\251\1\253\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\53\0\2\254\54\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\254\1\255"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\73\0\2\256\75\0\2\257"+
    "\54\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\256\1\260\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\257\1\261"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\31\0\2\262\76\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\262\1\263\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\234\1\264\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\45\0\2\265\62\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\265\1\266\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\240\1\267\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\45\0\2\270\62\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\270\1\271\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\7\0\1\10\140\0\2\272"+
    "\133\0\2\273\107\0\2\274\121\0\2\275\113\0\2\276"+
    "\115\0\2\277\145\0\2\300\103\0\2\301\103\0\2\302"+
    "\131\0\2\303\57\0\2\304\163\0\2\305\107\0\2\306"+
    "\55\0\2\307\125\0\2\310\127\0\2\311\117\0\2\312"+
    "\111\0\2\313\111\0\2\314\121\0\2\315\135\0\2\316"+
    "\65\0\2\317\133\0\2\320\103\0\2\321\121\0\2\322"+
    "\53\0\1\10\114\0\10\244\1\323\106\244\7\0\1\10"+
    "\1\245\117\0\2\247\140\0\2\324\103\0\2\325\104\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\324\1\326\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\12\0\2\51\1\0\2\51\4\0\1\325\1\327"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\41\0\2\330\66\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\330\1\331\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\25\0\2\332\131\0\2\333\66\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\332\1\334\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\333\1\335\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\41\0\2\336\66\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\336\1\337\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\314\1\340"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\23\0\2\341"+
    "\4\0\2\342\2\0\2\343\2\344\4\0\2\345\62\0"+
    "\2\51\1\0\2\51\4\0\1\341\1\346\1\0\1\51"+
    "\1\0\1\51\1\342\1\347\1\0\1\51\1\343\1\350"+
    "\1\344\1\351\1\0\1\51\1\0\1\51\1\345\1\352"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\320\1\353"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\23\0\2\354\4\0\2\355"+
    "\2\0\2\356\2\357\4\0\2\360\62\0\2\51\1\0"+
    "\2\51\4\0\1\354\1\361\1\0\1\51\1\0\1\51"+
    "\1\355\1\362\1\0\1\51\1\356\1\363\1\357\1\364"+
    "\1\0\1\51\1\0\1\51\1\360\1\365\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\33\0\2\366\111\0\2\367\111\0\2\370\135\0\2\371"+
    "\103\0\2\372\121\0\2\373\121\0\2\374\107\0\2\375"+
    "\123\0\2\376\101\0\2\377\131\0\2\u0100\137\0\2\u0101"+
    "\55\0\2\u0102\143\0\2\u0103\101\0\2\u0104\105\0\2\u0105"+
    "\115\0\2\u0106\115\0\2\u0107\131\0\2\u0108\77\0\2\u0109"+
    "\125\0\2\u010a\63\0\7\244\1\10\1\323\106\244\42\0"+
    "\2\u010b\167\0\2\u010c\12\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u010b"+
    "\1\u010d\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\5\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\16\0\1\u010c\1\u010e"+
    "\43\0\2\u010f\64\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u010f\1\u0110"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\45\0\2\u0111\62\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0111\1\u0112\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\25\0\2\u0113\125\0\2\u0114\131\0\2\u0115\10\0\2\u0116"+
    "\57\0\2\u0117\131\0\2\u0118\66\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\u0113\1\u0119\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0114\1\u011a\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u0115\1\u011b\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0116\1\u011c\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u0117\1\u011d\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u0118\1\u011e"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u0108\1\u011f\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\25\0\2\u0120\125\0\2\u0121\131\0\2\u0122\10\0\2\u0123"+
    "\57\0\2\u0124\131\0\2\u0125\66\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\u0120\1\u0126\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0121\1\u0127\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u0122\1\u0128\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0123\1\u0129\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u0124\1\u012a\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u0125\1\u012b"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\63\0\2\u012c"+
    "\73\0\2\u012d\111\0\2\u012e\105\0\2\u012f\145\0\2\u0130"+
    "\123\0\2\u0131\73\0\2\u0132\111\0\2\u0133\113\0\2\u0134"+
    "\107\0\2\u0135\125\0\2\u0136\2\u0137\151\0\2\u0138\77\0"+
    "\2\u0139\71\0\2\u013a\2\u013b\2\0\2\u013c\4\0\2\u013d"+
    "\107\0\2\u013e\70\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u013a\1\u013f\1\u013b\1\u0140"+
    "\1\0\1\51\1\u013c\1\u0141\1\0\1\51\1\0\1\51"+
    "\1\u013d\1\u0142\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u013e\1\u0143\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\45\0\2\u0144"+
    "\62\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u0144\1\u0145"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\33\0\2\u0146\74\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u0146\1\u0147\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\63\0\2\u0148"+
    "\77\0\2\u0149\103\0\2\u014a\10\0\2\u014b\73\0\2\u014c"+
    "\135\0\2\u014d\131\0\2\u014e\50\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u0148\1\u014f\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0149\1\u0150\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u014a\1\u0151\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u014b\1\u0152"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\4\0\1\u014c"+
    "\1\u0153\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\5\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u014d\1\u0154\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\17\0\1\51\12\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u014e"+
    "\1\u0155\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\63\0\2\u0156\77\0\2\u0157\103\0\2\u0158\10\0"+
    "\2\u0159\73\0\2\u015a\135\0\2\u015b\131\0\2\u015c\50\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\u0156\1\u015d\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\12\0\2\51\1\0\2\51\5\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u0157"+
    "\1\u015e\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\17\0\1\51\12\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u0158"+
    "\1\u015f\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u0159\1\u0160\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\4\0\1\u015a\1\u0161\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u015b\1\u0162\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u015c\1\u0163\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\35\0\2\u0164\123\0\2\u0165"+
    "\137\0\2\u0166\55\0\2\u0167\133\0\2\u0168\75\0\2\u0169"+
    "\117\0\2\u016a\125\0\2\u016b\113\0\2\u016c\117\0\2\u016d"+
    "\107\0\2\u016e\113\0\2\u016f\125\0\2\u0170\2\0\2\u0171"+
    "\101\0\2\u0172\102\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u016d\1\u0173\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\u016e\1\u0174\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\u016f\1\u0175\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u0170\1\u0176"+
    "\1\0\1\51\1\u0171\1\u0177\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u0172\1\u0178\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\35\0\2\u0179\72\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0179\1\u017a\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\43\0\2\u017b\64\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u017b\1\u017c"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\45\0\2\u017d\143\0\2\u017e"+
    "\105\0\2\u017f\57\0\2\u0180\163\0\2\u0181\107\0\2\u0182"+
    "\75\0\2\u0183\62\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u017d\1\u0184\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u017e\1\u0185\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u017f\1\u0186\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\u0180\1\u0187"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u0181\1\u0188"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u0182\1\u0189\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u0183\1\u018a\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\45\0\2\u018b\143\0\2\u018c\105\0\2\u018d\57\0\2\u018e"+
    "\163\0\2\u018f\107\0\2\u0190\75\0\2\u0191\62\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u018b\1\u0192\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u018c\1\u0193\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u018d\1\u0194"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\u018e\1\u0195\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u018f\1\u0196\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u0190\1\u0197"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u0191\1\u0198\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\23\0\2\u0199\127\0\2\u019a"+
    "\105\0\2\u019b\155\0\2\u019c\63\0\2\u019d\105\0\2\u019e"+
    "\135\0\2\u019f\107\0\2\u01a0\125\0\2\u01a1\107\0\2\u01a2"+
    "\135\0\2\u01a3\103\0\2\u01a4\62\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u019f\1\u01a5\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u01a0\1\u01a6\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01a1\1\u01a7"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01a2\1\u01a8\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u01a3\1\u01a9\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u01a4\1\u01aa\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\43\0\2\u01ab\64\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01ab\1\u01ac"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\41\0\2\u01ad\115\0\2\u01ae"+
    "\101\0\2\u01af\131\0\2\u01b0\101\0\2\u01b1\102\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u01ad\1\u01b2\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01ae\1\u01b3\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u01af\1\u01b4\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01b0\1\u01b5"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\u01b1\1\u01b6\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\41\0\2\u01b7\115\0\2\u01b8\101\0\2\u01b9\131\0\2\u01ba"+
    "\101\0\2\u01bb\102\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u01b7\1\u01bc\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01b8\1\u01bd"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\u01b9\1\u01be\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01ba\1\u01bf\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u01bb\1\u01c0\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\35\0\2\u01c1\105\0\2\u01c2"+
    "\125\0\2\u01c3\123\0\2\u01c4\133\0\2\u01c5\61\0\2\u01c6"+
    "\141\0\2\u01c7\111\0\2\u01c8\75\0\2\u01c9\102\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01c4\1\u01ca\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01c5\1\u01cb\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u01c6\1\u01cc\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01c7\1\u01cd"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\u01c8\1\u01ce\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\u01c9\1\u01cf"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\63\0\2\u01d0\67\0\2\u01d1\72\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01d0\1\u01d2\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01d1\1\u01d3"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\63\0\2\u01d4\67\0\2\u01d5\72\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01d4\1\u01d6\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01d5\1\u01d7"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\63\0\2\u01d8\117\0\2\u01d9\65\0\2\u01da"+
    "\121\0\2\u01db\137\0\2\u01dc\67\0\2\u01dd\105\0\2\u01de"+
    "\153\0\2\u01df\44\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u01da\1\u01e0\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01db\1\u01e1"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\12\0\2\51"+
    "\1\0\2\51\5\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\u01dc\1\u01e2\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\12\0\2\51\1\0\2\51\5\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01dd\1\u01e3"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\17\0\1\51\12\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\u01de\1\u01e4\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\5\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\u01df\1\u01e5\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\17\0\1\51\33\0\2\u01e6"+
    "\105\0\2\u01e7\104\0\2\51\1\0\2\51\5\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\u01e6\1\u01e8"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\17\0\1\51\12\0\2\51\1\0\2\51"+
    "\4\0\1\u01e7\1\u01e9\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\17\0\1\51\33\0"+
    "\2\u01ea\105\0\2\u01eb\104\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u01ea"+
    "\1\u01ec\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\4\0\1\u01eb\1\u01ed\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\17\0\1\51"+
    "\25\0\2\u01ee\145\0\2\u01ef\123\0\2\u01f0\67\0\2\u01f1"+
    "\2\u01f2\70\0\2\51\1\0\2\51\5\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u01ef"+
    "\1\u01f3\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\17\0\1\51\12\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\u01f0"+
    "\1\u01f4\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\5\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\u01f1\1\u01f5\1\u01f2\1\u01f6\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\17\0\1\51\65\0"+
    "\2\u01f7\63\0\2\u01f8\74\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u01f7\1\u01f9\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\5\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u01f8\1\u01fa\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\17\0\1\51\65\0"+
    "\2\u01fb\63\0\2\u01fc\74\0\2\51\1\0\2\51\5\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u01fb\1\u01fd\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\17\0\1\51\12\0\2\51\1\0"+
    "\2\51\5\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u01fc\1\u01fe\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\17\0\1\51\25\0"+
    "\2\u01ff\102\0\2\51\1\0\2\51\5\0\1\51\1\u01ff"+
    "\1\u0200\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\17\0\1\51\25\0\2\u0201\115\0\2\u0202\102\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\u0201\1\u0203\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\12\0\2\51\1\0\2\51\5\0\1\51\1\u0202"+
    "\1\u0204\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\17\0\1\51\25\0\2\u0205\115\0\2\u0206\102\0"+
    "\2\51\1\0\2\51\5\0\1\51\1\u0205\1\u0207\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\17\0"+
    "\1\51\12\0\2\51\1\0\2\51\5\0\1\51\1\u0206"+
    "\1\u0208\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\17\0\1\51\63\0\2\u0209\44\0\2\51\1\0"+
    "\2\51\5\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\u0209\1\u020a\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\17\0\1\51\63\0"+
    "\2\u020b\44\0\2\51\1\0\2\51\5\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\u020b\1\u020c\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\1\51\17\0\1\51\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31758];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\2\11\2\1\2\11\1\1\4\11"+
    "\13\1\1\11\1\1\1\11\5\1\1\11\2\1\1\11"+
    "\2\1\2\11\22\1\12\11\2\1\2\11\2\0\1\11"+
    "\6\0\1\11\17\0\7\11\1\1\2\0\1\11\2\0"+
    "\2\1\1\11\1\0\2\1\2\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\2\11\32\0"+
    "\1\1\2\0\1\11\1\1\2\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\6\0\1\11\3\0\1\11\7\0\1\11\2\0\1\11"+
    "\6\0\2\1\1\0\1\1\2\11\2\1\1\0\2\1"+
    "\5\0\6\1\5\0\5\1\1\11\10\0\3\11\2\0"+
    "\1\11\1\1\3\11\4\0\2\1\1\0\1\1\1\0"+
    "\1\1\6\0\7\1\6\0\6\1\3\0\1\11\1\0"+
    "\1\11\3\0\3\11\7\0\5\1\1\0\1\1\1\0"+
    "\1\1\7\0\7\1\7\0\10\1\2\0\1\11\2\0"+
    "\2\11\7\0\6\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\11\3\0\7\1\1\0\1\11\1\0"+
    "\1\11\3\0\7\1\3\11\11\0\6\1\1\11\1\1"+
    "\2\0\3\11\5\1\2\0\3\11\5\1\1\11\10\0"+
    "\6\1\2\0\2\1\2\0\2\1\1\11\3\0\2\11"+
    "\1\0\1\11\6\1\2\0\2\1\2\0\2\1\1\11"+
    "\1\0\3\11\4\1\2\0\2\1\2\0\2\1\1\11"+
    "\1\1\1\11\1\0\2\1\1\11\1\0\2\1\1\11"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public void addToken(String lexema, String tipo){
        main.Main.tokens.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void addError(String lexema, String tipo){
        main.Main.errores.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void removerUltimoToken(){
        try{
            main.Main.tokens.remove(main.Main.tokens.size() - 1);
        }catch(Exception ex){}
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yytext(), "NO RECONOCIDO"); return new Symbol(sym.identificador , yyline , yychar , yytext());
            }
          case 106: break;
          case 2: 
            { yychar=1;
            }
          case 107: break;
          case 3: 
            { 
            }
          case 108: break;
          case 4: 
            { addToken(yytext(), "menor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 109: break;
          case 5: 
            { addToken(yytext(), "mayor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 110: break;
          case 6: 
            { addToken(yytext(), "barra"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 111: break;
          case 7: 
            { addToken(yytext(), "numero"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 112: break;
          case 8: 
            { addToken(yytext(), "igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 113: break;
          case 9: 
            { addToken(yytext(), "comillas");  string.setLength(0); yybegin(TEXTO); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 114: break;
          case 10: 
            { addToken(yytext(), "interrogacion"); yybegin(HSCRIPT);/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 115: break;
          case 11: 
            { addToken(yytext(), "aceptacion");/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 116: break;
          case 12: 
            { System.out.print(yytext());
            }
          case 117: break;
          case 13: 
            { string.append( yytext() );
            }
          case 118: break;
          case 14: 
            { addToken(string.toString(), "cadena"); addToken(yytext(), "comilla"); yybegin(YYINITIAL);/*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 119: break;
          case 15: 
            { string.append( '\\' );
            }
          case 120: break;
          case 16: 
            { addToken(yytext(), "operador menor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 121: break;
          case 17: 
            { addToken(yytext(), "operador NOT"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 122: break;
          case 18: 
            { addToken(yytext(), "operador mayor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 123: break;
          case 19: 
            { addToken(yytext(), "division"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 124: break;
          case 20: 
            { addToken(yytext(), "multiplicacion"); /*return new Symbol(sym.multiplicacion , yyline , yychar , yytext());*/
            }
          case 125: break;
          case 21: 
            { addToken(yytext(), "punto"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 126: break;
          case 22: 
            { addToken(yytext(), "identificador"); /*return new Symbol(sym.identificador , yyline , yychar , yytext());*/
            }
          case 127: break;
          case 23: 
            { addToken(yytext(), "igual"); /*return new Symbol(sym.suma , yyline , yychar , yytext());*/
            }
          case 128: break;
          case 24: 
            { addToken(yytext(), "comillas");  string.setLength(0); yybegin(CADENA); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 129: break;
          case 25: 
            { addToken(yytext(), "interrogacion"); yybegin(YYINITIAL);/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 130: break;
          case 26: 
            { addToken(yytext(), "dolar"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 131: break;
          case 27: 
            { addToken(yytext(), "suma"); /*return new Symbol(sym.suma , yyline , yychar , yytext());*/
            }
          case 132: break;
          case 28: 
            { addToken(yytext(), "resta"); /*return new Symbol(sym.resta , yyline , yychar , yytext());*/
            }
          case 133: break;
          case 29: 
            { addToken(yytext(), "punto y coma"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 134: break;
          case 30: 
            { addToken(yytext(), "parentesis abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 135: break;
          case 31: 
            { addToken(yytext(), "parentesis cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 136: break;
          case 32: 
            { addToken(yytext(), "llave abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 137: break;
          case 33: 
            { addToken(yytext(), "llave cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 138: break;
          case 34: 
            { addToken(yytext(), "corchete abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 139: break;
          case 35: 
            { addToken(yytext(), "corchete cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 140: break;
          case 36: 
            { addToken(yytext(), "numerañ"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 141: break;
          case 37: 
            { addToken(string.toString(), "cadena"); addToken(yytext(), "comilla"); yybegin(HSCRIPT);/*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 142: break;
          case 38: 
            { addToken(yytext(), "cadena"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 143: break;
          case 39: 
            { addToken(yytext(), "Palabra Reservada id"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 144: break;
          case 40: 
            { string.append( '\"' );
            }
          case 145: break;
          case 41: 
            { string.append( '\r' );
            }
          case 146: break;
          case 42: 
            { string.append( '\t' );
            }
          case 147: break;
          case 43: 
            { string.append( '\n' );
            }
          case 148: break;
          case 44: 
            { addToken(yytext(), "operador menor igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 149: break;
          case 45: 
            { addToken(yytext(), "operador no igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 150: break;
          case 46: 
            { addToken(yytext(), "operador mayor igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 151: break;
          case 47: 
            { addToken(yytext(), "operador igual igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 152: break;
          case 48: 
            { addToken(yytext(), "Palabra Reservada if"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 153: break;
          case 49: 
            { addToken(yytext(), "Palabra Reservada de difinicion HScript"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 154: break;
          case 50: 
            { addToken(yytext(), "operador AND"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 155: break;
          case 51: 
            { addToken(yytext(), "operador OR"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 156: break;
          case 52: 
            { addToken(yytext(), "numeroDecimal"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 157: break;
          case 53: 
            { addToken(yytext(), "Palabra Reservada path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 158: break;
          case 54: 
            { addToken(yytext(), "Palabra Reservada alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 159: break;
          case 55: 
            { addToken(yytext(), "Palabra Reservada true"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 160: break;
          case 56: 
            { addToken(yytext(), "Palabra Reservada fila"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 161: break;
          case 57: 
            { addToken(yytext(), "Palabra Reservada echo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 162: break;
          case 58: 
            { addToken(yytext(), "Palabra Reservada else"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 163: break;
          case 59: 
            { addToken(yytext(), "Palabra Reservada compi"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 164: break;
          case 60: 
            { addToken(yytext(), "Palabra Reservada ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 165: break;
          case 61: 
            { addToken(yytext(), "Palabra Reservada borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 166: break;
          case 62: 
            { addToken(yytext(), "Palabra Reservada boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 167: break;
          case 63: 
            { addToken(yytext(), "Palabra Reservada tabla"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 168: break;
          case 64: 
            { addToken(yytext(), "Palabra Reservada texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 169: break;
          case 65: 
            { addToken(yytext(), "Palabra Reservada salto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 170: break;
          case 66: 
            { addToken(yytext(), "Palabra Reservada fondo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 171: break;
          case 67: 
            { addToken(yytext(), "Palabra Reservada false"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 172: break;
          case 68: 
            { addToken(yytext(), "Palabra Reservada cuerpo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 173: break;
          case 69: 
            { addToken(yytext(), "Palabra Reservada imagen");  /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 174: break;
          case 70: 
            { addToken(yytext(), "Palabra Reservada titulo");  /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 175: break;
          case 71: 
            { addToken(yytext(), "Palabra Reservada textoa"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 176: break;
          case 72: 
            { addToken(yytext(), "Palabra Reservada textob"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 177: break;
          case 73: 
            { addToken(yytext(), "Palabra Reservada columna"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 178: break;
          case 74: 
            { addToken(yytext(), "Palabra Reservada parrafo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 179: break;
          case 75: 
            { addToken(yytext(), "Palabra Reservada espacio"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 180: break;
          case 76: 
            { addToken(yytext(), "Palabra Reservada derecha"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 181: break;
          case 77: 
            { addToken(yytext(), "Palabra Reservada repetir"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 182: break;
          case 78: 
            { addToken(yytext(), "Funcion set path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 183: break;
          case 79: 
            { addToken(yytext(), "Funcion set alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 184: break;
          case 80: 
            { addToken(yytext(), "Funcion get path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 185: break;
          case 81: 
            { addToken(yytext(), "Funcion get alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 186: break;
          case 82: 
            { addToken(yytext(), "Palabra Reservada columnac"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 187: break;
          case 83: 
            { addToken(yytext(), "Palabra Reservada cabecera"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 188: break;
          case 84: 
            { addToken(yytext(), "Palabra Reservada centrado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 189: break;
          case 85: 
            { addToken(yytext(), "Funcion insertar"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 190: break;
          case 86: 
            { addToken(yytext(), "Funcion set ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 191: break;
          case 87: 
            { addToken(yytext(), "Funcion set borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 192: break;
          case 88: 
            { addToken(yytext(), "Funcion set texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 193: break;
          case 89: 
            { addToken(yytext(), "Funcion get ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 194: break;
          case 90: 
            { addToken(yytext(), "Funcion get borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 195: break;
          case 91: 
            { addToken(yytext(), "Funcion get texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 196: break;
          case 92: 
            { addToken(yytext(), "Palabra Reservada izquierda"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 197: break;
          case 93: 
            { addToken(yytext(), "Palabra Reservada alineacion");/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 198: break;
          case 94: 
            { addToken(yytext(), "Funcion crear boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 199: break;
          case 95: 
            { addToken(yytext(), "Funcion crear tabla"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 200: break;
          case 96: 
            { addToken(yytext(), "Funcion click boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 201: break;
          case 97: 
            { addToken(yytext(), "Palabra Reservada justificado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 202: break;
          case 98: 
            { addToken(yytext(), "Funcion crear imagen"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 203: break;
          case 99: 
            { addToken(yytext(), "Funcion crear texto A"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 204: break;
          case 100: 
            { addToken(yytext(), "Funcion crear texto B"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 205: break;
          case 101: 
            { addToken(yytext(), "Funcion crear parrafo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 206: break;
          case 102: 
            { addToken(yytext(), "Funcion set contenido"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 207: break;
          case 103: 
            { addToken(yytext(), "Funcion get contenido"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 208: break;
          case 104: 
            { addToken(yytext(), "Funcion set alineacion"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 209: break;
          case 105: 
            { addToken(yytext(), "Funcion get alineacion"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
