/* The following code was generated by JFlex 1.6.1 */

package sistema.analisis;

/*impor java_cup.runtime.Symbol;*/
import sistema.bean.Token;
import main.Main;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int HSCRIPT = 4;
  public static final int CADENA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  5, 14, 53, 41,  0, 51,  0, 45, 46,  8, 42,  0, 43, 11,  7, 
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0, 44,  4, 13,  6, 15, 
     0, 22, 23, 16, 35, 24, 31, 33, 38, 21, 39, 55, 28, 18, 34, 17, 
    19, 37, 25, 30, 26, 27, 12, 12, 32, 12, 36, 49, 40, 50, 12, 12, 
    12, 22, 23, 16, 35, 24, 31, 33, 38, 21, 39, 55, 28, 18, 34, 17, 
    19, 37, 25, 30, 26, 27, 12, 12, 32, 12, 36, 47, 52, 48,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\13\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\7\1\23\1\24\1\25"+
    "\1\26\1\27\1\24\1\1\4\24\1\1\4\24\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\1\1\42\1\43\2\0\1\44\6\0\1\45"+
    "\17\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\3\2\0\1\55\2\24\1\56\1\0\1\56\5\24"+
    "\1\0\3\24\2\57\1\60\1\61\32\0\1\3\2\0"+
    "\2\62\1\24\1\0\1\24\1\0\2\24\1\0\3\24"+
    "\1\0\3\24\6\0\1\63\3\0\1\64\7\0\1\65"+
    "\2\0\1\66\4\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\67\2\70\1\24\1\65\5\0\13\24\1\71\10\0"+
    "\1\72\1\73\1\74\2\0\1\75\1\76\1\77\1\100"+
    "\1\101\2\0\1\24\1\0\1\24\1\0\2\24\6\0"+
    "\6\24\1\101\6\24\3\0\1\102\1\0\1\103\3\0"+
    "\1\104\1\105\1\106\2\0\1\24\1\0\3\24\1\0"+
    "\1\24\1\0\1\24\1\0\1\24\7\0\11\24\1\0"+
    "\5\24\1\107\2\0\1\110\2\0\1\111\1\112\1\0"+
    "\1\24\1\0\4\24\1\0\1\24\1\0\1\24\2\113"+
    "\1\0\1\114\1\0\1\115\3\0\1\24\1\114\1\24"+
    "\1\115\4\24\1\116\1\0\1\24\1\117\3\24\1\120"+
    "\1\121\1\122\3\0\1\24\1\0\4\24\1\0\1\24"+
    "\2\123\2\0\1\124\1\125\1\126\2\24\1\124\1\125"+
    "\1\126\1\24\1\0\1\24\1\127\1\130\1\131\1\132"+
    "\2\0\1\24\1\0\4\24\1\0\1\24\2\0\3\24"+
    "\1\0\1\24\1\133\1\0\1\24\1\0\1\24\1\134"+
    "\1\135\1\24\2\136\2\0\2\24\1\0\1\24\1\0"+
    "\1\24\1\137\1\24\2\140\1\141\1\142\2\0\2\24"+
    "\1\0\1\24\1\0\1\24\1\143\1\144\1\0\1\144"+
    "\1\24\2\145\1\0\1\24\2\146\2\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\340\0\340"+
    "\0\u0150\0\u0188\0\340\0\340\0\u01c0\0\340\0\340\0\340"+
    "\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380"+
    "\0\u03b8\0\u03f0\0\u0428\0\u0460\0\340\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\340\0\u05b0\0\u05e8\0\340\0\u0620\0\u0658"+
    "\0\340\0\340\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\340\0\340\0\340"+
    "\0\340\0\340\0\340\0\340\0\340\0\u0620\0\u0620\0\u08f8"+
    "\0\u0930\0\340\0\340\0\u0968\0\u0188\0\340\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\340\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\340\0\340\0\340\0\340"+
    "\0\340\0\340\0\340\0\u0e38\0\u0e70\0\u0ea8\0\340\0\u0ee0"+
    "\0\u0f18\0\340\0\u0f50\0\u0620\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\340\0\u0620\0\340"+
    "\0\340\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\340\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\340\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\340\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68"+
    "\0\340\0\u1ea0\0\u1ed8\0\340\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u0620\0\340\0\u0620"+
    "\0\u2108\0\u0620\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258"+
    "\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\340\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\340\0\340\0\340\0\u2680\0\u26b8"+
    "\0\340\0\u26f0\0\340\0\340\0\340\0\u2728\0\u2760\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958"+
    "\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18"+
    "\0\u2b50\0\u0620\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u2cd8\0\u2d10\0\u2d48\0\340\0\u2d80\0\340\0\u2db8\0\u2df0"+
    "\0\u2e28\0\340\0\340\0\340\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\u3640\0\u3678\0\340\0\u36b0\0\u36e8\0\340\0\340\0\u3720"+
    "\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0"+
    "\0\u3918\0\u3950\0\340\0\u0620\0\u3988\0\340\0\u39c0\0\340"+
    "\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u0620\0\u3ad8\0\u0620\0\u3b10"+
    "\0\u3b48\0\u3b80\0\u3bb8\0\u0620\0\u3bf0\0\u3c28\0\u0620\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\340\0\340\0\340\0\u3d08\0\u3d40\0\u3d78"+
    "\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38"+
    "\0\340\0\u0620\0\u3f70\0\u3fa8\0\340\0\340\0\340\0\u3fe0"+
    "\0\u4018\0\u0620\0\u0620\0\u0620\0\u4050\0\u4088\0\u40c0\0\u0620"+
    "\0\u0620\0\u0620\0\340\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8"+
    "\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398"+
    "\0\u43d0\0\u4408\0\u4440\0\u4478\0\340\0\u44b0\0\u44e8\0\u4520"+
    "\0\u4558\0\u0620\0\u0620\0\u4590\0\340\0\u0620\0\u45c8\0\u4600"+
    "\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\340\0\u4788"+
    "\0\340\0\u0620\0\u0620\0\u0620\0\u47c0\0\u47f8\0\u4830\0\u4868"+
    "\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u0620\0\340\0\u4980\0\u0620"+
    "\0\u49b8\0\340\0\u0620\0\u49f0\0\u4a28\0\340\0\u0620\0\340"+
    "\0\u0620";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\5\1\14\1\15\2\5\1\16\1\17\1\20\1\21"+
    "\2\5\1\22\2\23\1\24\1\25\1\26\1\5\1\27"+
    "\2\5\2\30\1\31\3\5\1\32\3\5\1\33\20\5"+
    "\1\34\2\5\13\34\1\35\31\34\1\36\17\34\1\5"+
    "\1\6\1\7\1\10\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\3\47\1\54\1\55\2\47\1\56\1\57\1\60\2\47"+
    "\1\61\1\62\1\63\1\47\1\64\4\47\1\65\2\47"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\5\1\47\1\34"+
    "\2\5\13\34\1\103\31\34\1\36\17\34\72\0\1\7"+
    "\72\0\1\104\62\0\4\105\1\106\63\105\11\0\2\15"+
    "\76\0\1\107\4\0\1\110\1\0\1\111\2\0\1\112"+
    "\62\0\1\113\63\0\1\114\20\0\1\115\1\116\57\0"+
    "\1\117\5\0\1\120\46\0\1\121\103\0\2\122\55\0"+
    "\2\123\1\124\1\0\1\125\1\126\64\0\1\127\62\0"+
    "\1\130\2\0\2\131\1\132\71\0\1\133\72\0\1\134"+
    "\34\0\1\34\2\0\13\34\1\0\31\34\1\0\17\34"+
    "\16\0\1\135\12\0\1\136\1\137\7\0\1\140\42\0"+
    "\1\141\67\0\1\142\67\0\1\143\61\0\1\144\1\145"+
    "\72\0\1\146\65\0\2\45\1\146\65\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\10\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\15\0\1\147\63\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\4\47\1\150\2\47\1\151"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\37\0\1\152"+
    "\2\0\1\153\36\0\2\47\1\0\1\47\3\0\4\47"+
    "\1\0\10\47\1\0\1\47\1\154\2\47\1\155\6\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\1\156\3\47\1\0\7\47\1\157\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\3\47\1\160\4\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\4\47\1\161\3\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\30\0\1\162\50\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\3\47\1\163\4\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\1\47\1\164\6\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\3\47\1\165\4\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\10\47\1\166\1\167"+
    "\12\47\10\0\2\47\4\0\1\47\63\0\1\170\70\0"+
    "\1\171\3\0\5\104\1\172\62\104\22\0\1\173\11\0"+
    "\1\174\62\0\1\175\102\0\1\176\55\0\1\177\70\0"+
    "\1\200\1\201\63\0\1\202\106\0\1\203\46\0\2\204"+
    "\4\0\1\205\55\0\1\206\100\0\1\207\1\210\60\0"+
    "\1\211\76\0\1\212\64\0\1\213\100\0\1\214\62\0"+
    "\1\215\70\0\1\216\75\0\1\217\61\0\1\220\67\0"+
    "\1\221\64\0\1\222\73\0\2\223\31\0\1\144\1\224"+
    "\1\10\65\144\10\225\1\226\57\225\11\0\1\227\1\230"+
    "\66\0\2\47\1\0\1\47\3\0\4\47\1\0\3\47"+
    "\1\231\4\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\4\47\1\232\1\233"+
    "\7\47\1\0\13\47\10\0\2\47\4\0\1\47\35\0"+
    "\2\234\42\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\10\47\1\234\1\235\12\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\4\47\1\0\10\47"+
    "\1\0\10\47\1\236\2\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\4\47\1\0\10\47"+
    "\1\237\1\240\12\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\3\47\1\241\1\0\10\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\6\47\1\242\1\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\32\0\1\243"+
    "\46\0\2\47\1\0\1\47\3\0\4\47\1\0\5\47"+
    "\1\244\2\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\4\47\1\0\7\47"+
    "\1\245\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\5\47\1\246"+
    "\2\47\1\0\13\47\10\0\2\47\4\0\1\47\6\0"+
    "\1\10\104\0\1\247\77\0\1\250\64\0\1\251\71\0"+
    "\1\252\66\0\1\253\67\0\1\254\104\0\1\255\62\0"+
    "\1\256\61\0\1\257\76\0\1\260\46\0\1\261\114\0"+
    "\1\262\64\0\1\263\45\0\1\264\74\0\1\265\74\0"+
    "\1\266\70\0\1\267\65\0\1\270\65\0\1\271\71\0"+
    "\1\272\100\0\1\273\52\0\1\274\76\0\2\275\61\0"+
    "\1\276\71\0\1\277\37\0\1\10\65\0\10\225\1\300"+
    "\57\225\7\0\1\10\1\226\70\0\2\230\66\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\1\47\1\301\6\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\20\0\1\302"+
    "\60\0\2\47\1\0\1\47\3\0\1\303\3\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\30\0"+
    "\1\304\50\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\3\47\1\305\4\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\1\47\1\306"+
    "\2\47\1\0\10\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\30\0\1\307\50\0\2\47\1\0\1\47\3\0"+
    "\4\47\1\0\3\47\1\310\4\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\11\0\2\47\1\0\1\47\3\0"+
    "\4\47\1\0\3\47\1\311\4\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\11\0\2\47\1\0\1\47\3\0"+
    "\4\47\1\0\3\47\1\312\4\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\20\0\1\313\2\0\1\314\2\0"+
    "\1\315\1\316\2\0\1\317\46\0\2\47\1\0\1\47"+
    "\3\0\1\320\2\47\1\321\1\0\1\47\1\322\1\323"+
    "\2\47\1\324\2\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\10\47\1\275\1\325\12\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\1\326\2\47\1\327"+
    "\1\0\1\47\1\330\1\331\2\47\1\332\2\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\24\0\2\333\64\0"+
    "\1\334\65\0\1\335\100\0\1\336\61\0\1\337\72\0"+
    "\1\340\71\0\1\341\63\0\2\342\72\0\1\343\60\0"+
    "\1\344\76\0\1\345\101\0\1\346\45\0\1\347\103\0"+
    "\1\350\61\0\1\351\62\0\1\352\67\0\1\353\67\0"+
    "\1\354\76\0\1\355\57\0\1\356\73\0\2\357\42\0"+
    "\7\225\1\10\1\300\57\225\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\4\47\1\360\3\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\66\0\2\361\11\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\10\47\1\0\13\47"+
    "\10\0\2\47\3\0\1\361\1\362\31\0\1\363\47\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\4\47\1\364"+
    "\3\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\5\47\1\365"+
    "\2\47\1\0\13\47\10\0\2\47\4\0\1\47\21\0"+
    "\1\366\74\0\1\367\75\0\1\370\5\0\1\371\46\0"+
    "\1\372\76\0\1\373\50\0\2\47\1\0\1\47\3\0"+
    "\1\47\1\374\2\47\1\0\10\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\11\0\2\47\1\0\1\47\3\0"+
    "\4\47\1\0\1\47\1\375\6\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\11\0\2\47\1\0\1\47\3\0"+
    "\4\47\1\0\7\47\1\376\1\0\4\47\1\377\6\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\1\47\1\u0100\2\47\1\0\10\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\3\47\1\u0101\4\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\3\47\1\u0102\4\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\1\47\1\u0103\2\47\1\0\10\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\1\47\1\u0104\6\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\7\47\1\u0105\1\0\4\47\1\u0106"+
    "\6\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\1\47\1\u0107\2\47\1\0\10\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\3\47\1\u0108\4\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\42\0\1\u0109\55\0"+
    "\1\u010a\65\0\1\u010b\62\0\1\u010c\105\0\1\u010d\72\0"+
    "\1\u010e\55\0\1\u010f\65\0\1\u0110\65\0\2\u0111\63\0"+
    "\1\u0112\74\0\1\u0113\1\u0114\106\0\1\u0115\60\0\1\u0116"+
    "\41\0\2\47\1\0\1\47\3\0\3\47\1\u0117\1\u0118"+
    "\1\u0119\1\47\1\u011a\2\47\1\u011b\2\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\27\0\1\u011c\51\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\2\47\1\u011d\5\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\32\0\1\u011e"+
    "\46\0\2\47\1\0\1\47\3\0\4\47\1\0\5\47"+
    "\1\u011f\2\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\4\47\1\u0120\1\u0121"+
    "\7\47\1\0\13\47\10\0\2\47\4\0\1\47\42\0"+
    "\1\u0122\57\0\1\u0123\61\0\2\u0124\4\0\1\u0125\55\0"+
    "\1\u0126\100\0\1\u0127\76\0\1\u0128\40\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\10\47\1\0\4\47\1\u0129"+
    "\6\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\5\47\1\u012a\2\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\u0124\1\u012b\4\47\1\u012c\2\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\1\u012d\3\47\1\0\10\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\4\47\1\u012e\3\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\10\47\1\0\2\47\1\u012f"+
    "\10\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\10\47\1\0\4\47\1\u0130"+
    "\6\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\5\47\1\u0131\2\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\u0132\1\u0133\4\47\1\u0134\2\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\1\u0135\3\47\1\0\10\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\4\47\1\u0136\3\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\10\47\1\0\2\47\1\u0137"+
    "\10\47\10\0\2\47\4\0\1\47\26\0\1\u0138\72\0"+
    "\1\u0139\101\0\1\u013a\45\0\1\u013b\77\0\1\u013c\56\0"+
    "\1\u013d\70\0\1\u013e\74\0\1\u013f\65\0\2\u0140\53\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\1\47\1\u0141"+
    "\6\47\1\0\13\47\10\0\2\47\4\0\1\47\22\0"+
    "\1\u0142\56\0\2\47\1\0\1\47\3\0\2\47\1\u0143"+
    "\1\47\1\0\10\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\1\47\1\u0144"+
    "\2\47\1\0\10\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\1\47\1\u0145\1\47\1\u0146\4\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\21\0\1\u0147\57\0\2\47\1\0"+
    "\1\47\3\0\1\47\1\u0148\2\47\1\0\10\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\26\0\1\u0149\52\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\1\47\1\u014a"+
    "\6\47\1\0\13\47\10\0\2\47\4\0\1\47\31\0"+
    "\1\u014b\47\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\4\47\1\u014c\3\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\32\0\1\u014d\103\0\1\u014e\63\0\1\u014f\46\0"+
    "\1\u0150\114\0\1\u0151\64\0\1\u0152\56\0\1\u0153\46\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\5\47\1\u0154"+
    "\2\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\10\47\1\u0155\2\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\4\47\1\u0156\6\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\1\47\1\u0157\2\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\10\47\1\u0158\2\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\5\47\1\u0159\5\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\5\47\1\u015a"+
    "\2\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\5\47\1\u015b"+
    "\2\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\10\47\1\u015c\2\47\10\0\2\47\4\0\1\47\42\0"+
    "\1\u015d\36\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\10\47\1\0\4\47\1\u015e\6\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\1\47\1\u015f"+
    "\2\47\1\0\10\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\10\47\1\0\10\47\1\u0160\2\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\10\47\1\0\5\47\1\u0161\5\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\5\47\1\u0162\2\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\20\0\1\u0163\75\0\1\u0164\62\0\1\u0165\111\0"+
    "\1\u0166\50\0\2\u0167\62\0\1\u0168\60\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\4\47\1\u0169\3\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\26\0\1\u016a\52\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\1\47\1\u016b"+
    "\6\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\5\47\1\u016c"+
    "\2\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\2\47\1\u016d"+
    "\5\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\2\47\1\u016e\10\47\10\0\2\47\4\0\1\47\32\0"+
    "\1\u016f\46\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\5\47\1\u0170\2\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\31\0\1\u0171\47\0\2\47\1\0\1\47\3\0"+
    "\4\47\1\0\4\47\1\u0172\3\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\30\0\1\u0173\67\0\1\u0174\60\0"+
    "\1\u0175\76\0\1\u0176\60\0\1\u0177\57\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\3\47\1\u0178\4\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\3\47\1\u0179\4\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\1\47\1\u017a\2\47\1\0\10\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\3\47\1\u017b\4\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\1\47\1\u017c\2\47\1\0\10\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\11\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\3\47\1\u017d\4\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\30\0\1\u017e\50\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\3\47\1\u017f"+
    "\4\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\1\47\1\u0180\2\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\3\47\1\u0181"+
    "\4\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\1\47\1\u0182\2\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\26\0"+
    "\1\u0183\62\0\1\u0184\74\0\1\u0185\52\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\4\47\1\u0186\3\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\41\0\1\u0187\37\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\3\47\1\u0188\7\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\1\47\1\u0189\2\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\7\47\1\u018a"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\11\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\5\47\1\u018b\2\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\21\0\1\u018c"+
    "\57\0\2\47\1\0\1\47\3\0\1\47\1\u018d\2\47"+
    "\1\0\10\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\42\0\1\u018e\53\0\1\u018f\52\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\10\47\1\0\4\47\1\u0190\6\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\1\47\1\u0191\6\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\10\47\1\0\4\47\1\u0192\6\47"+
    "\10\0\2\47\4\0\1\47\26\0\1\u0193\52\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\1\47\1\u0194\6\47"+
    "\1\0\13\47\10\0\2\47\4\0\1\47\42\0\1\u0195"+
    "\70\0\1\u0196\35\0\2\47\1\0\1\47\3\0\4\47"+
    "\1\0\1\47\1\u0197\6\47\1\0\13\47\10\0\2\47"+
    "\4\0\1\47\30\0\1\u0198\50\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\3\47\1\u0199\4\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\10\47\1\0\4\47\1\u019a\6\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\1\47\1\u019b\6\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\1\47\1\u019c\2\47\1\0\10\47\1\0\13\47"+
    "\10\0\2\47\4\0\1\47\42\0\1\u019d\36\0\2\47"+
    "\1\0\1\47\3\0\4\47\1\0\10\47\1\0\4\47"+
    "\1\u019e\6\47\10\0\2\47\4\0\1\47\24\0\2\u019f"+
    "\62\0\1\u01a0\60\0\2\47\1\0\1\47\3\0\4\47"+
    "\1\u019f\1\u01a1\7\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\1\u01a2\3\47"+
    "\1\0\10\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\11\0\2\47\1\0\1\47\3\0\4\47\1\u01a3\1\u01a4"+
    "\7\47\1\0\13\47\10\0\2\47\4\0\1\47\20\0"+
    "\1\u01a5\60\0\2\47\1\0\1\47\3\0\1\u01a6\3\47"+
    "\1\0\10\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\21\0\1\u01a7\57\0\2\47\1\0\1\47\3\0\4\47"+
    "\1\0\10\47\1\0\1\47\1\u01a8\11\47\10\0\2\47"+
    "\4\0\1\47\42\0\1\u01a9\36\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\10\47\1\0\4\47\1\u01aa\6\47"+
    "\10\0\2\47\4\0\1\47\11\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\0\1\47\1\u01ab\1\u01ac\5\47\1\0"+
    "\13\47\10\0\2\47\4\0\1\47\43\0\1\u01ad\50\0"+
    "\2\u01ae\53\0\2\47\1\0\1\47\3\0\4\47\1\0"+
    "\10\47\1\0\5\47\1\u01af\5\47\10\0\2\47\4\0"+
    "\1\47\11\0\2\47\1\0\1\47\3\0\4\47\1\u01ae"+
    "\1\u01b0\7\47\1\0\13\47\10\0\2\47\4\0\1\47"+
    "\43\0\1\u01b1\35\0\2\47\1\0\1\47\3\0\4\47"+
    "\1\0\10\47\1\0\5\47\1\u01b2\5\47\10\0\2\47"+
    "\4\0\1\47\24\0\2\u01b3\53\0\2\47\1\0\1\47"+
    "\3\0\4\47\1\u01b3\1\u01b4\7\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\11\0\2\47\1\0\1\47\3\0"+
    "\1\47\1\u01b5\2\47\1\0\10\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\21\0\1\u01b6\67\0\1\u01b7\57\0"+
    "\2\47\1\0\1\47\3\0\1\47\1\u01b8\2\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\11\0"+
    "\2\47\1\0\1\47\3\0\1\47\1\u01b9\2\47\1\0"+
    "\10\47\1\0\13\47\10\0\2\47\4\0\1\47\21\0"+
    "\1\u01ba\57\0\2\47\1\0\1\47\3\0\1\47\1\u01bb"+
    "\2\47\1\0\10\47\1\0\13\47\10\0\2\47\4\0"+
    "\1\47\21\0\1\u01bc\57\0\2\47\1\0\1\47\3\0"+
    "\1\47\1\u01bd\2\47\1\0\10\47\1\0\13\47\10\0"+
    "\2\47\4\0\1\47\42\0\1\u01be\36\0\2\47\1\0"+
    "\1\47\3\0\4\47\1\0\10\47\1\0\4\47\1\u01bf"+
    "\6\47\10\0\2\47\4\0\1\47\42\0\1\u01c0\36\0"+
    "\2\47\1\0\1\47\3\0\4\47\1\0\10\47\1\0"+
    "\4\47\1\u01c1\6\47\10\0\2\47\4\0\1\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\2\11\2\1\2\11\1\1\3\11"+
    "\14\1\1\11\5\1\1\11\2\1\1\11\2\1\2\11"+
    "\13\1\10\11\4\1\2\11\2\0\1\11\6\0\1\11"+
    "\17\0\7\11\1\1\2\0\1\11\2\1\1\11\1\0"+
    "\6\1\1\0\3\1\1\11\1\1\2\11\32\0\1\1"+
    "\2\0\1\11\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\3\1\6\0\1\11\3\0\1\11\7\0"+
    "\1\11\2\0\1\11\4\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\3\1\5\0\13\1\1\11\10\0\3\11"+
    "\2\0\1\11\1\1\3\11\2\0\1\1\1\0\1\1"+
    "\1\0\2\1\6\0\15\1\3\0\1\11\1\0\1\11"+
    "\3\0\3\11\2\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\7\0\11\1\1\0\6\1"+
    "\2\0\1\11\2\0\2\11\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\11"+
    "\1\0\1\11\3\0\11\1\1\0\5\1\3\11\3\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\11\1\1\2\0"+
    "\3\11\6\1\1\0\4\1\1\11\2\0\1\1\1\0"+
    "\4\1\1\0\1\1\2\0\3\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\4\1\1\11\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\3\1"+
    "\2\0\2\1\1\0\1\1\1\0\2\1\1\11\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[449];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public void addToken(String lexema, String tipo){
        main.Main.tokens.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void addError(String lexema, String tipo){
        main.Main.errores.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void removerUltimoToken(){
        try{
            main.Main.tokens.remove(main.Main.tokens.size() - 1);
        }catch(Exception ex){}
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 104: break;
          case 2: 
            { yychar=1;
            }
          case 105: break;
          case 3: 
            { 
            }
          case 106: break;
          case 4: 
            { addToken(yytext(), "menor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 107: break;
          case 5: 
            { addToken(yytext(), "mayor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 108: break;
          case 6: 
            { addToken(yytext(), "barra"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 109: break;
          case 7: 
            { addToken(yytext(), "numero"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 110: break;
          case 8: 
            { addToken(yytext(), "igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 111: break;
          case 9: 
            { addToken(yytext(), "comillas");  string.setLength(0); yybegin(TEXTO); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 112: break;
          case 10: 
            { addToken(yytext(), "interrogacion"); yybegin(HSCRIPT);/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 113: break;
          case 11: 
            { string.append( yytext() );
            }
          case 114: break;
          case 12: 
            { addToken(string.toString(), "cadena"); addToken(yytext(), "comilla"); yybegin(YYINITIAL);/*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 115: break;
          case 13: 
            { string.append( '\\' );
            }
          case 116: break;
          case 14: 
            { addToken(yytext(), "operador menor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 117: break;
          case 15: 
            { addToken(yytext(), "operador NOT"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 118: break;
          case 16: 
            { addToken(yytext(), "operador mayor que"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 119: break;
          case 17: 
            { addToken(yytext(), "division"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 120: break;
          case 18: 
            { addToken(yytext(), "multiplicacion"); /*return new Symbol(sym.multiplicacion , yyline , yychar , yytext());*/
            }
          case 121: break;
          case 19: 
            { addToken(yytext(), "punto"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 122: break;
          case 20: 
            { addToken(yytext(), "identificador"); /*return new Symbol(sym.identificador , yyline , yychar , yytext());*/
            }
          case 123: break;
          case 21: 
            { addToken(yytext(), "igual"); /*return new Symbol(sym.suma , yyline , yychar , yytext());*/
            }
          case 124: break;
          case 22: 
            { addToken(yytext(), "comillas");  string.setLength(0); yybegin(CADENA); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 125: break;
          case 23: 
            { addToken(yytext(), "interrogacion"); yybegin(YYINITIAL);/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 126: break;
          case 24: 
            { addToken(yytext(), "dolar"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 127: break;
          case 25: 
            { addToken(yytext(), "suma"); /*return new Symbol(sym.suma , yyline , yychar , yytext());*/
            }
          case 128: break;
          case 26: 
            { addToken(yytext(), "resta"); /*return new Symbol(sym.resta , yyline , yychar , yytext());*/
            }
          case 129: break;
          case 27: 
            { addToken(yytext(), "punto y coma"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 130: break;
          case 28: 
            { addToken(yytext(), "parentesis abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 131: break;
          case 29: 
            { addToken(yytext(), "parentesis cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 132: break;
          case 30: 
            { addToken(yytext(), "llave abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 133: break;
          case 31: 
            { addToken(yytext(), "llave cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 134: break;
          case 32: 
            { addToken(yytext(), "corchete abre"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 135: break;
          case 33: 
            { addToken(yytext(), "corchete cierra"); /*return new Symbol(sym.division , yyline , yychar , yytext());*/
            }
          case 136: break;
          case 34: 
            { addToken(yytext(), "numerañ"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 137: break;
          case 35: 
            { addToken(string.toString(), "cadena"); addToken(yytext(), "comilla"); yybegin(HSCRIPT);/*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 138: break;
          case 36: 
            { addToken(yytext(), "cadena"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 139: break;
          case 37: 
            { addToken(yytext(), "Palabra Reservada id"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 140: break;
          case 38: 
            { string.append( '\"' );
            }
          case 141: break;
          case 39: 
            { string.append( '\r' );
            }
          case 142: break;
          case 40: 
            { string.append( '\t' );
            }
          case 143: break;
          case 41: 
            { string.append( '\n' );
            }
          case 144: break;
          case 42: 
            { addToken(yytext(), "operador menor igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 145: break;
          case 43: 
            { addToken(yytext(), "operador no igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 146: break;
          case 44: 
            { addToken(yytext(), "operador mayor igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 147: break;
          case 45: 
            { addToken(yytext(), "operador igual igual"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 148: break;
          case 46: 
            { addToken(yytext(), "Palabra Reservada if"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 149: break;
          case 47: 
            { addToken(yytext(), "Palabra Reservada de difinicion HScript"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 150: break;
          case 48: 
            { addToken(yytext(), "operador AND"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 151: break;
          case 49: 
            { addToken(yytext(), "operador OR"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 152: break;
          case 50: 
            { addToken(yytext(), "numeroDecimal"); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 153: break;
          case 51: 
            { addToken(yytext(), "Palabra Reservada path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 154: break;
          case 52: 
            { addToken(yytext(), "Palabra Reservada alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 155: break;
          case 53: 
            { addToken(yytext(), "Palabra Reservada true"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 156: break;
          case 54: 
            { addToken(yytext(), "Palabra Reservada fila"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 157: break;
          case 55: 
            { addToken(yytext(), "Palabra Reservada echo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 158: break;
          case 56: 
            { addToken(yytext(), "Palabra Reservada else"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 159: break;
          case 57: 
            { addToken(yytext(), "Palabra Reservada compi"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 160: break;
          case 58: 
            { addToken(yytext(), "Palabra Reservada ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 161: break;
          case 59: 
            { addToken(yytext(), "Palabra Reservada borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 162: break;
          case 60: 
            { addToken(yytext(), "Palabra Reservada boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 163: break;
          case 61: 
            { addToken(yytext(), "Palabra Reservada tabla"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 164: break;
          case 62: 
            { addToken(yytext(), "Palabra Reservada texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 165: break;
          case 63: 
            { addToken(yytext(), "Palabra Reservada salto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 166: break;
          case 64: 
            { addToken(yytext(), "Palabra Reservada fondo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 167: break;
          case 65: 
            { addToken(yytext(), "Palabra Reservada false"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 168: break;
          case 66: 
            { addToken(yytext(), "Palabra Reservada cuerpo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 169: break;
          case 67: 
            { addToken(yytext(), "Palabra Reservada imagen");  /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 170: break;
          case 68: 
            { addToken(yytext(), "Palabra Reservada titulo");  /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 171: break;
          case 69: 
            { addToken(yytext(), "Palabra Reservada textoa"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 172: break;
          case 70: 
            { addToken(yytext(), "Palabra Reservada textob"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 173: break;
          case 71: 
            { addToken(yytext(), "Palabra Reservada columna"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 174: break;
          case 72: 
            { addToken(yytext(), "Palabra Reservada parrafo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 175: break;
          case 73: 
            { addToken(yytext(), "Palabra Reservada espacio"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 176: break;
          case 74: 
            { addToken(yytext(), "Palabra Reservada derecha"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 177: break;
          case 75: 
            { addToken(yytext(), "Palabra Reservada repetir"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 178: break;
          case 76: 
            { addToken(yytext(), "Funcion set path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 179: break;
          case 77: 
            { addToken(yytext(), "Funcion set alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 180: break;
          case 78: 
            { addToken(yytext(), "Funcion get path"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 181: break;
          case 79: 
            { addToken(yytext(), "Funcion get alto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 182: break;
          case 80: 
            { addToken(yytext(), "Palabra Reservada columnac"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 183: break;
          case 81: 
            { addToken(yytext(), "Palabra Reservada cabecera"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 184: break;
          case 82: 
            { addToken(yytext(), "Palabra Reservada centrado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 185: break;
          case 83: 
            { addToken(yytext(), "Funcion insertar"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 186: break;
          case 84: 
            { addToken(yytext(), "Funcion set ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 187: break;
          case 85: 
            { addToken(yytext(), "Funcion set borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 188: break;
          case 86: 
            { addToken(yytext(), "Funcion set texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 189: break;
          case 87: 
            { addToken(yytext(), "Funcion get ancho"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 190: break;
          case 88: 
            { addToken(yytext(), "Funcion get borde"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 191: break;
          case 89: 
            { addToken(yytext(), "Funcion get texto"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 192: break;
          case 90: 
            { addToken(yytext(), "Palabra Reservada izquierda"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 193: break;
          case 91: 
            { addToken(yytext(), "Palabra Reservada alineacion");/*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 194: break;
          case 92: 
            { addToken(yytext(), "Funcion crear boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 195: break;
          case 93: 
            { addToken(yytext(), "Funcion crear tabla"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 196: break;
          case 94: 
            { addToken(yytext(), "Funcion click boton"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 197: break;
          case 95: 
            { addToken(yytext(), "Palabra Reservada justificado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 198: break;
          case 96: 
            { addToken(yytext(), "Funcion crear imagen"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 199: break;
          case 97: 
            { addToken(yytext(), "Funcion crear texto A"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 200: break;
          case 98: 
            { addToken(yytext(), "Funcion crear texto B"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 201: break;
          case 99: 
            { addToken(yytext(), "Funcion crear parrafo"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 202: break;
          case 100: 
            { addToken(yytext(), "Funcion set contenido"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 203: break;
          case 101: 
            { addToken(yytext(), "Funcion get contenido"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 204: break;
          case 102: 
            { addToken(yytext(), "Funcion set alineacion"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 205: break;
          case 103: 
            { addToken(yytext(), "Funcion get alineacion"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
