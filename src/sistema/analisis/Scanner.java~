/* The following code was generated by JFlex 1.7.0 */

package sistema.analisis;

import java_cup.runtime.Symbol;
import sistema.bean.Token;
import main.Main;

import static sistema.ui.Principal.errores;
import static sistema.ui.Principal.tokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ETIQUETA_CON_TEXTO = 2;
  public static final int TEXTO_ENTRE_COMILLAS = 4;
  public static final int TEXTO_ENTRE_COMILLAS_BOTON = 6;
  public static final int TEXTO_ENTRE_COMILLAS_IMAGEN = 8;
  public static final int ETIQUETA_ESPECIAL = 10;
  public static final int ETIQUETA_IMAGEN = 12;
  public static final int ETIQUETA_BOTON = 14;
  public static final int ETIQUETA_IMAGEN_CIERRE = 16;
  public static final int ETIQUETA_BOTON_CIERRE = 18;
  public static final int ETIQUETA_TABLA = 20;
  public static final int ETIQUETA_TABLA_CIERRE = 22;
  public static final int CONTENIDO_TABLA = 24;
  public static final int ETIQUETA_ESPECIAL_TABLA = 26;
  public static final int ETIQUETA_CON_TEXTO_TABLA = 28;
  public static final int ETIQUETA_IMAGEN_TABLA = 30;
  public static final int ETIQUETA_BOTON_TABLA = 32;
  public static final int ETIQUETA_IMAGEN_CIERRE_TABLA = 34;
  public static final int ETIQUETA_BOTON_CIERRE_TABLA = 36;
  public static final int TEXTO_ENTRE_COMILLAS_BOTON_TABLA = 38;
  public static final int TEXTO_ENTRE_COMILLAS_IMAGEN_TABLA = 40;
  public static final int ETIQUETA_HS = 42;
  public static final int TEXTO_ENTRE_COMILLAS_HSCRIPT = 44;
  public static final int CONTENIDO_IF_ELSE_REPETIR = 46;
  public static final int CONTENIDO_IF_ELSE_REPETIR_TABLA = 48;
  public static final int ETIQUETA_HS_TABLA = 50;
  public static final int TEXTO_ENTRE_COMILLAS_HSCRIPT_TABLA = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 11, 11, 
    11, 11, 23, 23, 24, 24
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2, 58, 59,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  5, 14, 54, 42,  0, 52,  0, 46, 47,  8, 44, 55, 45, 11,  7, 
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0, 43,  4, 13,  6, 36, 
     0, 22, 23, 16, 31, 24, 29, 35, 37, 21, 40, 57, 28, 18, 30, 17, 
    19, 39, 25, 33, 26, 27, 12, 12, 34, 12, 38, 50, 41, 51, 12, 12, 
    12, 22, 23, 16, 31, 24, 29, 35, 37, 21, 40, 57, 28, 18, 30, 17, 
    19, 39, 25, 33, 26, 27, 12, 12, 34, 12, 38, 48, 53, 49, 15,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\20\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\2\20\1\21\2\1\1\22\1\23"+
    "\3\1\1\24\1\25\1\1\1\26\16\1\1\27\1\30"+
    "\1\31\1\32\2\1\1\33\1\34\1\4\1\35\1\5"+
    "\1\36\1\37\2\40\1\41\1\42\1\7\1\43\1\42"+
    "\1\1\5\42\1\1\2\42\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\2\1"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\22\0\1\65"+
    "\11\0\1\66\1\67\1\70\1\71\1\0\1\72\3\0"+
    "\1\73\17\0\1\74\5\0\1\75\1\76\1\77\1\3"+
    "\2\0\1\100\2\42\1\101\1\0\1\101\6\42\1\0"+
    "\2\42\1\102\1\103\1\0\1\3\16\0\1\104\31\0"+
    "\1\105\5\0\1\3\2\0\2\106\1\42\1\0\1\42"+
    "\1\0\2\42\1\0\4\42\1\0\2\42\25\0\1\107"+
    "\1\110\5\0\1\111\6\0\1\112\7\0\1\42\1\0"+
    "\1\42\1\0\1\42\1\113\2\114\1\42\1\111\1\42"+
    "\5\0\11\42\1\115\4\0\1\116\2\0\1\117\1\0"+
    "\1\120\1\121\10\0\1\122\1\123\1\124\1\0\1\125"+
    "\1\126\1\127\3\0\1\130\1\131\1\132\4\0\1\133"+
    "\1\42\1\0\1\42\1\0\2\42\1\127\6\0\13\42"+
    "\1\0\1\134\1\0\1\135\1\0\1\136\1\137\1\140"+
    "\6\0\1\141\1\142\1\143\1\144\2\0\1\145\1\0"+
    "\1\146\1\147\1\150\1\151\1\42\1\0\3\42\1\0"+
    "\1\42\1\0\1\42\1\0\1\42\7\0\11\42\1\0"+
    "\4\42\1\0\1\152\1\153\4\0\1\154\1\0\1\155"+
    "\1\156\1\157\1\42\1\0\4\42\1\0\1\42\1\0"+
    "\1\42\2\160\1\0\1\161\1\0\1\162\3\0\1\42"+
    "\1\161\1\42\1\162\4\42\1\163\1\0\1\42\1\164"+
    "\2\42\1\165\5\0\1\166\1\42\1\0\4\42\1\0"+
    "\1\42\2\167\2\0\1\170\1\171\1\172\2\42\1\170"+
    "\1\171\1\172\1\42\1\0\1\42\1\173\1\174\2\0"+
    "\1\175\2\0\1\42\1\0\4\42\1\0\1\42\2\0"+
    "\3\42\1\0\1\42\1\176\2\0\1\177\1\42\1\0"+
    "\1\42\1\200\1\201\1\42\2\202\2\0\2\42\1\0"+
    "\1\42\1\0\1\42\1\203\1\0\1\42\2\204\1\205"+
    "\1\206\2\0\2\42\1\0\1\42\1\0\1\42\1\0"+
    "\1\207\1\210\1\0\1\210\1\42\2\211\1\0\1\42"+
    "\1\212\2\213\2\214";

  private static int [] zzUnpackAction() {
    int [] result = new int[619];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u05dc\0\u05dc\0\u0654\0\u0690\0\u05dc"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u0654\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u05dc\0\u0a8c\0\u05dc"+
    "\0\u05dc\0\u0ac8\0\u05dc\0\u05dc\0\u0b04\0\u05dc\0\u0b40\0\u0b7c"+
    "\0\u05dc\0\u05dc\0\u0bb8\0\u0bf4\0\u0c30\0\u0654\0\u05dc\0\u0c6c"+
    "\0\u05dc\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u05dc"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u0ff0\0\u102c\0\u05dc\0\u05dc\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u05dc\0\u1158\0\u1194\0\u05dc\0\u11d0"+
    "\0\u120c\0\u0924\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u05dc\0\u05dc\0\u05dc\0\u05dc"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u11d0\0\u11d0\0\u14a0"+
    "\0\u14dc\0\u05dc\0\u05dc\0\u05dc\0\u0924\0\u05dc\0\u05dc\0\u1518"+
    "\0\u0690\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u08e8\0\u05dc\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u1ab8\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u0ac8"+
    "\0\u05dc\0\u1af4\0\u1b30\0\u1b6c\0\u05dc\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u0f3c\0\u05dc\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u05dc\0\u05dc\0\u05dc\0\u201c\0\u2058\0\u2094"+
    "\0\u05dc\0\u20d0\0\u210c\0\u05dc\0\u2148\0\u11d0\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u05dc"+
    "\0\u05dc\0\u23a0\0\u1590\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac"+
    "\0\u26e8\0\u05dc\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30"+
    "\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u05dc\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u05dc\0\u2ee0\0\u2f1c\0\u2f58"+
    "\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8"+
    "\0\u3714\0\u05dc\0\u05dc\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840"+
    "\0\u05dc\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u05dc"+
    "\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88"+
    "\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u11d0\0\u05dc\0\u11d0\0\u3cb4"+
    "\0\u11d0\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58"+
    "\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038"+
    "\0\u05dc\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u05dc\0\u4164\0\u41a0"+
    "\0\u05dc\0\u41dc\0\u05dc\0\u05dc\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\u4308\0\u4344\0\u4380\0\u43bc\0\u05dc\0\u05dc\0\u05dc\0\u43f8"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u4434\0\u4470\0\u44ac\0\u05dc\0\u05dc"+
    "\0\u05dc\0\u44e8\0\u4524\0\u4560\0\u459c\0\u05dc\0\u45d8\0\u4614"+
    "\0\u4650\0\u468c\0\u46c8\0\u4704\0\u11d0\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u05dc"+
    "\0\u4b78\0\u05dc\0\u4bb4\0\u05dc\0\u05dc\0\u05dc\0\u4bf0\0\u4c2c"+
    "\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u05dc\0\u05dc\0\u05dc\0\u05dc"+
    "\0\u4d58\0\u4d94\0\u05dc\0\u4dd0\0\u05dc\0\u05dc\0\u05dc\0\u05dc"+
    "\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0"+
    "\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u5190"+
    "\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u5370"+
    "\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8\0\u5514\0\u5550"+
    "\0\u558c\0\u05dc\0\u05dc\0\u55c8\0\u5604\0\u5640\0\u567c\0\u05dc"+
    "\0\u56b8\0\u56f4\0\u05dc\0\u05dc\0\u5730\0\u576c\0\u57a8\0\u57e4"+
    "\0\u5820\0\u585c\0\u5898\0\u58d4\0\u5910\0\u594c\0\u05dc\0\u11d0"+
    "\0\u5988\0\u05dc\0\u59c4\0\u05dc\0\u5a00\0\u5a3c\0\u5a78\0\u5ab4"+
    "\0\u11d0\0\u5af0\0\u11d0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u11d0"+
    "\0\u5c1c\0\u5c58\0\u11d0\0\u5c94\0\u5cd0\0\u05dc\0\u5d0c\0\u5d48"+
    "\0\u5d84\0\u5dc0\0\u5dfc\0\u05dc\0\u5e38\0\u5e74\0\u5eb0\0\u5eec"+
    "\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc\0\u05dc\0\u11d0\0\u6018\0\u6054"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u6090\0\u60cc\0\u11d0\0\u11d0\0\u11d0"+
    "\0\u6108\0\u6144\0\u6180\0\u11d0\0\u11d0\0\u61bc\0\u61f8\0\u05dc"+
    "\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c\0\u63d8"+
    "\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c\0\u65b8"+
    "\0\u65f4\0\u05dc\0\u6630\0\u666c\0\u05dc\0\u66a8\0\u66e4\0\u6720"+
    "\0\u11d0\0\u11d0\0\u675c\0\u05dc\0\u11d0\0\u6798\0\u67d4\0\u6810"+
    "\0\u684c\0\u6888\0\u68c4\0\u6900\0\u693c\0\u05dc\0\u6978\0\u69b4"+
    "\0\u05dc\0\u11d0\0\u11d0\0\u11d0\0\u69f0\0\u6a2c\0\u6a68\0\u6aa4"+
    "\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u6bd0\0\u11d0\0\u05dc\0\u6c0c"+
    "\0\u11d0\0\u6c48\0\u05dc\0\u11d0\0\u6c84\0\u6cc0\0\u05dc\0\u05dc"+
    "\0\u11d0\0\u05dc\0\u11d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[619];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\5\32\1\42\1\43\1\44\1\45\2\32\1\46\2\47"+
    "\1\32\1\50\1\51\1\32\1\52\2\32\1\53\2\32"+
    "\2\54\2\32\1\55\25\32\1\0\1\35\1\32\1\33"+
    "\1\34\1\35\1\56\1\37\1\57\1\41\5\32\1\42"+
    "\1\60\4\32\1\61\2\32\1\62\3\32\1\63\5\32"+
    "\2\64\30\32\1\0\1\35\1\65\2\0\13\65\1\66"+
    "\32\65\1\67\23\65\2\0\13\65\1\70\32\65\1\67"+
    "\23\65\2\0\13\65\1\71\32\65\1\67\22\65\1\32"+
    "\2\0\3\32\1\72\63\32\2\0\1\32\1\33\1\34"+
    "\1\35\1\56\1\37\1\73\2\32\1\74\1\75\2\32"+
    "\1\42\1\76\4\32\1\77\2\32\1\100\43\32\1\0"+
    "\1\35\1\32\1\33\1\34\1\35\1\56\1\37\1\101"+
    "\6\32\1\42\1\102\5\32\2\103\4\32\1\104\37\32"+
    "\1\0\1\35\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\32\1\41\14\32\2\105\44\32\1\0\1\35\1\32"+
    "\1\33\1\34\1\35\1\106\1\37\1\32\1\107\17\32"+
    "\1\110\42\32\1\0\1\35\1\32\1\33\1\34\1\35"+
    "\1\56\1\37\1\111\6\32\1\42\11\32\1\112\2\32"+
    "\1\113\2\32\1\114\34\32\1\0\1\35\1\32\2\0"+
    "\67\32\2\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\10\32\1\115\2\32\1\116\2\117\1\32"+
    "\1\120\2\32\1\121\2\32\1\122\2\32\2\123\2\32"+
    "\1\124\25\32\1\0\1\35\1\32\2\0\3\32\1\125"+
    "\63\32\2\0\1\32\1\33\1\34\1\35\1\56\1\37"+
    "\1\57\1\41\5\32\1\42\1\60\4\32\1\126\2\32"+
    "\1\62\3\32\1\127\5\32\2\64\30\32\1\0\1\35"+
    "\1\32\1\33\1\34\1\35\1\56\1\37\1\130\2\32"+
    "\1\74\1\75\2\32\1\42\1\131\4\32\1\77\2\32"+
    "\1\100\43\32\1\0\1\35\1\32\1\33\1\34\1\35"+
    "\1\56\1\37\1\132\6\32\1\42\1\133\5\32\2\103"+
    "\4\32\1\104\37\32\1\0\1\35\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\32\1\41\14\32\2\134\44\32"+
    "\1\0\1\35\1\32\1\33\1\34\1\35\1\106\1\37"+
    "\1\32\1\107\17\32\1\135\42\32\1\0\1\35\1\65"+
    "\2\0\13\65\1\136\32\65\1\67\23\65\2\0\13\65"+
    "\1\137\32\65\1\67\22\65\1\32\1\33\1\34\1\35"+
    "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147"+
    "\1\150\1\151\1\152\1\32\1\153\3\150\1\154\1\155"+
    "\2\150\1\156\1\157\1\160\2\150\1\161\2\150\1\162"+
    "\1\163\1\150\1\164\1\165\5\150\1\166\1\167\1\170"+
    "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\200"+
    "\1\201\1\202\1\203\1\32\1\150\1\0\1\35\1\65"+
    "\2\0\13\65\1\204\32\65\1\67\22\65\1\32\1\33"+
    "\1\34\1\35\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\1\151\1\205\1\32\1\153\3\150"+
    "\1\154\1\155\2\150\1\156\1\157\1\160\2\150\1\161"+
    "\2\150\1\162\1\163\1\150\1\164\1\206\5\150\1\166"+
    "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\1\32\1\150\1\0"+
    "\1\35\1\65\2\0\13\65\1\207\32\65\1\67\22\65"+
    "\76\0\1\34\76\0\1\210\66\0\5\211\1\212\1\213"+
    "\65\211\21\0\1\214\4\0\1\215\4\0\1\216\66\0"+
    "\1\217\67\0\1\220\72\0\1\221\112\0\2\222\56\0"+
    "\2\223\1\224\1\0\1\225\64\0\1\226\100\0\1\227"+
    "\112\0\1\230\26\0\4\231\1\232\67\231\20\0\1\233"+
    "\3\0\2\234\11\0\1\235\10\0\1\236\51\0\1\237"+
    "\101\0\1\240\63\0\2\241\2\0\1\242\71\0\1\243"+
    "\45\0\1\65\2\0\13\65\1\0\32\65\1\0\22\65"+
    "\16\0\1\244\12\0\1\245\1\246\3\0\1\247\35\0"+
    "\4\250\1\251\67\250\11\0\2\75\107\0\1\252\101\0"+
    "\1\253\1\0\1\254\74\0\1\255\64\0\1\256\65\0"+
    "\1\257\72\0\1\260\73\0\1\261\103\0\1\262\70\0"+
    "\1\263\66\0\1\264\100\0\1\265\67\0\1\266\72\0"+
    "\1\267\100\0\1\270\71\0\2\271\74\0\1\272\112\0"+
    "\1\273\26\0\4\274\1\275\67\274\26\0\1\276\71\0"+
    "\2\277\2\0\1\300\65\0\1\301\72\0\1\302\67\0"+
    "\1\303\73\0\1\304\73\0\1\305\65\0\1\306\1\307"+
    "\76\0\1\310\71\0\2\146\1\310\71\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\13\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\17\0\1\311\67\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\4\150\1\312"+
    "\2\150\1\313\3\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\37\0\1\314\1\315\46\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\10\150\1\316\1\317"+
    "\1\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\1\320\3\150"+
    "\1\0\7\150\1\321\3\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\13\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\3\150\1\322\7\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\4\150\1\323\6\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\1\150"+
    "\1\324\11\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\32\0\1\325\54\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\3\150\1\326\7\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\3\150\1\327\7\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\66\0\1\330\74\0\1\331\6\0\5\210\1\332\1\333"+
    "\65\210\5\334\1\212\1\35\65\334\5\213\1\335\66\213"+
    "\22\0\1\336\100\0\1\337\74\0\1\340\74\0\1\341"+
    "\70\0\1\342\77\0\1\343\64\0\1\344\102\0\1\345"+
    "\70\0\1\346\106\0\1\347\67\0\1\350\71\0\1\351"+
    "\77\0\2\352\62\0\1\353\111\0\1\354\55\0\1\355"+
    "\76\0\1\356\71\0\1\357\66\0\2\360\100\0\1\361"+
    "\103\0\1\362\65\0\1\363\71\0\1\364\73\0\1\365"+
    "\61\0\1\366\115\0\1\367\57\0\1\370\77\0\1\371"+
    "\72\0\1\372\75\0\1\373\74\0\1\374\73\0\1\375"+
    "\70\0\1\376\70\0\1\377\77\0\1\u0100\70\0\1\u0101"+
    "\100\0\1\u0102\73\0\1\u0103\77\0\2\u0104\63\0\1\u0105"+
    "\74\0\1\u0106\103\0\1\u0107\57\0\1\u0108\77\0\1\u0109"+
    "\41\0\1\306\1\u010a\1\35\71\306\10\u010b\1\u010c\63\u010b"+
    "\11\0\1\u010d\1\u010e\72\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\3\150\1\u010f\7\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\u0110\1\u0111\12\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\42\0\2\u0112"+
    "\43\0\2\150\1\0\1\150\3\0\4\150\1\0\13\150"+
    "\1\u0112\1\u0113\2\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\13\150\1\0\3\150\1\0\1\u0114\4\150\10\0\2\150"+
    "\5\0\1\150\13\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\13\150\1\u0115\1\u0116\2\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\3\150\1\u0117\1\0\13\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\13\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\6\150\1\u0118\4\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\7\150\1\u0119\3\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\34\0\1\u011a\52\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\5\150\1\u011b\5\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\13\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\5\150\1\u011c\5\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\2\0\6\332"+
    "\1\35\65\332\5\334\1\212\1\0\65\334\6\0\1\35"+
    "\110\0\1\u011d\100\0\1\u011e\74\0\1\u011f\73\0\1\u0120"+
    "\105\0\1\u0121\51\0\1\u0122\100\0\1\u0123\100\0\1\u0124"+
    "\74\0\1\u0125\71\0\1\u0126\100\0\1\u0127\66\0\1\u0128"+
    "\77\0\1\u0129\104\0\1\u012a\55\0\1\u012b\102\0\2\u012c"+
    "\63\0\1\u012d\100\0\1\u012e\70\0\1\u012f\72\0\1\u0130"+
    "\73\0\1\u0131\106\0\1\u0132\47\0\1\u0133\117\0\1\u0134"+
    "\60\0\1\u0135\104\0\1\u0136\51\0\1\u0137\111\0\1\u0138"+
    "\64\0\1\u0139\103\0\2\u013a\65\0\1\u013b\71\0\1\u013c"+
    "\105\0\1\u013d\51\0\1\u013e\106\0\1\u013f\65\0\1\u0140"+
    "\77\0\1\u0141\72\0\1\u0142\75\0\1\u0143\72\0\1\u0144"+
    "\104\0\1\u0145\51\0\1\u0146\54\0\1\35\71\0\10\u010b"+
    "\1\u0147\63\u010b\7\0\1\35\1\u010c\74\0\2\u010e\72\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\1\150\1\u0148"+
    "\11\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\22\0\1\u0149\64\0\2\150\1\0\1\150\3\0"+
    "\1\u014a\3\150\1\0\13\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\32\0\1\u014b\54\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\3\150\1\u014c\7\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\1\150\1\u014d\2\150"+
    "\1\0\13\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\32\0\1\u014e\54\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\3\150\1\u014f\7\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\3\150\1\u0150\7\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\3\150"+
    "\1\u0151\7\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\13\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\13\150\1\u013a\1\u0152\2\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\22\0\1\u0153\2\0\1\u0154\2\0"+
    "\1\u0155\1\u0156\2\0\1\u0157\52\0\2\150\1\0\1\150"+
    "\3\0\1\u0158\2\150\1\u0159\1\0\1\150\1\u015a\1\u015b"+
    "\2\150\1\u015c\5\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\1\u015d\2\150\1\u015e\1\0\1\150\1\u015f\3\150\1\u0160"+
    "\5\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\26\0\2\u0161\66\0\1\u0162\76\0\1\u0163\76\0"+
    "\1\u0164\75\0\1\u0165\101\0\1\u0166\55\0\1\u0167\107\0"+
    "\1\u0168\65\0\1\u0169\66\0\1\u016a\73\0\1\u016b\73\0"+
    "\1\u016c\104\0\1\u016d\74\0\1\u016e\70\0\1\u016f\75\0"+
    "\1\u0170\67\0\1\u0171\75\0\1\u0172\77\0\1\u0173\60\0"+
    "\1\u0174\73\0\1\u0175\73\0\1\u0176\73\0\1\u0177\102\0"+
    "\1\u0178\101\0\1\u0179\65\0\1\u017a\73\0\1\u017b\65\0"+
    "\1\u017c\77\0\1\u017d\75\0\1\u017e\101\0\1\u017f\63\0"+
    "\1\u0180\66\0\1\u0181\100\0\1\u0182\101\0\1\u0183\60\0"+
    "\1\u0184\102\0\1\u0185\101\0\1\u0186\35\0\7\u010b\1\35"+
    "\1\u0147\63\u010b\11\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\4\150\1\u0187\6\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\72\0\2\u0188\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\13\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\4\0\1\u0188\1\u0189\33\0"+
    "\1\u018a\53\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\4\150\1\u018b\6\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\5\150\1\u018c\5\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\3\150\1\u018d\7\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\23\0"+
    "\1\u018e\100\0\1\u018f\101\0\1\u0190\1\0\1\u0191\56\0"+
    "\1\u0192\102\0\1\u0193\54\0\2\150\1\0\1\150\3\0"+
    "\1\150\1\u0194\2\150\1\0\13\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\1\150\1\u0195\11\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\7\150\1\u0196"+
    "\1\150\1\u0197\1\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\1\150\1\u0198\2\150\1\0\13\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\3\150\1\u0199\7\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\1\150\1\u019a\2\150\1\0"+
    "\13\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\1\150\1\u019b\11\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\7\150\1\u019c\1\150\1\u019d\1\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\3\150\1\u019e"+
    "\7\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\32\0\1\u019f\64\0\1\u01a0\107\0\1\u01a1\74\0"+
    "\1\u01a2\61\0\2\u01a3\67\0\1\u01a4\100\0\1\u01a5\1\u01a6"+
    "\75\0\1\u01a7\66\0\2\u01a8\66\0\1\u01a9\77\0\2\u01aa"+
    "\103\0\1\u01ab\64\0\1\u01ac\66\0\1\u01ad\100\0\1\u01ae"+
    "\1\u01af\102\0\1\u01b0\73\0\1\u01b1\72\0\1\u01b2\74\0"+
    "\1\u01b3\72\0\1\u01b4\57\0\1\u01b5\100\0\1\u01b6\1\u01b7"+
    "\102\0\1\u01b8\46\0\2\150\1\0\1\150\3\0\3\150"+
    "\1\u01b9\1\u01ba\1\u01bb\1\150\1\u01bc\2\150\1\u01bd\5\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\31\0\1\u01be\55\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\2\150\1\u01bf\10\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\34\0\1\u01c0\52\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\5\150\1\u01c1\5\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\u01c2\1\u01c3"+
    "\12\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\40\0\1\u01c4\67\0\1\u01c5\65\0\2\u01c6\4\0"+
    "\1\u01c7\61\0\1\u01c8\104\0\1\u01c9\104\0\1\u01ca\42\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\11\150\1\u01cb"+
    "\1\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\5\150\1\u01cc\5\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\u01c6\1\u01cd\4\150\1\u01ce\5\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\1\u01cf\3\150\1\0\13\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\4\150\1\u01d0"+
    "\6\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\13\150\1\0\1\150\1\u01d1\1\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\11\150\1\u01d2\1\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\5\150\1\u01d3\5\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\u01d4\1\u01d5\4\150"+
    "\1\u01d6\5\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\13\0\2\150\1\0\1\150\3\0\1\u01d7"+
    "\3\150\1\0\13\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\13\150\1\0\1\150\1\u01d8\1\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\33\0\1\u01d9\63\0"+
    "\1\u01da\73\0\1\u01db\100\0\1\u01dc\75\0\1\u01dd\110\0"+
    "\1\u01de\63\0\1\u01df\57\0\1\u01e0\72\0\1\u01e1\101\0"+
    "\1\u01e2\66\0\1\u01e3\73\0\1\u01e4\63\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\1\150\1\u01e5\11\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\24\0"+
    "\1\u01e6\62\0\2\150\1\0\1\150\3\0\2\150\1\u01e7"+
    "\1\150\1\0\13\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\1\150\1\u01e8\2\150\1\0\13\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\1\150\1\u01e9\1\150\1\u01ea"+
    "\7\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\23\0\1\u01eb\63\0\2\150\1\0\1\150\3\0"+
    "\1\150\1\u01ec\2\150\1\0\13\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\30\0\1\u01ed\56\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\1\150\1\u01ee"+
    "\11\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\33\0\1\u01ef\53\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\4\150\1\u01f0\6\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\34\0\1\u01f1\106\0"+
    "\1\u01f2\64\0\1\u01f3\56\0\1\u01f4\117\0\1\u01f5\65\0"+
    "\1\u01f6\66\0\1\u01f7\52\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\5\150\1\u01f8\5\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\13\150\1\0\3\150\1\0"+
    "\1\u01f9\4\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\11\150\1\u01fa\1\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\1\150\1\u01fb\2\150"+
    "\1\0\13\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\13\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\13\150\1\0\3\150\1\0\1\u01fc\4\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\12\150\1\u01fd\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\13\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\5\150\1\u01fe\5\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\5\150\1\u01ff\5\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\13\150"+
    "\1\0\3\150\1\0\1\u0200\4\150\10\0\2\150\5\0"+
    "\1\150\40\0\1\u0201\46\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\11\150\1\u0202\1\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\1\150\1\u0203\2\150\1\0\13\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\13\150\1\0"+
    "\3\150\1\0\1\u0204\4\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\5\150"+
    "\1\u0205\5\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\30\0\1\u0206\104\0\1\u0207\65\0\1\u0208"+
    "\70\0\1\u0209\71\0\2\u020a\72\0\2\u020b\66\0\1\u020c"+
    "\64\0\2\150\1\0\1\150\3\0\4\150\1\0\4\150"+
    "\1\u020d\6\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\30\0\1\u020e\56\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\1\150\1\u020f\11\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\5\150\1\u0210\5\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\2\150"+
    "\1\u0211\10\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\13\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\13\150\1\0\1\150\1\u0212\1\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\34\0\1\u0213\52\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\5\150\1\u0214\5\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\33\0\1\u0215\53\0\2\150\1\0\1\150\3\0\4\150"+
    "\1\0\4\150\1\u0216\6\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\32\0\1\u0217\73\0\1\u0218"+
    "\64\0\1\u0219\102\0\1\u021a\64\0\1\u021b\63\0\2\150"+
    "\1\0\1\150\3\0\4\150\1\0\3\150\1\u021c\7\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\3\150"+
    "\1\u021d\7\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\13\0\2\150\1\0\1\150\3\0\1\150"+
    "\1\u021e\2\150\1\0\13\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\13\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\3\150\1\u021f\7\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\1\150\1\u0220\2\150\1\0\13\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\4\150\1\0\3\150"+
    "\1\u0221\7\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\32\0\1\u0222\54\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\3\150\1\u0223\7\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\1\150\1\u0224\2\150\1\0\13\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\13\0\2\150\1\0\1\150\3\0\1\150\1\u0225\2\150"+
    "\1\0\13\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\23\0\1\u0226\111\0\1\u0227\52\0\1\u0228"+
    "\75\0\1\u0229\74\0\1\u022a\63\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\4\150\1\u022b\6\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\45\0\1\u022c"+
    "\41\0\2\150\1\0\1\150\3\0\4\150\1\0\13\150"+
    "\1\0\2\150\1\u022d\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\1\150\1\u022e"+
    "\2\150\1\0\13\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\7\150\1\u022f\3\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\5\150\1\u0230\5\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\23\0"+
    "\1\u0231\63\0\2\150\1\0\1\150\3\0\1\150\1\u0232"+
    "\2\150\1\0\13\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\40\0\1\u0233\63\0\1\u0234\56\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\11\150\1\u0235"+
    "\1\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\1\150\1\u0236\11\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\11\150\1\u0237\1\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\30\0\1\u0238\56\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\1\150\1\u0239"+
    "\11\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\20\0\1\u023a\103\0\1\u023b\73\0\1\u023c\103\0"+
    "\1\u023d\46\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\1\150\1\u023e\11\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\32\0\1\u023f\54\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\3\150\1\u0240\7\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\11\150\1\u0241"+
    "\1\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\13\0\2\150\1\0\1\150\3\0\4\150\1\0"+
    "\1\150\1\u0242\11\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\13\0\2\150\1\0\1\150\3\0"+
    "\1\150\1\u0243\2\150\1\0\13\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\40\0\1\u0244\46\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\11\150\1\u0245"+
    "\1\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\26\0\2\u0246\66\0\1\u0247\64\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\u0246\1\u0248\12\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\1\u0249\3\150\1\0\13\150\1\0"+
    "\3\150\1\0\5\150\10\0\2\150\5\0\1\150\13\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\u024a\1\u024b\12\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\22\0\1\u024c\64\0\2\150\1\0\1\150\3\0\1\u024d"+
    "\3\150\1\0\13\150\1\0\3\150\1\0\5\150\10\0"+
    "\2\150\5\0\1\150\20\0\1\u024e\114\0\1\u024f\45\0"+
    "\2\150\1\0\1\150\3\0\4\150\1\0\10\150\1\u0250"+
    "\2\150\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\40\0\1\u0251\46\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\0\11\150\1\u0252\1\150\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\0\1\150\1\u0253\1\u0254\10\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\41\0\1\u0255\60\0\2\u0256\57\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\12\150\1\u0257\1\0\3\150\1\0"+
    "\5\150\10\0\2\150\5\0\1\150\13\0\2\150\1\0"+
    "\1\150\3\0\4\150\1\u0256\1\u0258\12\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\41\0\1\u0259"+
    "\45\0\2\150\1\0\1\150\3\0\4\150\1\0\12\150"+
    "\1\u025a\1\0\3\150\1\0\5\150\10\0\2\150\5\0"+
    "\1\150\26\0\2\u025b\57\0\2\150\1\0\1\150\3\0"+
    "\4\150\1\u025b\1\u025c\12\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\23\0\1\u025d\63\0\2\150"+
    "\1\0\1\150\3\0\1\150\1\u025e\2\150\1\0\13\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\23\0\1\u025f\73\0\1\u0260\63\0\2\150\1\0\1\150"+
    "\3\0\1\150\1\u0261\2\150\1\0\13\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\13\0\2\150"+
    "\1\0\1\150\3\0\1\150\1\u0262\2\150\1\0\13\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\23\0\1\u0263\63\0\2\150\1\0\1\150\3\0\1\150"+
    "\1\u0264\2\150\1\0\13\150\1\0\3\150\1\0\5\150"+
    "\10\0\2\150\5\0\1\150\23\0\1\u0265\63\0\2\150"+
    "\1\0\1\150\3\0\1\150\1\u0266\2\150\1\0\13\150"+
    "\1\0\3\150\1\0\5\150\10\0\2\150\5\0\1\150"+
    "\20\0\1\u0267\113\0\1\u0268\46\0\2\150\1\0\1\150"+
    "\3\0\4\150\1\0\11\150\1\u0269\1\150\1\0\3\150"+
    "\1\0\5\150\10\0\2\150\5\0\1\150\40\0\1\u026a"+
    "\46\0\2\150\1\0\1\150\3\0\4\150\1\0\11\150"+
    "\1\u026b\1\150\1\0\3\150\1\0\5\150\10\0\2\150"+
    "\5\0\1\150\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\1\11\1\1\2\11\2\1\5\11\21\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\2\1\2\11"+
    "\4\1\1\11\1\1\1\11\16\1\4\11\2\1\2\11"+
    "\4\1\1\11\2\1\1\11\15\1\11\11\4\1\3\11"+
    "\1\1\2\11\22\0\1\11\11\0\4\11\1\0\1\11"+
    "\3\0\1\11\17\0\1\11\5\0\3\11\1\1\2\0"+
    "\1\11\2\1\1\11\1\0\7\1\1\0\2\1\2\11"+
    "\1\0\1\1\16\0\1\11\31\0\1\11\5\0\1\1"+
    "\2\0\1\11\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\25\0\2\11\5\0\1\11\6\0"+
    "\1\11\7\0\1\1\1\0\1\1\1\0\2\1\1\11"+
    "\4\1\5\0\11\1\1\11\4\0\1\11\2\0\1\11"+
    "\1\0\2\11\10\0\3\11\1\0\3\11\3\0\3\11"+
    "\4\0\1\11\1\1\1\0\1\1\1\0\3\1\6\0"+
    "\13\1\1\0\1\11\1\0\1\11\1\0\3\11\6\0"+
    "\4\11\2\0\1\11\1\0\4\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\7\0\11\1"+
    "\1\0\4\1\1\0\2\11\4\0\1\11\1\0\1\1"+
    "\2\11\1\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\1\0\1\11\3\0\11\1"+
    "\1\0\4\1\1\11\5\0\1\11\1\1\1\0\4\1"+
    "\1\0\1\1\1\11\1\1\2\0\3\11\6\1\1\0"+
    "\3\1\2\0\1\11\2\0\1\1\1\0\4\1\1\0"+
    "\1\1\2\0\3\1\1\0\1\1\1\11\2\0\1\11"+
    "\1\1\1\0\4\1\1\11\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\1\1\1\11\3\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\0\2\1\1\11\1\1\1\0\1\1\2\11"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[619];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public void addToken(String lexema, String tipo){
        tokens.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void addError(String lexema, String tipo){
        errores.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public Symbol validarTextoEntreLLaves(String cadena){
        cadena = cadena.replace("\n", "");
        cadena = cadena.replace("<", "");
        cadena = cadena.replace(">", "");
        if(cadena.matches(".*([a-zA-Z]+|[0-9]+)+.*")){
            addToken(cadena, "texto Entre Etiquetas");
            return new Symbol(sym.textoEntreEtiquetas , yyline , yychar , cadena);
        }else{
            addToken("<", "menor que"); 
            return new Symbol(sym.menorQue , yyline , yychar , "<");
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yytext(), "NO RECONOCIDO - ANALIZADOR LEXICO");
            } 
            // fall through
          case 141: break;
          case 2: 
            { yychar=1;
            } 
            // fall through
          case 142: break;
          case 3: 
            { 
            } 
            // fall through
          case 143: break;
          case 4: 
            { addToken(yytext(), "menor que"); return new Symbol(sym.menorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 144: break;
          case 5: 
            { addToken(yytext(), "mayor que"); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 145: break;
          case 6: 
            { addToken(yytext(), "barra"); return new Symbol(sym.barra , yyline , yychar , yytext());
            } 
            // fall through
          case 146: break;
          case 7: 
            { addToken(yytext(), "igual"); return new Symbol(sym.igual , yyline , yychar , yytext());
            } 
            // fall through
          case 147: break;
          case 8: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS);
            } 
            // fall through
          case 148: break;
          case 9: 
            { addToken(yytext(), "aceptacion"); return new Symbol(sym.aceptacion , yyline , yychar , yytext());
            } 
            // fall through
          case 149: break;
          case 10: 
            { string.append( yytext() );
            } 
            // fall through
          case 150: break;
          case 11: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(YYINITIAL); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 151: break;
          case 12: 
            { string.append( '\\' );
            } 
            // fall through
          case 152: break;
          case 13: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_BOTON); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 153: break;
          case 14: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_IMAGEN); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 154: break;
          case 15: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_IMAGEN_CIERRE); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 155: break;
          case 16: 
            { addToken(yytext(), "Numero"); return new Symbol(sym.numero , yyline , yychar , yytext());
            } 
            // fall through
          case 156: break;
          case 17: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_IMAGEN);
            } 
            // fall through
          case 157: break;
          case 18: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_BOTON_CIERRE); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 158: break;
          case 19: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_BOTON);
            } 
            // fall through
          case 159: break;
          case 20: 
            { addToken(yytext(), "menor que cierre"); return new Symbol(sym.menorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 160: break;
          case 21: 
            { addToken(yytext(), "barra cierre"); return new Symbol(sym.barra , yyline , yychar , yytext());
            } 
            // fall through
          case 161: break;
          case 22: 
            { addToken(yytext(), "mayor que"); yybegin(CONTENIDO_TABLA); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 162: break;
          case 23: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_IMAGEN_CIERRE_TABLA); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 163: break;
          case 24: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_IMAGEN_TABLA);
            } 
            // fall through
          case 164: break;
          case 25: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_BOTON_CIERRE_TABLA); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 165: break;
          case 26: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_BOTON_TABLA);
            } 
            // fall through
          case 166: break;
          case 27: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_BOTON_TABLA); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 167: break;
          case 28: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_IMAGEN_TABLA); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 168: break;
          case 29: 
            { addToken(yytext(), "not"); return new Symbol(sym.not , yyline , yychar , yytext());
            } 
            // fall through
          case 169: break;
          case 30: 
            { addToken(yytext(), "division"); return new Symbol(sym.division , yyline , yychar , yytext());
            } 
            // fall through
          case 170: break;
          case 31: 
            { addToken(yytext(), "multiplicacion"); return new Symbol(sym.multiplicacion , yyline , yychar , yytext());
            } 
            // fall through
          case 171: break;
          case 32: 
            { addToken(yytext(), "numero entero"); return new Symbol(sym.entero , yyline , yychar , yytext());
            } 
            // fall through
          case 172: break;
          case 33: 
            { addToken(yytext(), "punto"); return new Symbol(sym.punto , yyline , yychar , yytext());
            } 
            // fall through
          case 173: break;
          case 34: 
            { addToken(yytext(), "identificador"); return new Symbol(sym.identificador , yyline , yychar , yytext());
            } 
            // fall through
          case 174: break;
          case 35: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_HSCRIPT);
            } 
            // fall through
          case 175: break;
          case 36: 
            { addToken(yytext(), "interrogacion"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.interrogacion , yyline , yychar , yytext());
            } 
            // fall through
          case 176: break;
          case 37: 
            { addToken(yytext(), "dolar"); return new Symbol(sym.dolar , yyline , yychar , yytext());
            } 
            // fall through
          case 177: break;
          case 38: 
            { addToken(yytext(), "punto y coma"); return new Symbol(sym.puntoYComa , yyline , yychar , yytext());
            } 
            // fall through
          case 178: break;
          case 39: 
            { addToken(yytext(), "mas"); return new Symbol(sym.mas , yyline , yychar , yytext());
            } 
            // fall through
          case 179: break;
          case 40: 
            { addToken(yytext(), "menos"); return new Symbol(sym.menos , yyline , yychar , yytext());
            } 
            // fall through
          case 180: break;
          case 41: 
            { addToken(yytext(), "parentesis abre"); return new Symbol(sym.parentesisAbre , yyline , yychar , yytext());
            } 
            // fall through
          case 181: break;
          case 42: 
            { addToken(yytext(), "parentesis cierra"); return new Symbol(sym.parentesisCierra , yyline , yychar , yytext());
            } 
            // fall through
          case 182: break;
          case 43: 
            { addToken(yytext(), "llave abre"); return new Symbol(sym.llaveAbre , yyline , yychar , yytext());
            } 
            // fall through
          case 183: break;
          case 44: 
            { addToken(yytext(), "llave cierra"); return new Symbol(sym.llaveCierra , yyline , yychar , yytext());
            } 
            // fall through
          case 184: break;
          case 45: 
            { addToken(yytext(), "corchete abre"); return new Symbol(sym.corcheteAbre , yyline , yychar , yytext());
            } 
            // fall through
          case 185: break;
          case 46: 
            { addToken(yytext(), "corchete cierra"); return new Symbol(sym.corcheteCierra , yyline , yychar , yytext());
            } 
            // fall through
          case 186: break;
          case 47: 
            { addToken(yytext(), "numeral"); return new Symbol(sym.numeral , yyline , yychar , yytext());
            } 
            // fall through
          case 187: break;
          case 48: 
            { addToken(yytext(), "coma"); return new Symbol(sym.coma , yyline , yychar , yytext());
            } 
            // fall through
          case 188: break;
          case 49: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_HS); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 189: break;
          case 50: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_HSCRIPT_TABLA);
            } 
            // fall through
          case 190: break;
          case 51: 
            { addToken(yytext(), "interrogacion"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.interrogacion , yyline , yychar , yytext());
            } 
            // fall through
          case 191: break;
          case 52: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_HS_TABLA); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 192: break;
          case 53: 
            { addToken(yytext(), "texto Entre Etiquetas"); return new Symbol(sym.textoEntreEtiquetas , yyline , yychar , yytext());
            } 
            // fall through
          case 193: break;
          case 54: 
            { string.append( '\"' );
            } 
            // fall through
          case 194: break;
          case 55: 
            { string.append( '\r' );
            } 
            // fall through
          case 195: break;
          case 56: 
            { string.append( '\t' );
            } 
            // fall through
          case 196: break;
          case 57: 
            { string.append( '\n' );
            } 
            // fall through
          case 197: break;
          case 58: 
            { yybegin(YYINITIAL); return validarTextoEntreLLaves(yytext());
            } 
            // fall through
          case 198: break;
          case 59: 
            { addToken(yytext(), "Palabra Reservada id"); return new Symbol(sym.id , yyline , yychar , yytext());
            } 
            // fall through
          case 199: break;
          case 60: 
            { yybegin(CONTENIDO_TABLA); return validarTextoEntreLLaves(yytext());
            } 
            // fall through
          case 200: break;
          case 61: 
            { addToken(yytext(), "menor igual"); return new Symbol(sym.menorIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 201: break;
          case 62: 
            { addToken(yytext(), "no igual"); return new Symbol(sym.noIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 202: break;
          case 63: 
            { addToken(yytext(), "mayor igual"); return new Symbol(sym.mayorIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 203: break;
          case 64: 
            { addToken(yytext(), "igual igual"); return new Symbol(sym.igualIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 204: break;
          case 65: 
            { addToken(yytext(), "Palabra Reservada if"); return new Symbol(sym.controlIf , yyline , yychar , yytext());
            } 
            // fall through
          case 205: break;
          case 66: 
            { addToken(yytext(), "and"); return new Symbol(sym.and , yyline , yychar , yytext());
            } 
            // fall through
          case 206: break;
          case 67: 
            { addToken(yytext(), "or"); return new Symbol(sym.or , yyline , yychar , yytext());
            } 
            // fall through
          case 207: break;
          case 68: 
            { addToken(yytext(), "Palabra Reservada etiqueta inicial hs"); yybegin(ETIQUETA_HS); return new Symbol(sym.inicioHS , yyline , yychar , yytext());
            } 
            // fall through
          case 208: break;
          case 69: 
            { addToken(yytext(), "Palabra Reservada etiqueta inicial hs"); yybegin(ETIQUETA_HS_TABLA); return new Symbol(sym.inicioHS , yyline , yychar , yytext());
            } 
            // fall through
          case 209: break;
          case 70: 
            { addToken(yytext(), "numero decimal"); return new Symbol(sym.decimal , yyline , yychar , yytext());
            } 
            // fall through
          case 210: break;
          case 71: 
            { addToken(yytext(), "Palabra Reservada path"); return new Symbol(sym.path , yyline , yychar , yytext());
            } 
            // fall through
          case 211: break;
          case 72: 
            { addToken(yytext(), "Palabra Reservada alto"); return new Symbol(sym.alto , yyline , yychar , yytext());
            } 
            // fall through
          case 212: break;
          case 73: 
            { addToken(yytext(), "Palabra Reservada true"); return new Symbol(sym.booleano , yyline , yychar , yytext());
            } 
            // fall through
          case 213: break;
          case 74: 
            { addToken(yytext(), "Palabra Reservada fila"); return new Symbol(sym.fila , yyline , yychar , yytext());
            } 
            // fall through
          case 214: break;
          case 75: 
            { addToken(yytext(), "Palabra Reservada echo"); return new Symbol(sym.echo , yyline , yychar , yytext());
            } 
            // fall through
          case 215: break;
          case 76: 
            { addToken(yytext(), "Palabra Reservada else"); return new Symbol(sym.controlElse , yyline , yychar , yytext());
            } 
            // fall through
          case 216: break;
          case 77: 
            { addToken(yytext(), "Palabra Reservada compi"); return new Symbol(sym.compi , yyline , yychar , yytext());
            } 
            // fall through
          case 217: break;
          case 78: 
            { addToken(yytext(), "Palabra Reservada boton"); yybegin(ETIQUETA_BOTON); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 218: break;
          case 79: 
            { addToken(yytext(), "Palabra Reservada tabla"); yybegin(ETIQUETA_TABLA); return new Symbol(sym.tabla , yyline , yychar , yytext());
            } 
            // fall through
          case 219: break;
          case 80: 
            { addToken(yytext(), "Palabra Reservada fondo"); return new Symbol(sym.fondo , yyline , yychar , yytext());
            } 
            // fall through
          case 220: break;
          case 81: 
            { addToken(yytext(), "Palabra Reservada salto"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.salto , yyline , yychar , yytext());
            } 
            // fall through
          case 221: break;
          case 82: 
            { addToken(yytext(), "Palabra Reservada salto"); return new Symbol(sym.salto , yyline , yychar , yytext());
            } 
            // fall through
          case 222: break;
          case 83: 
            { addToken(yytext(), "Palabra Reservada ancho"); return new Symbol(sym.ancho , yyline , yychar , yytext());
            } 
            // fall through
          case 223: break;
          case 84: 
            { addToken(yytext(), "Palabra Reservada texto"); return new Symbol(sym.texto , yyline , yychar , yytext());
            } 
            // fall through
          case 224: break;
          case 85: 
            { addToken(yytext(), "Palabra Reservada boton cierre"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 225: break;
          case 86: 
            { addToken(yytext(), "Palabra Reservada borde"); return new Symbol(sym.borde , yyline , yychar , yytext());
            } 
            // fall through
          case 226: break;
          case 87: 
            { addToken(yytext(), "Palabra Reservada false"); return new Symbol(sym.booleano , yyline , yychar , yytext());
            } 
            // fall through
          case 227: break;
          case 88: 
            { addToken(yytext(), "Palabra Reservada boton"); yybegin(ETIQUETA_BOTON_TABLA); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 228: break;
          case 89: 
            { addToken(yytext(), "Palabra Reservada tabla"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.tabla , yyline , yychar , yytext());
            } 
            // fall through
          case 229: break;
          case 90: 
            { addToken(yytext(), "Palabra Reservada salto"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.salto , yyline , yychar , yytext());
            } 
            // fall through
          case 230: break;
          case 91: 
            { addToken(yytext(), "Palabra Reservada boton cierre"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 231: break;
          case 92: 
            { addToken(yytext(), "Palabra Reservada cuerpo"); return new Symbol(sym.cuerpo , yyline , yychar , yytext());
            } 
            // fall through
          case 232: break;
          case 93: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_IMAGEN); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 233: break;
          case 94: 
            { addToken(yytext(), "Palabra Reservada titulo"); yybegin(ETIQUETA_CON_TEXTO);  return new Symbol(sym.titulo , yyline , yychar , yytext());
            } 
            // fall through
          case 234: break;
          case 95: 
            { addToken(yytext(), "Palabra Reservada textoA"); yybegin(ETIQUETA_CON_TEXTO); return new Symbol(sym.textoA , yyline , yychar , yytext());
            } 
            // fall through
          case 235: break;
          case 96: 
            { addToken(yytext(), "Palabra Reservada textoB"); yybegin(ETIQUETA_CON_TEXTO); return new Symbol(sym.textoB , yyline , yychar , yytext());
            } 
            // fall through
          case 236: break;
          case 97: 
            { addToken(yytext(), "Palabra Reservada titulo"); yybegin(YYINITIAL);  return new Symbol(sym.titulo , yyline , yychar , yytext());
            } 
            // fall through
          case 237: break;
          case 98: 
            { addToken(yytext(), "Palabra Reservada textoA"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.textoA , yyline , yychar , yytext());
            } 
            // fall through
          case 238: break;
          case 99: 
            { addToken(yytext(), "Palabra Reservada textoB"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.textoB , yyline , yychar , yytext());
            } 
            // fall through
          case 239: break;
          case 100: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 240: break;
          case 101: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_IMAGEN_TABLA); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 241: break;
          case 102: 
            { addToken(yytext(), "Palabra Reservada titulo"); yybegin(CONTENIDO_TABLA);  return new Symbol(sym.titulo , yyline , yychar , yytext());
            } 
            // fall through
          case 242: break;
          case 103: 
            { addToken(yytext(), "Palabra Reservada textoA"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.textoA , yyline , yychar , yytext());
            } 
            // fall through
          case 243: break;
          case 104: 
            { addToken(yytext(), "Palabra Reservada textoB"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.textoB , yyline , yychar , yytext());
            } 
            // fall through
          case 244: break;
          case 105: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 245: break;
          case 106: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(ETIQUETA_CON_TEXTO); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 246: break;
          case 107: 
            { addToken(yytext(), "Palabra Reservada espacio"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.espacio , yyline , yychar , yytext());
            } 
            // fall through
          case 247: break;
          case 108: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 248: break;
          case 109: 
            { addToken(yytext(), "Palabra Reservada columna"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.columna , yyline , yychar , yytext());
            } 
            // fall through
          case 249: break;
          case 110: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(ETIQUETA_CON_TEXTO_TABLA); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 250: break;
          case 111: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 251: break;
          case 112: 
            { addToken(yytext(), "Palabra Reservada repetir"); return new Symbol(sym.repetir , yyline , yychar , yytext());
            } 
            // fall through
          case 252: break;
          case 113: 
            { addToken(yytext(), "Funcion Nativa setPath"); return new Symbol(sym.setPath , yyline , yychar , yytext());
            } 
            // fall through
          case 253: break;
          case 114: 
            { addToken(yytext(), "Funcion Nativa setAlto"); return new Symbol(sym.setAlto , yyline , yychar , yytext());
            } 
            // fall through
          case 254: break;
          case 115: 
            { addToken(yytext(), "Funcion Nativa getPath"); return new Symbol(sym.getPath , yyline , yychar , yytext());
            } 
            // fall through
          case 255: break;
          case 116: 
            { addToken(yytext(), "Funcion Nativa getAlto"); return new Symbol(sym.getAlto , yyline , yychar , yytext());
            } 
            // fall through
          case 256: break;
          case 117: 
            { addToken(yytext(), "Palabra Reservada cabecera"); return new Symbol(sym.cabecera , yyline , yychar , yytext());
            } 
            // fall through
          case 257: break;
          case 118: 
            { addToken(yytext(), "Palabra Reservada columnac"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.columnaC , yyline , yychar , yytext());
            } 
            // fall through
          case 258: break;
          case 119: 
            { addToken(yytext(), "Funcion Nativa insertar"); return new Symbol(sym.insertar , yyline , yychar , yytext());
            } 
            // fall through
          case 259: break;
          case 120: 
            { addToken(yytext(), "Funcion Nativa setAncho"); return new Symbol(sym.setAncho , yyline , yychar , yytext());
            } 
            // fall through
          case 260: break;
          case 121: 
            { addToken(yytext(), "Funcion Nativa setBorde"); return new Symbol(sym.setBorde , yyline , yychar , yytext());
            } 
            // fall through
          case 261: break;
          case 122: 
            { addToken(yytext(), "Funcion Nativa setTexto"); return new Symbol(sym.setTexto , yyline , yychar , yytext());
            } 
            // fall through
          case 262: break;
          case 123: 
            { addToken(yytext(), "Funcion Nativa getAncho"); return new Symbol(sym.getAncho , yyline , yychar , yytext());
            } 
            // fall through
          case 263: break;
          case 124: 
            { addToken(yytext(), "Funcion Nativa getTexto"); return new Symbol(sym.getTexto , yyline , yychar , yytext());
            } 
            // fall through
          case 264: break;
          case 125: 
            { addToken(yytext(), "Palabra Reservada derecha"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 265: break;
          case 126: 
            { addToken(yytext(), "Palabra Reservada centrado"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 266: break;
          case 127: 
            { addToken(yytext(), "Palabra Reservada alineacion"); return new Symbol(sym.alineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 267: break;
          case 128: 
            { addToken(yytext(), "Funcion Nativa crearBoton"); return new Symbol(sym.crearBoton , yyline , yychar , yytext());
            } 
            // fall through
          case 268: break;
          case 129: 
            { addToken(yytext(), "Funcion Nativa crearTabla"); return new Symbol(sym.crearTabla , yyline , yychar , yytext());
            } 
            // fall through
          case 269: break;
          case 130: 
            { addToken(yytext(), "Funcion Nativa clickBoton"); return new Symbol(sym.clickBoton , yyline , yychar , yytext());
            } 
            // fall through
          case 270: break;
          case 131: 
            { addToken(yytext(), "Palabra Reservada izquierda"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 271: break;
          case 132: 
            { addToken(yytext(), "Funcion Nativa crearImagen"); return new Symbol(sym.crearImagen , yyline , yychar , yytext());
            } 
            // fall through
          case 272: break;
          case 133: 
            { addToken(yytext(), "Funcion Nativa crearTextoA"); return new Symbol(sym.crearTextoA , yyline , yychar , yytext());
            } 
            // fall through
          case 273: break;
          case 134: 
            { addToken(yytext(), "Funcion Nativa crearTextoB"); return new Symbol(sym.crearTextoB , yyline , yychar , yytext());
            } 
            // fall through
          case 274: break;
          case 135: 
            { addToken(yytext(), "Funcion Nativa crearParrafo"); return new Symbol(sym.crearParrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 275: break;
          case 136: 
            { addToken(yytext(), "Funcion Nativa setContenido"); return new Symbol(sym.setContenido , yyline , yychar , yytext());
            } 
            // fall through
          case 276: break;
          case 137: 
            { addToken(yytext(), "Funcion Nativa getContenido"); return new Symbol(sym.getContenido , yyline , yychar , yytext());
            } 
            // fall through
          case 277: break;
          case 138: 
            { addToken(yytext(), "Palabra Reservada justificado"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 278: break;
          case 139: 
            { addToken(yytext(), "Funcion Nativa setAlineacion"); return new Symbol(sym.setAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 279: break;
          case 140: 
            { addToken(yytext(), "Funcion Nativa getAlineacion"); return new Symbol(sym.getAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 280: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
