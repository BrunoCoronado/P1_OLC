/* The following code was generated by JFlex 1.7.0 */

package sistema.analisis;

import java_cup.runtime.Symbol;
import sistema.bean.Token;
import main.Main;

import static sistema.ui.Principal.errores;
import static sistema.ui.Principal.tokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ETIQUETA_CON_TEXTO = 2;
  public static final int TEXTO_ENTRE_COMILLAS = 4;
  public static final int TEXTO_ENTRE_COMILLAS_BOTON = 6;
  public static final int TEXTO_ENTRE_COMILLAS_IMAGEN = 8;
  public static final int ETIQUETA_ESPECIAL = 10;
  public static final int ETIQUETA_IMAGEN = 12;
  public static final int ETIQUETA_BOTON = 14;
  public static final int ETIQUETA_IMAGEN_CIERRE = 16;
  public static final int ETIQUETA_BOTON_CIERRE = 18;
  public static final int ETIQUETA_TABLA = 20;
  public static final int ETIQUETA_TABLA_CIERRE = 22;
  public static final int CONTENIDO_TABLA = 24;
  public static final int ETIQUETA_ESPECIAL_TABLA = 26;
  public static final int ETIQUETA_CON_TEXTO_TABLA = 28;
  public static final int ETIQUETA_IMAGEN_TABLA = 30;
  public static final int ETIQUETA_BOTON_TABLA = 32;
  public static final int ETIQUETA_IMAGEN_CIERRE_TABLA = 34;
  public static final int ETIQUETA_BOTON_CIERRE_TABLA = 36;
  public static final int TEXTO_ENTRE_COMILLAS_BOTON_TABLA = 38;
  public static final int TEXTO_ENTRE_COMILLAS_IMAGEN_TABLA = 40;
  public static final int ETIQUETA_HS = 42;
  public static final int TEXTO_ENTRE_COMILLAS_HSCRIPT = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2, 72, 73,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  5, 14,  0, 62,  0, 70,  0, 66, 67,  8, 64,  0, 65, 11,  7, 
     9, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0, 63,  4, 13,  6, 52, 
     0, 26, 28, 16, 44, 30, 40, 50, 53, 24, 59,  0, 38, 20, 42, 18, 
    22, 57, 32, 46, 34, 36,  0,  0, 48,  0, 55,  0, 61,  0,  0, 12, 
     0, 27, 29, 17, 45, 31, 41, 51, 54, 25, 60, 12, 39, 21, 43, 19, 
    23, 58, 33, 47, 35, 37, 12, 12, 49, 12, 56, 68, 71, 69, 15,  0, 
     0,  0,  0,  0,  0, 72,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\20\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\2\20\1\21\2\1\1\22\1\23\3\1"+
    "\1\24\1\25\1\1\1\26\15\1\1\27\1\30\1\31"+
    "\1\32\2\1\1\33\1\34\1\4\1\35\1\5\1\36"+
    "\1\37\2\40\1\41\1\42\1\7\1\43\1\1\1\42"+
    "\1\1\1\42\1\1\3\42\1\1\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\1\1\54\17\0"+
    "\1\55\11\0\1\56\1\57\1\60\1\61\1\0\1\62"+
    "\3\0\1\63\16\0\1\64\5\0\1\65\1\66\1\67"+
    "\1\3\2\0\1\70\2\71\2\0\2\42\1\0\3\42"+
    "\1\72\1\73\1\74\15\0\1\75\36\0\1\3\2\0"+
    "\2\76\2\0\2\42\1\0\3\42\25\0\1\77\1\100"+
    "\5\0\1\101\6\0\1\102\7\0\1\103\1\104\1\103"+
    "\1\104\1\0\1\42\1\101\1\42\1\105\4\0\1\106"+
    "\2\0\1\107\1\0\1\110\1\111\10\0\1\112\1\113"+
    "\1\114\1\0\1\115\1\116\1\117\3\0\1\120\1\121"+
    "\1\122\4\0\1\123\1\0\1\42\1\117\1\0\1\124"+
    "\1\0\1\125\1\0\1\126\1\127\1\130\6\0\1\131"+
    "\1\132\1\133\1\134\2\0\1\135\1\0\1\136\1\137"+
    "\1\140\1\141\1\0\1\42\1\0\1\142\1\143\4\0"+
    "\1\144\1\0\1\145\1\146\1\147\2\150\1\151\5\0"+
    "\1\152\2\0\1\153\2\0\1\154\2\0\1\155\1\156"+
    "\2\0\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456"+
    "\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6"+
    "\0\u06f0\0\u06a6\0\u06a6\0\u073a\0\u06a6\0\u06a6\0\u06a6\0\u06a6"+
    "\0\u06a6\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940"+
    "\0\u098a\0\u09d4\0\u073a\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46"+
    "\0\u0b90\0\u0bda\0\u06a6\0\u0c24\0\u06a6\0\u06a6\0\u0c6e\0\u06a6"+
    "\0\u06a6\0\u0cb8\0\u06a6\0\u0d02\0\u0d4c\0\u06a6\0\u06a6\0\u0d96"+
    "\0\u0de0\0\u0e2a\0\u073a\0\u06a6\0\u0e74\0\u06a6\0\u0ebe\0\u0f08"+
    "\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u1280"+
    "\0\u12ca\0\u06a6\0\u06a6\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u06a6"+
    "\0\u143c\0\u1486\0\u06a6\0\u14d0\0\u151a\0\u06a6\0\u1564\0\u15ae"+
    "\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u06a6"+
    "\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u17fe"+
    "\0\u1848\0\u06a6\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54"+
    "\0\u0a1e\0\u06a6\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10"+
    "\0\u1e5a\0\u1ea4\0\u1eee\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u0c6e"+
    "\0\u06a6\0\u1f38\0\u1f82\0\u1fcc\0\u06a6\0\u2016\0\u2060\0\u20aa"+
    "\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa"+
    "\0\u2344\0\u238e\0\u11a2\0\u06a6\0\u23d8\0\u2422\0\u246c\0\u24b6"+
    "\0\u2500\0\u06a6\0\u06a6\0\u06a6\0\u254a\0\u2594\0\u25de\0\u06a6"+
    "\0\u06a6\0\u14d0\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a"+
    "\0\u27e4\0\u282e\0\u06a6\0\u06a6\0\u06a6\0\u2878\0\u28c2\0\u290c"+
    "\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c"+
    "\0\u2ba6\0\u2bf0\0\u06a6\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62"+
    "\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2"+
    "\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202"+
    "\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452"+
    "\0\u349c\0\u34e6\0\u3530\0\u357a\0\u06a6\0\u35c4\0\u360e\0\u3658"+
    "\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8"+
    "\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8"+
    "\0\u3b42\0\u3b8c\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48"+
    "\0\u3d92\0\u3ddc\0\u3e26\0\u06a6\0\u06a6\0\u3e70\0\u3eba\0\u3f04"+
    "\0\u3f4e\0\u3f98\0\u06a6\0\u3fe2\0\u402c\0\u4076\0\u40c0\0\u410a"+
    "\0\u4154\0\u06a6\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6\0\u4310"+
    "\0\u435a\0\u06a6\0\u06a6\0\u14d0\0\u14d0\0\u43a4\0\u43ee\0\u14d0"+
    "\0\u4438\0\u06a6\0\u4482\0\u44cc\0\u4516\0\u4560\0\u06a6\0\u45aa"+
    "\0\u45f4\0\u06a6\0\u463e\0\u06a6\0\u06a6\0\u4688\0\u46d2\0\u471c"+
    "\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u06a6\0\u06a6\0\u06a6"+
    "\0\u48d8\0\u06a6\0\u06a6\0\u06a6\0\u4922\0\u496c\0\u49b6\0\u06a6"+
    "\0\u06a6\0\u06a6\0\u4a00\0\u4a4a\0\u4a94\0\u4ade\0\u06a6\0\u4b28"+
    "\0\u4b72\0\u14d0\0\u4bbc\0\u06a6\0\u4c06\0\u06a6\0\u4c50\0\u06a6"+
    "\0\u06a6\0\u06a6\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c"+
    "\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u4e56\0\u4ea0\0\u06a6\0\u4eea"+
    "\0\u06a6\0\u06a6\0\u06a6\0\u06a6\0\u4f34\0\u4f7e\0\u4fc8\0\u06a6"+
    "\0\u06a6\0\u5012\0\u505c\0\u50a6\0\u50f0\0\u06a6\0\u513a\0\u5184"+
    "\0\u06a6\0\u06a6\0\u06a6\0\u14d0\0\u06a6\0\u51ce\0\u5218\0\u5262"+
    "\0\u52ac\0\u52f6\0\u06a6\0\u5340\0\u538a\0\u06a6\0\u53d4\0\u541e"+
    "\0\u06a6\0\u5468\0\u54b2\0\u06a6\0\u06a6\0\u54fc\0\u5546\0\u06a6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\1\34\1\30\1\35\1\36"+
    "\5\30\1\37\1\40\1\41\2\42\4\30\2\43\2\44"+
    "\2\30\2\45\2\46\2\30\2\47\4\30\2\50\4\30"+
    "\2\51\4\30\1\52\23\30\1\0\1\33\1\30\1\31"+
    "\1\32\1\33\1\53\1\30\1\54\1\36\5\30\1\37"+
    "\1\55\7\30\2\56\2\30\2\57\6\30\2\60\12\30"+
    "\2\61\30\30\1\0\1\33\1\62\2\0\13\62\1\63"+
    "\56\62\1\64\15\62\2\0\13\62\1\65\56\62\1\64"+
    "\15\62\2\0\13\62\1\66\56\62\1\64\14\62\1\30"+
    "\2\0\3\30\1\67\101\30\2\0\1\30\1\31\1\32"+
    "\1\33\1\53\1\30\1\70\2\30\1\71\1\72\2\30"+
    "\1\37\1\73\7\30\2\74\2\30\2\75\54\30\1\0"+
    "\1\33\1\30\1\31\1\32\1\33\1\53\1\30\1\76"+
    "\6\30\1\37\1\77\11\30\2\100\10\30\2\101\44\30"+
    "\1\0\1\33\1\30\1\31\1\32\1\33\1\34\2\30"+
    "\1\36\20\30\2\102\56\30\1\0\1\33\1\30\1\31"+
    "\1\32\1\33\1\103\2\30\1\104\24\30\2\105\52\30"+
    "\1\0\1\33\1\30\1\31\1\32\1\33\1\53\1\30"+
    "\1\106\6\30\1\37\16\30\2\107\4\30\2\110\4\30"+
    "\2\111\36\30\1\0\1\33\1\30\2\0\105\30\2\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\30\1\35\1\36"+
    "\10\30\2\112\4\30\2\113\2\114\2\30\2\115\4\30"+
    "\2\116\4\30\2\117\4\30\2\120\30\30\1\0\1\33"+
    "\1\30\2\0\3\30\1\121\101\30\2\0\1\30\1\31"+
    "\1\32\1\33\1\53\1\30\1\54\1\36\5\30\1\37"+
    "\1\55\7\30\2\122\2\30\2\57\6\30\2\123\12\30"+
    "\2\61\30\30\1\0\1\33\1\30\1\31\1\32\1\33"+
    "\1\53\1\30\1\124\2\30\1\71\1\72\2\30\1\37"+
    "\1\125\7\30\2\74\2\30\2\75\54\30\1\0\1\33"+
    "\1\30\1\31\1\32\1\33\1\53\1\30\1\126\6\30"+
    "\1\37\1\127\11\30\2\100\10\30\2\101\44\30\1\0"+
    "\1\33\1\30\1\31\1\32\1\33\1\34\2\30\1\36"+
    "\20\30\2\130\56\30\1\0\1\33\1\30\1\31\1\32"+
    "\1\33\1\103\2\30\1\104\24\30\2\131\52\30\1\0"+
    "\1\33\1\62\2\0\13\62\1\132\56\62\1\64\15\62"+
    "\2\0\13\62\1\133\56\62\1\64\14\62\1\30\1\31"+
    "\1\32\1\33\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\2\30\1\144\1\30"+
    "\1\144\1\30\1\144\1\30\1\144\1\147\1\150\1\30"+
    "\1\144\1\30\1\144\1\151\1\152\1\153\1\154\1\110"+
    "\1\155\1\30\1\144\1\30\1\144\1\111\1\156\1\30"+
    "\1\144\1\30\1\144\1\30\1\144\1\30\1\144\1\30"+
    "\1\144\1\157\1\30\1\144\1\30\1\144\1\30\1\144"+
    "\1\30\1\144\1\30\1\160\1\161\1\162\1\163\1\164"+
    "\1\165\1\166\1\167\1\170\1\171\1\0\1\33\1\62"+
    "\2\0\13\62\1\172\56\62\1\64\14\62\114\0\1\32"+
    "\114\0\1\173\126\0\2\174\6\0\2\175\10\0\2\176"+
    "\76\0\2\177\102\0\2\200\106\0\2\201\144\0\2\202"+
    "\62\0\2\203\2\204\2\0\2\205\74\0\2\206\120\0"+
    "\2\207\143\0\2\210\23\0\4\211\1\212\105\211\20\0"+
    "\2\213\6\0\2\214\22\0\2\215\15\0\2\216\47\0"+
    "\2\217\124\0\2\220\72\0\2\221\4\0\2\222\104\0"+
    "\2\223\56\0\1\62\2\0\13\62\1\0\56\62\1\0"+
    "\14\62\16\0\1\224\21\0\2\225\2\226\6\0\2\227"+
    "\36\0\4\230\1\231\105\230\11\0\2\72\131\0\2\232"+
    "\124\0\2\233\2\0\2\234\112\0\2\235\72\0\2\236"+
    "\76\0\2\237\106\0\2\240\110\0\2\241\126\0\2\242"+
    "\102\0\2\243\100\0\2\244\120\0\2\245\102\0\2\246"+
    "\106\0\2\247\120\0\2\250\106\0\2\251\112\0\2\252"+
    "\56\0\4\253\1\254\105\253\32\0\2\255\106\0\2\256"+
    "\4\0\2\257\76\0\2\260\106\0\2\261\103\0\1\262"+
    "\111\0\1\263\111\0\1\264\103\0\1\265\1\266\112\0"+
    "\2\144\1\267\1\144\4\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\2\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\26\0"+
    "\2\142\1\267\1\144\4\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\2\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\26\0"+
    "\2\144\1\0\1\144\4\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\2\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\32\0"+
    "\1\270\144\0\2\271\51\0\2\144\1\0\1\144\4\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\271"+
    "\1\272\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\35\0\2\273\24\0\2\274\53\0"+
    "\2\144\1\0\1\144\3\0\1\273\1\275\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\274\1\276\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\2\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\53\0\2\277\63\0\2\144\1\0\1\144\4\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\277\1\300\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\2\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\26\0\2\144\1\0\1\144\4\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\242\1\301"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\2\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\26\0\2\144\1\0\1\144\4\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\243\1\302\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\2\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\23\0\1\303\211\0\1\304\112\0\1\305"+
    "\2\0\5\173\1\306\104\173\24\0\2\307\120\0\2\310"+
    "\112\0\2\311\112\0\2\312\102\0\2\313\120\0\2\314"+
    "\74\0\2\315\124\0\2\316\102\0\2\317\134\0\2\320"+
    "\102\0\2\321\104\0\2\322\120\0\2\323\70\0\2\324"+
    "\141\0\2\325\57\0\2\326\116\0\2\327\104\0\2\330"+
    "\100\0\2\331\122\0\2\332\126\0\2\333\76\0\2\334"+
    "\104\0\2\335\110\0\2\336\66\0\2\337\150\0\2\340"+
    "\62\0\2\341\120\0\2\342\106\0\2\343\114\0\2\344"+
    "\112\0\2\345\110\0\2\346\102\0\2\347\102\0\2\350"+
    "\120\0\2\351\102\0\2\352\122\0\2\353\110\0\2\354"+
    "\102\0\2\355\112\0\2\356\126\0\2\357\62\0\2\360"+
    "\120\0\2\361\46\0\1\265\1\362\1\33\107\265\10\363"+
    "\1\364\101\363\11\0\1\365\1\366\164\0\2\367\101\0"+
    "\2\370\43\0\2\144\1\0\1\144\4\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\367\1\371\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\26\0\2\144\1\0\1\144\4\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\370\1\372\1\0\1\144"+
    "\1\0\1\144\2\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\43\0\2\373\73\0\2\144\1\0\1\144"+
    "\4\0\1\144\1\0\1\144\1\0\1\144\1\373\1\374"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\2\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\26\0\2\144\1\0\1\144"+
    "\4\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\344\1\375\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\2\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\26\0\2\144\1\0\1\144"+
    "\4\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\345\1\376"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\2\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\23\0\1\33\131\0\2\377"+
    "\120\0\2\u0100\112\0\2\u0101\110\0\2\u0102\132\0\2\u0103"+
    "\50\0\2\u0104\120\0\2\u0105\122\0\2\u0106\112\0\2\u0107"+
    "\104\0\2\u0108\122\0\2\u0109\76\0\2\u010a\120\0\2\u010b"+
    "\127\0\2\u010c\57\0\2\u010d\126\0\2\u010e\72\0\2\u010f"+
    "\122\0\2\u0110\102\0\2\u0111\106\0\2\u0112\110\0\2\u0113"+
    "\133\0\2\u0114\45\0\2\u0115\153\0\2\u0116\65\0\2\u0117"+
    "\130\0\2\u0118\50\0\2\u0119\142\0\2\u011a\72\0\2\u011b"+
    "\130\0\2\u011c\76\0\2\u011d\104\0\2\u011e\132\0\2\u011f"+
    "\50\0\2\u0120\134\0\2\u0121\74\0\2\u0122\120\0\2\u0123"+
    "\106\0\2\u0124\114\0\2\u0125\106\0\2\u0126\130\0\2\u0127"+
    "\50\0\2\u0128\70\0\1\33\107\0\10\363\1\u0129\101\363"+
    "\7\0\1\33\1\364\112\0\2\366\121\0\2\u012a\124\0"+
    "\2\u012b\63\0\2\144\1\0\1\144\4\0\1\144\1\u012a"+
    "\1\u012c\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\2\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\26\0\2\144\1\0\1\144\4\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\u012b\1\u012d\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\2\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\53\0\2\u012e\63\0\2\144\1\0\1\144\4\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\u012e\1\u012f\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\26\0\2\144\1\0\1\144\4\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\u011b\1\u0130\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\26\0\2\144\1\0\1\144\4\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\u011c\1\u0131\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\45\0\2\u0132\100\0\2\u0133\116\0"+
    "\2\u0134\114\0\2\u0135\114\0\2\u0136\124\0\2\u0137\56\0"+
    "\2\u0138\136\0\2\u0139\74\0\2\u013a\100\0\2\u013b\110\0"+
    "\2\u013c\110\0\2\u013d\130\0\2\u013e\112\0\2\u013f\102\0"+
    "\2\u0140\114\0\2\u0141\100\0\2\u0142\114\0\2\u0143\120\0"+
    "\2\u0144\64\0\2\u0145\110\0\2\u0146\110\0\2\u0147\110\0"+
    "\2\u0148\124\0\2\u0149\124\0\2\u014a\74\0\2\u014b\110\0"+
    "\2\u014c\76\0\2\u014d\116\0\2\u014e\114\0\2\u014f\124\0"+
    "\2\u0150\70\0\2\u0151\100\0\2\u0152\120\0\2\u0153\124\0"+
    "\2\u0154\64\0\2\u0155\124\0\2\u0156\124\0\2\u0157\36\0"+
    "\7\363\1\33\1\u0129\101\363\42\0\2\u0158\57\0\2\144"+
    "\1\0\1\144\4\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\u0158\1\u0159\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\2\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\26\0\2\144"+
    "\1\0\1\144\4\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\u014c\1\u015a\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\2\0\1\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\53\0\2\u015b"+
    "\74\0\2\u015c\136\0\2\u015d\112\0\2\u015e\66\0\2\u015f"+
    "\102\0\2\u0160\120\0\2\u0161\2\u0162\114\0\2\u0163\100\0"+
    "\2\u0164\100\0\2\u0165\120\0\2\u0166\130\0\2\u0167\72\0"+
    "\2\u0168\100\0\2\u0169\120\0\2\u016a\2\u016b\126\0\2\u016c"+
    "\110\0\2\u016d\106\0\2\u016e\112\0\2\u016f\106\0\2\u0170"+
    "\62\0\2\u0171\120\0\2\u0172\2\u0173\126\0\2\u0174\66\0"+
    "\2\u0175\71\0\2\144\1\0\1\144\4\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\u0175\1\u0176\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\2\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\55\0\2\u0177\72\0\2\u0178\110\0\2\u0179\120\0"+
    "\2\u017a\114\0\2\u017b\137\0\2\u017c\73\0\2\u017d\62\0"+
    "\2\u017e\106\0\2\u017f\122\0\2\u0180\100\0\2\u0181\110\0"+
    "\2\u0182\126\0\2\u0183\61\0\2\144\1\0\1\144\4\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\u0183"+
    "\1\u0184\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\2\0\1\144\1\0\1\144\1\0"+
    "\1\144\1\0\1\144\47\0\2\u0185\132\0\2\u0186\74\0"+
    "\2\u0187\102\0\2\u0188\106\0\2\u0189\110\0\2\u018a\100\0"+
    "\2\u018b\112\0\2\u018c\142\0\2\u018d\52\0\1\u018e\113\0"+
    "\2\u018f\112\0\2\u0190\104\0\1\u0191\125\0\2\u0192\110\0"+
    "\2\u0193\130\0\2\u0194\54\0\1\u0195\147\0\2\u0196\56\0"+
    "\2\u0197\104\0\1\u0198\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\1\11\1\1\2\11\1\1\5\11\21\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\2\1\2\11"+
    "\4\1\1\11\1\1\1\11\15\1\4\11\2\1\2\11"+
    "\4\1\1\11\2\1\1\11\2\1\1\11\11\1\10\11"+
    "\2\1\1\11\17\0\1\11\11\0\4\11\1\0\1\11"+
    "\3\0\1\11\16\0\1\11\5\0\3\11\1\1\2\0"+
    "\2\11\1\1\2\0\2\1\1\0\3\1\3\11\15\0"+
    "\1\11\36\0\1\1\2\0\1\11\1\1\2\0\2\1"+
    "\1\0\3\1\25\0\2\11\5\0\1\11\6\0\1\11"+
    "\7\0\2\11\2\1\1\0\3\1\1\11\4\0\1\11"+
    "\2\0\1\11\1\0\2\11\10\0\3\11\1\0\3\11"+
    "\3\0\3\11\4\0\1\11\1\0\2\1\1\0\1\11"+
    "\1\0\1\11\1\0\3\11\6\0\4\11\2\0\1\11"+
    "\1\0\4\11\1\0\1\1\1\0\2\11\4\0\1\11"+
    "\1\0\1\1\3\11\1\1\1\11\5\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public void addToken(String lexema, String tipo){
        tokens.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void addError(String lexema, String tipo){
        errores.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public Symbol validarTextoEntreLLaves(String cadena){
        cadena = cadena.replace("\n", "");
        cadena = cadena.replace("<", "");
        cadena = cadena.replace(">", "");
        if(cadena.matches(".*([a-zA-Z]+|[0-9]+)+.*")){
            addToken(cadena, "texto Entre Etiquetas");
            return new Symbol(sym.textoEntreEtiquetas , yyline , yychar , cadena);
        }else{
            addToken("<", "menor que"); 
            return new Symbol(sym.menorQue , yyline , yychar , "<");
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yytext(), "NO RECONOCIDO - ANALIZADOR LEXICO");
            } 
            // fall through
          case 112: break;
          case 2: 
            { yychar=1;
            } 
            // fall through
          case 113: break;
          case 3: 
            { 
            } 
            // fall through
          case 114: break;
          case 4: 
            { addToken(yytext(), "menor que"); return new Symbol(sym.menorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 115: break;
          case 5: 
            { addToken(yytext(), "mayor que"); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 116: break;
          case 6: 
            { addToken(yytext(), "barra"); return new Symbol(sym.barra , yyline , yychar , yytext());
            } 
            // fall through
          case 117: break;
          case 7: 
            { addToken(yytext(), "igual"); return new Symbol(sym.igual , yyline , yychar , yytext());
            } 
            // fall through
          case 118: break;
          case 8: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS);
            } 
            // fall through
          case 119: break;
          case 9: 
            { addToken(yytext(), "aceptacion"); return new Symbol(sym.aceptacion , yyline , yychar , yytext());
            } 
            // fall through
          case 120: break;
          case 10: 
            { string.append( yytext() );
            } 
            // fall through
          case 121: break;
          case 11: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(YYINITIAL); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 122: break;
          case 12: 
            { string.append( '\\' );
            } 
            // fall through
          case 123: break;
          case 13: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_BOTON); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 124: break;
          case 14: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_IMAGEN); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 125: break;
          case 15: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_IMAGEN_CIERRE); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 126: break;
          case 16: 
            { addToken(yytext(), "Numero"); return new Symbol(sym.numero , yyline , yychar , yytext());
            } 
            // fall through
          case 127: break;
          case 17: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_IMAGEN);
            } 
            // fall through
          case 128: break;
          case 18: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_BOTON_CIERRE); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 129: break;
          case 19: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_BOTON);
            } 
            // fall through
          case 130: break;
          case 20: 
            { addToken(yytext(), "menor que cierre"); return new Symbol(sym.menorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 131: break;
          case 21: 
            { addToken(yytext(), "barra cierre"); return new Symbol(sym.barra , yyline , yychar , yytext());
            } 
            // fall through
          case 132: break;
          case 22: 
            { addToken(yytext(), "mayor que"); yybegin(CONTENIDO_TABLA); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 133: break;
          case 23: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_IMAGEN_CIERRE_TABLA); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 134: break;
          case 24: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_IMAGEN_TABLA);
            } 
            // fall through
          case 135: break;
          case 25: 
            { addToken(yytext(), "mayor que"); yybegin(ETIQUETA_BOTON_CIERRE_TABLA); return new Symbol(sym.mayorQue , yyline , yychar , yytext());
            } 
            // fall through
          case 136: break;
          case 26: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_BOTON_TABLA);
            } 
            // fall through
          case 137: break;
          case 27: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_BOTON_TABLA); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 138: break;
          case 28: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_IMAGEN_TABLA); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 139: break;
          case 29: 
            { addToken(yytext(), "not"); return new Symbol(sym.not , yyline , yychar , yytext());
            } 
            // fall through
          case 140: break;
          case 30: 
            { addToken(yytext(), "division"); return new Symbol(sym.division , yyline , yychar , yytext());
            } 
            // fall through
          case 141: break;
          case 31: 
            { addToken(yytext(), "multiplicacion"); return new Symbol(sym.multiplicacion , yyline , yychar , yytext());
            } 
            // fall through
          case 142: break;
          case 32: 
            { addToken(yytext(), "numero entero"); return new Symbol(sym.entero , yyline , yychar , yytext());
            } 
            // fall through
          case 143: break;
          case 33: 
            { addToken(yytext(), "punto"); return new Symbol(sym.punto , yyline , yychar , yytext());
            } 
            // fall through
          case 144: break;
          case 34: 
            { addToken(yytext(), "identificador"); return new Symbol(sym.identificador , yyline , yychar , yytext());
            } 
            // fall through
          case 145: break;
          case 35: 
            { string.setLength(0); yybegin(TEXTO_ENTRE_COMILLAS_HSCRIPT);
            } 
            // fall through
          case 146: break;
          case 36: 
            { addToken(yytext(), "dolar"); return new Symbol(sym.dolar , yyline , yychar , yytext());
            } 
            // fall through
          case 147: break;
          case 37: 
            { addToken(yytext(), "punto y coma"); return new Symbol(sym.puntoYComa , yyline , yychar , yytext());
            } 
            // fall through
          case 148: break;
          case 38: 
            { addToken(yytext(), "mas"); return new Symbol(sym.mas , yyline , yychar , yytext());
            } 
            // fall through
          case 149: break;
          case 39: 
            { addToken(yytext(), "menos"); return new Symbol(sym.menos , yyline , yychar , yytext());
            } 
            // fall through
          case 150: break;
          case 40: 
            { addToken(yytext(), "parentesis abre"); return new Symbol(sym.parentesisAbre , yyline , yychar , yytext());
            } 
            // fall through
          case 151: break;
          case 41: 
            { addToken(yytext(), "parentesis cierra"); return new Symbol(sym.parentesisCierra , yyline , yychar , yytext());
            } 
            // fall through
          case 152: break;
          case 42: 
            { addToken(yytext(), "llave abre"); return new Symbol(sym.llaveAbre , yyline , yychar , yytext());
            } 
            // fall through
          case 153: break;
          case 43: 
            { addToken(yytext(), "llave cierra"); return new Symbol(sym.llaveCierra , yyline , yychar , yytext());
            } 
            // fall through
          case 154: break;
          case 44: 
            { addToken(string.toString(), "texto Entre Comillas"); yybegin(ETIQUETA_HS); return new Symbol(sym.textoEntreComillas , yyline , yychar , string.toString());
            } 
            // fall through
          case 155: break;
          case 45: 
            { addToken(yytext(), "texto Entre Etiquetas"); return new Symbol(sym.textoEntreEtiquetas , yyline , yychar , yytext());
            } 
            // fall through
          case 156: break;
          case 46: 
            { string.append( '\"' );
            } 
            // fall through
          case 157: break;
          case 47: 
            { string.append( '\r' );
            } 
            // fall through
          case 158: break;
          case 48: 
            { string.append( '\t' );
            } 
            // fall through
          case 159: break;
          case 49: 
            { string.append( '\n' );
            } 
            // fall through
          case 160: break;
          case 50: 
            { yybegin(YYINITIAL); return validarTextoEntreLLaves(yytext());
            } 
            // fall through
          case 161: break;
          case 51: 
            { addToken(yytext(), "Palabra Reservada id"); return new Symbol(sym.id , yyline , yychar , yytext());
            } 
            // fall through
          case 162: break;
          case 52: 
            { yybegin(CONTENIDO_TABLA); return validarTextoEntreLLaves(yytext());
            } 
            // fall through
          case 163: break;
          case 53: 
            { addToken(yytext(), "menor igual"); return new Symbol(sym.menorIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 164: break;
          case 54: 
            { addToken(yytext(), "no igual"); return new Symbol(sym.noIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 165: break;
          case 55: 
            { addToken(yytext(), "mayor igual"); return new Symbol(sym.mayorIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 166: break;
          case 56: 
            { addToken(yytext(), "igual igual"); return new Symbol(sym.igualIgual , yyline , yychar , yytext());
            } 
            // fall through
          case 167: break;
          case 57: 
            { addToken(yytext(), "Palabra Reservada if"); return new Symbol(sym.controlIf , yyline , yychar , yytext());
            } 
            // fall through
          case 168: break;
          case 58: 
            { addToken(yytext(), "Palabra Reservada etiqueta final hs"); yybegin(YYINITIAL); return new Symbol(sym.finHS , yyline , yychar , yytext());
            } 
            // fall through
          case 169: break;
          case 59: 
            { addToken(yytext(), "and"); return new Symbol(sym.and , yyline , yychar , yytext());
            } 
            // fall through
          case 170: break;
          case 60: 
            { addToken(yytext(), "or"); return new Symbol(sym.or , yyline , yychar , yytext());
            } 
            // fall through
          case 171: break;
          case 61: 
            { addToken(yytext(), "Palabra Reservada etiqueta inicial hs"); yybegin(ETIQUETA_HS); return new Symbol(sym.inicioHS , yyline , yychar , yytext());
            } 
            // fall through
          case 172: break;
          case 62: 
            { addToken(yytext(), "numero decimal"); return new Symbol(sym.decimal , yyline , yychar , yytext());
            } 
            // fall through
          case 173: break;
          case 63: 
            { addToken(yytext(), "Palabra Reservada path"); return new Symbol(sym.path , yyline , yychar , yytext());
            } 
            // fall through
          case 174: break;
          case 64: 
            { addToken(yytext(), "Palabra Reservada alto"); return new Symbol(sym.alto , yyline , yychar , yytext());
            } 
            // fall through
          case 175: break;
          case 65: 
            { addToken(yytext(), "Palabra Reservada true"); return new Symbol(sym.booleano , yyline , yychar , yytext());
            } 
            // fall through
          case 176: break;
          case 66: 
            { addToken(yytext(), "Palabra Reservada fila"); return new Symbol(sym.fila , yyline , yychar , yytext());
            } 
            // fall through
          case 177: break;
          case 67: 
            { addToken(yytext(), "Palabra Reservada echo"); return new Symbol(sym.booleano , yyline , yychar , yytext());
            } 
            // fall through
          case 178: break;
          case 68: 
            { addToken(yytext(), "Palabra Reservada else"); return new Symbol(sym.controlElse , yyline , yychar , yytext());
            } 
            // fall through
          case 179: break;
          case 69: 
            { addToken(yytext(), "Palabra Reservada compi"); return new Symbol(sym.compi , yyline , yychar , yytext());
            } 
            // fall through
          case 180: break;
          case 70: 
            { addToken(yytext(), "Palabra Reservada boton"); yybegin(ETIQUETA_BOTON); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 181: break;
          case 71: 
            { addToken(yytext(), "Palabra Reservada tabla"); yybegin(ETIQUETA_TABLA); return new Symbol(sym.tabla , yyline , yychar , yytext());
            } 
            // fall through
          case 182: break;
          case 72: 
            { addToken(yytext(), "Palabra Reservada fondo"); return new Symbol(sym.fondo , yyline , yychar , yytext());
            } 
            // fall through
          case 183: break;
          case 73: 
            { addToken(yytext(), "Palabra Reservada salto"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.salto , yyline , yychar , yytext());
            } 
            // fall through
          case 184: break;
          case 74: 
            { addToken(yytext(), "Palabra Reservada salto"); return new Symbol(sym.salto , yyline , yychar , yytext());
            } 
            // fall through
          case 185: break;
          case 75: 
            { addToken(yytext(), "Palabra Reservada ancho"); return new Symbol(sym.ancho , yyline , yychar , yytext());
            } 
            // fall through
          case 186: break;
          case 76: 
            { addToken(yytext(), "Palabra Reservada texto"); return new Symbol(sym.texto , yyline , yychar , yytext());
            } 
            // fall through
          case 187: break;
          case 77: 
            { addToken(yytext(), "Palabra Reservada boton cierre"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 188: break;
          case 78: 
            { addToken(yytext(), "Palabra Reservada borde"); return new Symbol(sym.borde , yyline , yychar , yytext());
            } 
            // fall through
          case 189: break;
          case 79: 
            { addToken(yytext(), "Palabra Reservada false"); return new Symbol(sym.booleano , yyline , yychar , yytext());
            } 
            // fall through
          case 190: break;
          case 80: 
            { addToken(yytext(), "Palabra Reservada boton"); yybegin(ETIQUETA_BOTON_TABLA); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 191: break;
          case 81: 
            { addToken(yytext(), "Palabra Reservada tabla"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.tabla , yyline , yychar , yytext());
            } 
            // fall through
          case 192: break;
          case 82: 
            { addToken(yytext(), "Palabra Reservada salto"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.salto , yyline , yychar , yytext());
            } 
            // fall through
          case 193: break;
          case 83: 
            { addToken(yytext(), "Palabra Reservada boton cierre"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.boton , yyline , yychar , yytext());
            } 
            // fall through
          case 194: break;
          case 84: 
            { addToken(yytext(), "Palabra Reservada cuerpo"); return new Symbol(sym.cuerpo , yyline , yychar , yytext());
            } 
            // fall through
          case 195: break;
          case 85: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_IMAGEN); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 196: break;
          case 86: 
            { addToken(yytext(), "Palabra Reservada titulo"); yybegin(ETIQUETA_CON_TEXTO);  return new Symbol(sym.titulo , yyline , yychar , yytext());
            } 
            // fall through
          case 197: break;
          case 87: 
            { addToken(yytext(), "Palabra Reservada textoA"); yybegin(ETIQUETA_CON_TEXTO); return new Symbol(sym.textoA , yyline , yychar , yytext());
            } 
            // fall through
          case 198: break;
          case 88: 
            { addToken(yytext(), "Palabra Reservada textoB"); yybegin(ETIQUETA_CON_TEXTO); return new Symbol(sym.textoB , yyline , yychar , yytext());
            } 
            // fall through
          case 199: break;
          case 89: 
            { addToken(yytext(), "Palabra Reservada titulo"); yybegin(YYINITIAL);  return new Symbol(sym.titulo , yyline , yychar , yytext());
            } 
            // fall through
          case 200: break;
          case 90: 
            { addToken(yytext(), "Palabra Reservada textoA"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.textoA , yyline , yychar , yytext());
            } 
            // fall through
          case 201: break;
          case 91: 
            { addToken(yytext(), "Palabra Reservada textoB"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.textoB , yyline , yychar , yytext());
            } 
            // fall through
          case 202: break;
          case 92: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 203: break;
          case 93: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_IMAGEN_TABLA); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 204: break;
          case 94: 
            { addToken(yytext(), "Palabra Reservada titulo"); yybegin(CONTENIDO_TABLA);  return new Symbol(sym.titulo , yyline , yychar , yytext());
            } 
            // fall through
          case 205: break;
          case 95: 
            { addToken(yytext(), "Palabra Reservada textoA"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.textoA , yyline , yychar , yytext());
            } 
            // fall through
          case 206: break;
          case 96: 
            { addToken(yytext(), "Palabra Reservada textoB"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.textoB , yyline , yychar , yytext());
            } 
            // fall through
          case 207: break;
          case 97: 
            { addToken(yytext(), "Palabra Reservada imagen"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.imagen , yyline , yychar , yytext());
            } 
            // fall through
          case 208: break;
          case 98: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(ETIQUETA_CON_TEXTO); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 209: break;
          case 99: 
            { addToken(yytext(), "Palabra Reservada espacio"); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.espacio , yyline , yychar , yytext());
            } 
            // fall through
          case 210: break;
          case 100: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(YYINITIAL); yybegin(ETIQUETA_ESPECIAL); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 211: break;
          case 101: 
            { addToken(yytext(), "Palabra Reservada columna"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.columna , yyline , yychar , yytext());
            } 
            // fall through
          case 212: break;
          case 102: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(ETIQUETA_CON_TEXTO_TABLA); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 213: break;
          case 103: 
            { addToken(yytext(), "Palabra Reservada parrafo"); yybegin(CONTENIDO_TABLA); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.parrafo , yyline , yychar , yytext());
            } 
            // fall through
          case 214: break;
          case 104: 
            { addToken(yytext(), "Palabra Reservada repetir"); return new Symbol(sym.repetir , yyline , yychar , yytext());
            } 
            // fall through
          case 215: break;
          case 105: 
            { addToken(yytext(), "Palabra Reservada cabecera"); return new Symbol(sym.cabecera , yyline , yychar , yytext());
            } 
            // fall through
          case 216: break;
          case 106: 
            { addToken(yytext(), "Palabra Reservada columnac"); yybegin(ETIQUETA_ESPECIAL_TABLA); return new Symbol(sym.columnaC , yyline , yychar , yytext());
            } 
            // fall through
          case 217: break;
          case 107: 
            { addToken(yytext(), "Palabra Reservada derecha"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 218: break;
          case 108: 
            { addToken(yytext(), "Palabra Reservada centrado"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 219: break;
          case 109: 
            { addToken(yytext(), "Palabra Reservada alineacion"); return new Symbol(sym.alineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 220: break;
          case 110: 
            { addToken(yytext(), "Palabra Reservada izquierda"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 221: break;
          case 111: 
            { addToken(yytext(), "Palabra Reservada justificado"); return new Symbol(sym.tipoAlineacion , yyline , yychar , yytext());
            } 
            // fall through
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
