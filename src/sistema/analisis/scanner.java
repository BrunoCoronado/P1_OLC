/* The following code was generated by JFlex 1.6.1 */

package sistema.analisis;

/*impor java_cup.runtime.Symbol;*/
import sistema.bean.Token;
import main.Main;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>scanner.jflex</tt>
 */
public class scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    50,  5, 10,  8,  8,  8,  8,  8,  8,  8,  6,  8,  8,  8,  8, 11, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  8,  8,  4, 12,  7,  8, 
     0, 30, 32, 14, 42, 34, 38, 57, 48, 22, 51,  0, 28, 18, 40, 16, 
    20, 46, 36, 53, 24, 26,  0,  0, 55,  0, 44,  8, 13,  8,  8,  8, 
     0, 31, 33, 15, 43, 35, 39, 58, 49, 23, 52,  8, 29, 19, 41, 17, 
    21, 47, 37, 54, 25, 27,  8,  8, 56,  8, 45,  8,  8,  8,  8,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\1\1\2"+
    "\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2"+
    "\1\1\1\2\1\1\1\2\1\1\1\2\1\1\1\2"+
    "\1\1\1\14\1\15\1\16\5\0\4\1\1\0\1\1"+
    "\1\0\1\17\1\0\1\1\1\17\1\1\4\0\4\1"+
    "\2\0\2\1\1\0\1\1\3\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\20\1\21\1\22\1\23"+
    "\6\0\5\1\2\0\2\1\2\0\2\1\4\0\4\1"+
    "\3\0\3\1\2\0\2\1\3\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\6\0\5\1\1\24\1\0"+
    "\1\24\1\1\2\0\2\1\3\0\1\25\3\1\1\25"+
    "\1\0\1\26\1\0\1\1\1\26\1\1\2\0\2\1"+
    "\1\0\1\27\1\0\1\1\1\27\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\30\4\0\1\30\4\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\31\1\32\1\1"+
    "\1\31\1\32\1\0\1\33\1\1\1\33\1\34\1\0"+
    "\1\34\1\1\1\35\1\36\1\35\1\36\1\0\1\1"+
    "\1\0\1\1\2\37\1\0\1\40\2\0\1\1\1\40"+
    "\2\1\1\0\1\1\1\41\1\0\1\41\1\1\1\42"+
    "\1\43\1\44\1\42\1\43\1\44\1\0\1\1\1\45"+
    "\1\0\1\1\1\0\1\1\1\46\2\0\1\46\2\1"+
    "\2\47\1\0\1\1\1\0\1\1\2\50\1\0\1\1"+
    "\1\51\1\52\1\0\1\51\1\52\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\53\2\54\1\0\1\1"+
    "\1\0\1\1\2\55\1\0\1\1\2\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\166\0\166\0\354\0\u0127"+
    "\0\u0127\0\166\0\u0162\0\u0127\0\u0127\0\u0127\0\u019d\0\u01d8"+
    "\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\166\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\166\0\u0973\0\u09ae\0\u0127\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\166\0\166\0\166\0\166\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\166\0\u1df6\0\u0127\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\166\0\u2009\0\u2044\0\u207f\0\u0127"+
    "\0\u20ba\0\166\0\u20f5\0\u2130\0\u0127\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\166\0\u22cd\0\u2308\0\u0127\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\166\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u0127\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\166"+
    "\0\u2855\0\u2890\0\u0127\0\u28cb\0\u2906\0\166\0\u2941\0\u0127"+
    "\0\166\0\u297c\0\u0127\0\u29b7\0\166\0\166\0\u0127\0\u0127"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\166\0\u0127\0\u2ade\0\166"+
    "\0\u2b19\0\u2b54\0\u2b8f\0\u0127\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\166\0\u2cb6\0\u0127\0\u2cf1\0\166\0\166\0\166\0\u0127"+
    "\0\u0127\0\u0127\0\u2d2c\0\u2d67\0\166\0\u2da2\0\u2ddd\0\u2e18"+
    "\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\166"+
    "\0\u0127\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\166\0\u0127\0\u30dc"+
    "\0\u3117\0\166\0\166\0\u3152\0\u0127\0\u0127\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\166\0\166\0\u0127"+
    "\0\u332a\0\u3365\0\u33a0\0\u33db\0\166\0\u0127\0\u3416\0\u3451"+
    "\0\166\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\11\1\13\1\14\1\15\1\16\1\11\1\17\1\20"+
    "\1\3\1\11\1\3\1\11\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\3\1\11\1\3\1\11\1\27\1\30"+
    "\1\31\1\32\1\3\1\11\1\3\1\11\1\33\1\34"+
    "\1\3\1\11\1\35\1\36\1\3\1\11\1\3\1\11"+
    "\1\3\1\11\1\6\1\37\1\40\1\41\1\42\1\3"+
    "\1\11\1\3\1\11\1\43\2\3\7\43\1\44\2\43"+
    "\1\45\55\43\75\0\1\5\75\0\1\46\72\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\1\11\1\13\4\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\20\0\2\47\10\0\2\50\2\0\2\51\2\0\2\52"+
    "\34\0\2\11\1\0\6\11\1\0\1\11\1\47\1\53"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\50\1\54\1\0\1\11\1\51\1\55\1\0\1\11"+
    "\1\52\1\56\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\36\0\2\57\40\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\57\1\60"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\22\0\2\61\26\0\2\62\2\63\22\0"+
    "\2\11\1\0\6\11\1\0\1\11\1\0\1\11\1\61"+
    "\1\64\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\62"+
    "\1\65\1\63\1\66\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\26\0"+
    "\2\67\6\0\2\70\2\0\2\71\2\72\32\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\67\1\73\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\70\1\74\1\0\1\11\1\71\1\75"+
    "\1\72\1\76\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\34\0\2\77"+
    "\12\0\2\100\26\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\77\1\101\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\100\1\102\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\20\0\2\103\56\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\103\1\104\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\20\0\2\105\4\0\2\106"+
    "\6\0\2\107\40\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\105\1\110\1\0\1\11\1\0\1\11\1\106\1\111"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\107\1\112"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\42\0\2\113\34\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\113\1\114\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\32\0\2\115\44\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\115\1\116"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\36\0\2\117"+
    "\40\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\117\1\120\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\43\2\0\7\43\1\0\2\43\1\0\55\43\12\0"+
    "\1\121\15\0\2\122\12\0\2\123\2\0\2\124\21\0"+
    "\6\125\1\0\64\125\22\0\2\126\10\0\2\127\77\0"+
    "\2\130\67\0\2\131\101\0\2\132\26\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\126\1\133\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\127"+
    "\1\134\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\130\1\135\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\131\1\136\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\132\1\137\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\30\0\2\140\12\0"+
    "\2\141\32\0\2\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\140"+
    "\1\142\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\141\1\143\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\36\0\2\144\111\0\2\145\20\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\144\1\146\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\145\1\147\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\30\0\2\150\101\0"+
    "\2\151\120\0\2\152\34\0\2\153\44\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\150\1\154\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\151\1\155\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\152\1\156\1\0\1\11\5\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\153\1\157\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\26\0\2\160\2\161"+
    "\57\0\2\162\60\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\160\1\163"+
    "\1\161\1\164\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\5\0\2\11\1\0\6\11\1\162\1\165"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\30\0\2\166\12\0\2\167\32\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\166\1\170\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\167\1\171\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\50\0\2\172"+
    "\55\0\2\173\71\0\2\174\42\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\172\1\175\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\173\1\176"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\174\1\177"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\44\0\2\200\32\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\200\1\201\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\65\0\2\202"+
    "\11\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\202\1\203\1\0\1\11\1\0\1\11"+
    "\34\0\2\204\42\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\204\1\205\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\5\0\1\206\111\0\2\207\77\0\2\210"+
    "\103\0\2\211\67\0\2\212\57\0\2\213\46\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\207\1\214\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\210\1\215"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\211\1\216\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\212\1\217"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\213\1\220\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\60\0\2\221"+
    "\55\0\2\222\32\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\221\1\223\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\5\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\222\1\224\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\71\0\2\225\32\0\2\226\44\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\225\1\227\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\226\1\230"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\32\0\2\231"+
    "\73\0\2\232\65\0\2\233\103\0\2\234\34\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\231\1\235"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\232\1\236\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\233\1\237\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\234\1\240"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\50\0\2\241"+
    "\41\0\2\242\131\0\2\243\16\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\241\1\244\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\242\1\245\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\243\1\246\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\20\0\2\247\123\0\2\250"+
    "\24\0\2\11\1\0\6\11\1\0\1\11\1\247\1\251"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\250\1\252\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\52\0\2\253\55\0\2\254\120\0\2\255\11\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\253\1\256"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\254\1\257\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\255\1\260\1\0\1\11\1\0\1\11\42\0\2\261"+
    "\34\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\261\1\262\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\30\0\2\263\46\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\263\1\264\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\30\0\2\265\46\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\265\1\266\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\7\0\1\6\111\0\2\267"+
    "\65\0\2\270\73\0\2\271\63\0\2\272\117\0\2\273"+
    "\32\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\267\1\274\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\270\1\275\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\271\1\276\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\272\1\277\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\273\1\300\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\36\0\2\301\40\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\301\1\302"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\42\0\2\303\55\0\2\304\50\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\303\1\305"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\304\1\306\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\34\0\2\307"+
    "\73\0\2\310\53\0\2\311\56\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\307\1\312"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\310\1\313\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\311\1\314\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\42\0\2\315\47\0\2\316"+
    "\56\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\315\1\317\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\316\1\320"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\50\0\2\321\63\0\2\322\34\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\321\1\323\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\322\1\324\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\20\0\2\325\113\0\2\326"+
    "\34\0\2\11\1\0\6\11\1\0\1\11\1\325\1\327"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\326\1\330\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\16\0\2\331\60\0\2\11\1\0\6\11\1\331\1\332"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\26\0\2\333\50\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\333\1\334\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\20\0\2\335\56\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\335\1\336\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\50\0\2\337"+
    "\41\0\2\340\113\0\2\341\65\0\2\342\40\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\337\1\343\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\340\1\344\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\341\1\345"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\1\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\342\1\346\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\46\0\2\347"+
    "\30\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\347\1\350\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\50\0\2\351\63\0\2\352\34\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\351\1\353\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\5\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\352\1\354\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\20\0\2\355\107\0\2\356"+
    "\2\357\36\0\2\11\1\0\6\11\1\0\1\11\1\355"+
    "\1\360\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\356\1\361\1\357"+
    "\1\362\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\36\0\2\363\40\0\2\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\363"+
    "\1\364\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\62\0\1\365\15\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\365\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\60\0\2\366"+
    "\16\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\366\1\367"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\46\0\2\370\30\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\370\1\371"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\36\0\2\372\77\0\2\373\77\0\2\374"+
    "\24\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\372\1\375\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\373\1\376\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\374\1\377\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\20\0\2\u0100\56\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\u0100\1\u0101\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\44\0\2\u0102\32\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\u0102\1\u0103"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\16\0\2\u0104\60\0\2\11"+
    "\1\0\6\11\1\u0104\1\u0105\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\36\0\2\u0106"+
    "\40\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\u0106\1\u0107\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\26\0\2\u0108\50\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\u0108\1\u0109"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\16\0\2\u010a\111\0\2\u010b\53\0\2\u010c"+
    "\56\0\2\11\1\0\6\11\1\u010a\1\u010d\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\u010b\1\u010e\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\6\11\1\0\1\11\1\u010c\1\u010f"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\52\0\2\u0110\24\0\2\11\1\0\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\u0110\1\u0111\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\26\0\2\u0112\50\0\2\11\1\0\6\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\u0112\1\u0113\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\16\0\2\u0114\60\0\2\11"+
    "\1\0\6\11\1\u0114\1\u0115\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\62\0\1\u0116"+
    "\15\0\2\11\1\0\6\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\u0116\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\36\0\2\u0117\40\0\2\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\u0117"+
    "\1\u0118\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\20\0\2\u0119\56\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\u0119\1\u011a\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\36\0\2\u011b\40\0"+
    "\2\11\1\0\6\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\u011b\1\u011c\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\50\0"+
    "\2\u011d\26\0\2\11\1\0\6\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\u011d"+
    "\1\u011e\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\52\0\2\u011f\24\0\2\11\1\0\6\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\u011f\1\u0120\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\20\0\2\u0121\56\0\2\11\1\0"+
    "\6\11\1\0\1\11\1\u0121\1\u0122\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\1\1\2\11\3\1\1\11\31\1"+
    "\1\11\1\1\5\0\4\1\1\0\1\1\1\0\1\11"+
    "\1\0\3\1\4\0\4\1\2\0\2\1\1\0\1\1"+
    "\3\0\3\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\4\11\6\0\5\1\2\0\2\1\2\0\2\1\4\0"+
    "\4\1\3\0\3\1\2\0\2\1\3\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\6\0\5\1\1\11"+
    "\1\0\2\1\2\0\2\1\3\0\1\11\4\1\1\0"+
    "\1\11\1\0\3\1\2\0\2\1\1\0\1\11\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\4\0\5\1\1\0\1\1\2\0\2\1\1\0\1\11"+
    "\4\1\1\0\1\11\2\1\1\11\1\0\2\1\2\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\11\2\0\4\1\1\0\1\1\1\11\1\0\2\1"+
    "\3\11\3\1\1\0\1\1\1\11\1\0\1\1\1\0"+
    "\2\1\2\0\3\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\2\11\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public void addToken(String lexema, String tipo){
        main.Main.tokens.add(new Token(lexema, tipo, yyline, yycolumn));
    }

    public void addError(String lexema, String tipo){
        main.Main.errores.add(new Token(lexema, tipo, yyline, yycolumn));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(yytext(), "texto                        "); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 47: break;
          case 2: 
            { System.out.print(yytext());
            }
          case 48: break;
          case 3: 
            { yychar=1;
            }
          case 49: break;
          case 4: 
            { 
            }
          case 50: break;
          case 5: 
            { addToken(yytext(), "menor que                    "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 51: break;
          case 6: 
            { addToken(yytext(), "exclamacion                  "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 52: break;
          case 7: 
            { addToken(yytext(), "mayor que                    "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 53: break;
          case 8: 
            { addToken(yytext(), "numero"+yytext()              ); /*return new Symbol(sym.numero , yyline , yychar , yytext());*/
            }
          case 54: break;
          case 9: 
            { addToken(yytext(), "comillas                     ");  string.setLength(0); yybegin(STRING); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 55: break;
          case 10: 
            { addToken(yytext(), "barra                        "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 56: break;
          case 11: 
            { addToken(yytext(), "igual                        "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 57: break;
          case 12: 
            { string.append( yytext() );
            }
          case 58: break;
          case 13: 
            { addToken(string.toString(), "texto entre comillas"); addToken(yytext(), "comillacierra"); /*yybegin(YYINITIAL); return new Symbol(sym.cadena , yyline , yychar , string.toString());*/
            }
          case 59: break;
          case 14: 
            { string.append( '\\' );
            }
          case 60: break;
          case 15: 
            { addToken(yytext(), "Palabra Reservada id         "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 61: break;
          case 16: 
            { string.append( '\"' );
            }
          case 62: break;
          case 17: 
            { string.append( '\t' );
            }
          case 63: break;
          case 18: 
            { string.append( '\r' );
            }
          case 64: break;
          case 19: 
            { string.append( '\n' );
            }
          case 65: break;
          case 20: 
            { addToken(yytext(), "Palabra Reservada path       "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 66: break;
          case 21: 
            { addToken(yytext(), "Palabra Reservada true       "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 67: break;
          case 22: 
            { addToken(yytext(), "Palabra Reservada alto       "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 68: break;
          case 23: 
            { addToken(yytext(), "Palabra Reservada fila       "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 69: break;
          case 24: 
            { addToken(yytext(), "Palabra Reservada compi      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 70: break;
          case 25: 
            { addToken(yytext(), "Palabra Reservada tabla      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 71: break;
          case 26: 
            { addToken(yytext(), "Palabra Reservada texto      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 72: break;
          case 27: 
            { addToken(yytext(), "Palabra Reservada ancho      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 73: break;
          case 28: 
            { addToken(yytext(), "Palabra Reservada boton      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 74: break;
          case 29: 
            { addToken(yytext(), "Palabra Reservada fondo      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 75: break;
          case 30: 
            { addToken(yytext(), "Palabra Reservada false      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 76: break;
          case 31: 
            { addToken(yytext(), "Palabra Reservada salto      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 77: break;
          case 32: 
            { addToken(yytext(), "Palabra Reservada cuerpo     "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 78: break;
          case 33: 
            { addToken(yytext(), "Palabra Reservada imagen     "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 79: break;
          case 34: 
            { addToken(yytext(), "Palabra Reservada titulo     "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 80: break;
          case 35: 
            { addToken(yytext(), "Palabra Reservada textoa     "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 81: break;
          case 36: 
            { addToken(yytext(), "Palabra Reservada textob     "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 82: break;
          case 37: 
            { addToken(yytext(), "Palabra Reservada borde      "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 83: break;
          case 38: 
            { addToken(yytext(), "Palabra Reservada columna    "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 84: break;
          case 39: 
            { addToken(yytext(), "Palabra Reservada parrafo    "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 85: break;
          case 40: 
            { addToken(yytext(), "Palabra Reservada derecha    "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 86: break;
          case 41: 
            { addToken(yytext(), "Palabra Reservada columnac   "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 87: break;
          case 42: 
            { addToken(yytext(), "Palabra Reservada cabecera   "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 88: break;
          case 43: 
            { addToken(yytext(), "Palabra Reservada centrado   "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 89: break;
          case 44: 
            { addToken(yytext(), "Palabra Reservada izquierda  "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 90: break;
          case 45: 
            { addToken(yytext(), "Palabra Reservada alineacion "); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 91: break;
          case 46: 
            { addToken(yytext(), "Palabra Reservada justificado"); /*return new Symbol(sym. , yyline , yychar , yytext());*/
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
